
ryee002_sqian003_lab10_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002d0  00000364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800104  00800104  00000368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3c  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000892  00000000  00000000  00000e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e6  00000000  00000000  000016fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000529  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f7  00000000  00000000  000020c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b8 d0       	rcall	.+368    	; 0x234 <main>
  c4:	03 c1       	rjmp	.+518    	; 0x2cc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
  f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
  f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
  f8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  fc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 100:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 104:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 126:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 12a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
 12e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 13c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 140:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 144:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
void TimerOff() {
	TCCR1B = 0x00; // bit3bit1bit0=000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
ISR(TIMER1_COMPA_vect) {
	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 15a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 15e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 162:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 166:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 16a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 16e:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 172:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:

// Set TimerISR() to tick every M ms
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 18c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 194:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <__data_end>
 19c:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <__data_end+0x1>
 1a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end+0x2>
 1a4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x3>
 1a8:	08 95       	ret

000001aa <Tick_BL>:
		timerThree += timeSet;
    }
}

void Tick_BL() {
	switch(BL_state) {
 1aa:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <BL_state>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	41 f0       	breq	.+16     	; 0x1c2 <Tick_BL+0x18>
 1b2:	18 f0       	brcs	.+6      	; 0x1ba <Tick_BL+0x10>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	61 f0       	breq	.+24     	; 0x1d0 <Tick_BL+0x26>
 1b8:	0f c0       	rjmp	.+30     	; 0x1d8 <Tick_BL+0x2e>
		case BL_start:
		BL_state = BL_off;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <BL_state>
		break;
 1c0:	10 c0       	rjmp	.+32     	; 0x1e2 <Tick_BL+0x38>
		
		case BL_off:
		BL_state = BL_on;
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <BL_state>
		blink = 0x00;
		//PORTB = blink;
		break;
		
		case BL_on:
		blink = 0x08;
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <blink>
		//PORTB = blink;
		break;
 1ce:	08 95       	ret
		case BL_off:
		BL_state = BL_on;
		break;
		
		case BL_on:
		BL_state = BL_off;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <BL_state>
		break;
 1d6:	05 c0       	rjmp	.+10     	; 0x1e2 <Tick_BL+0x38>
		
		default:
		BL_state = BL_start;
 1d8:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <BL_state>
		break;
	}	
	switch(BL_state) {
		case BL_start:
		blink = 0x00;
 1dc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <blink>
		default:
		blink = 0x00;
		//PORTB = blink;
		break;
	}
}
 1e0:	08 95       	ret
		blink = 0x00;
		//PORTB = blink;
		break;
		
		case BL_off:
		blink = 0x00;
 1e2:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <blink>
 1e6:	08 95       	ret

000001e8 <Tick_Three>:
		break;
	}
}

void Tick_Three() {
	switch(Three_state) {
 1e8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Three_state>
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	51 f0       	breq	.+20     	; 0x204 <Tick_Three+0x1c>
 1f0:	28 f0       	brcs	.+10     	; 0x1fc <Tick_Three+0x14>
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	69 f0       	breq	.+26     	; 0x210 <Tick_Three+0x28>
 1f6:	83 30       	cpi	r24, 0x03	; 3
 1f8:	91 f0       	breq	.+36     	; 0x21e <Tick_Three+0x36>
 1fa:	15 c0       	rjmp	.+42     	; 0x226 <Tick_Three+0x3e>
		case Three_start:
		Three_state = Three_1;
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Three_state>
		break;
 202:	14 c0       	rjmp	.+40     	; 0x22c <Tick_Three+0x44>
		
		case Three_1:
		Three_state = Three_2;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Three_state>
		three = 0x01;
		//PORTB = three;
		break;
		
		case Three_2:
		three = 0x02;
 20a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <three>
		//PORTB = three;
		break;
 20e:	08 95       	ret
		case Three_1:
		Three_state = Three_2;
		break;
		
		case Three_2:
		Three_state = Three_3;
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Three_state>
		three = 0x02;
		//PORTB = three;
		break;
		
		case Three_3:
		three = 0x04;
 216:	84 e0       	ldi	r24, 0x04	; 4
 218:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <three>
		//PORTB = three;
		break;
 21c:	08 95       	ret
		case Three_2:
		Three_state = Three_3;
		break;
		
		case Three_3:
		Three_state = Three_1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Three_state>
		break;
 224:	03 c0       	rjmp	.+6      	; 0x22c <Tick_Three+0x44>
		
		default:
		Three_state = Three_1;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Three_state>
		three = 0x00;
		//PORTB = three;
		break;
		
		case Three_1:
		three = 0x01;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <three>
 232:	08 95       	ret

00000234 <main>:

int main(void)
{
    /* Replace with your application code */
	//DDRA = 0x00; PORTA = 0xFF; //input 
	DDRB = 0xFF; PORTB = 0x00; //output
 234:	8f ef       	ldi	r24, 0xFF	; 255
 236:	84 b9       	out	0x04, r24	; 4
 238:	15 b8       	out	0x05, r1	; 5
	unsigned long timerBL = 1000;
	unsigned long timerThree = 300;
	const unsigned long timeSet = 100;
	TimerSet(timeSet);
 23a:	64 e6       	ldi	r22, 0x64	; 100
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	a2 df       	rcall	.-188    	; 0x188 <TimerSet>
	TimerOn();
 244:	41 df       	rcall	.-382    	; 0xc8 <TimerOn>
 246:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <BL_state>
	BL_state = BL_start;
 24a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <Three_state>
	Three_state = Three_start;
 24e:	0f 2e       	mov	r0, r31
{
    /* Replace with your application code */
	//DDRA = 0x00; PORTA = 0xFF; //input 
	DDRB = 0xFF; PORTB = 0x00; //output
	unsigned long timerBL = 1000;
	unsigned long timerThree = 300;
 250:	fc e2       	ldi	r31, 0x2C	; 44
 252:	8f 2e       	mov	r8, r31
 254:	99 24       	eor	r9, r9
 256:	93 94       	inc	r9
 258:	a1 2c       	mov	r10, r1
 25a:	b1 2c       	mov	r11, r1
 25c:	f0 2d       	mov	r31, r0
 25e:	0f 2e       	mov	r0, r31
int main(void)
{
    /* Replace with your application code */
	//DDRA = 0x00; PORTA = 0xFF; //input 
	DDRB = 0xFF; PORTB = 0x00; //output
	unsigned long timerBL = 1000;
 260:	f8 ee       	ldi	r31, 0xE8	; 232
 262:	cf 2e       	mov	r12, r31
 264:	f3 e0       	ldi	r31, 0x03	; 3
 266:	df 2e       	mov	r13, r31
 268:	e1 2c       	mov	r14, r1
 26a:	f1 2c       	mov	r15, r1
 26c:	f0 2d       	mov	r31, r0
 26e:	88 ee       	ldi	r24, 0xE8	; 232
	TimerOn();
	BL_state = BL_start;
	Three_state = Three_start;
    while (1) 
    {
		if (timerBL >= 1000 ) {
 270:	c8 16       	cp	r12, r24
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	d8 06       	cpc	r13, r24
 276:	e1 04       	cpc	r14, r1
 278:	f1 04       	cpc	r15, r1
 27a:	20 f0       	brcs	.+8      	; 0x284 <main+0x50>
			Tick_BL();
 27c:	96 df       	rcall	.-212    	; 0x1aa <Tick_BL>
 27e:	c1 2c       	mov	r12, r1
			timerBL = 0;
 280:	d1 2c       	mov	r13, r1
 282:	76 01       	movw	r14, r12
 284:	8c e2       	ldi	r24, 0x2C	; 44
		}
		if (timerThree >= 300) {
 286:	88 16       	cp	r8, r24
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	98 06       	cpc	r9, r24
 28c:	a1 04       	cpc	r10, r1
 28e:	b1 04       	cpc	r11, r1
 290:	20 f0       	brcs	.+8      	; 0x29a <main+0x66>
			Tick_Three();
 292:	aa df       	rcall	.-172    	; 0x1e8 <Tick_Three>
 294:	81 2c       	mov	r8, r1
			timerThree = 0;
 296:	91 2c       	mov	r9, r1
 298:	54 01       	movw	r10, r8
 29a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <blink>
		}
		combined = blink + three;
 29e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <three>
 2a2:	89 0f       	add	r24, r25
 2a4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <combined>
 2a8:	85 b9       	out	0x05, r24	; 5
		PORTB = combined;
 2aa:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <TimerFlag>
		while(!TimerFlag){}; 
 2ae:	88 23       	and	r24, r24
 2b0:	e1 f3       	breq	.-8      	; 0x2aa <main+0x76>
 2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <TimerFlag>
		TimerFlag = 0;
 2b6:	84 e6       	ldi	r24, 0x64	; 100
		timerBL += timeSet;
 2b8:	c8 0e       	add	r12, r24
 2ba:	d1 1c       	adc	r13, r1
 2bc:	e1 1c       	adc	r14, r1
 2be:	f1 1c       	adc	r15, r1
 2c0:	84 e6       	ldi	r24, 0x64	; 100
		timerThree += timeSet;
 2c2:	88 0e       	add	r8, r24
 2c4:	91 1c       	adc	r9, r1
 2c6:	a1 1c       	adc	r10, r1
 2c8:	b1 1c       	adc	r11, r1
 2ca:	d1 cf       	rjmp	.-94     	; 0x26e <main+0x3a>

000002cc <_exit>:
    }
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
