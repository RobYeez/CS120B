
ryee002_sqian003_lab11_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800114  00800114  0000042e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1a  00000000  00000000  00000540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093a  00000000  00000000  0000125a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000697  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d8  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002bc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	24 c1       	rjmp	.+584    	; 0x27e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e8       	ldi	r30, 0x86	; 134
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3d d1       	rcall	.+634    	; 0x33e <main>
  c4:	5e c1       	rjmp	.+700    	; 0x382 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <GetKeypadKey>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	8f ee       	ldi	r24, 0xEF	; 239
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	00 00       	nop
  ce:	18 9b       	sbis	0x03, 0	; 3
  d0:	29 c0       	rjmp	.+82     	; 0x124 <GetKeypadKey+0x5c>
  d2:	19 9b       	sbis	0x03, 1	; 3
  d4:	29 c0       	rjmp	.+82     	; 0x128 <GetKeypadKey+0x60>
  d6:	1a 9b       	sbis	0x03, 2	; 3
  d8:	29 c0       	rjmp	.+82     	; 0x12c <GetKeypadKey+0x64>
  da:	1b 9b       	sbis	0x03, 3	; 3
  dc:	29 c0       	rjmp	.+82     	; 0x130 <GetKeypadKey+0x68>
  de:	8f ed       	ldi	r24, 0xDF	; 223
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	00 00       	nop
  e4:	18 9b       	sbis	0x03, 0	; 3
  e6:	26 c0       	rjmp	.+76     	; 0x134 <GetKeypadKey+0x6c>
  e8:	19 9b       	sbis	0x03, 1	; 3
  ea:	26 c0       	rjmp	.+76     	; 0x138 <GetKeypadKey+0x70>
  ec:	1a 9b       	sbis	0x03, 2	; 3
  ee:	26 c0       	rjmp	.+76     	; 0x13c <GetKeypadKey+0x74>
  f0:	1b 9b       	sbis	0x03, 3	; 3
  f2:	26 c0       	rjmp	.+76     	; 0x140 <GetKeypadKey+0x78>
  f4:	8f eb       	ldi	r24, 0xBF	; 191
  f6:	85 b9       	out	0x05, r24	; 5
  f8:	00 00       	nop
  fa:	18 9b       	sbis	0x03, 0	; 3
  fc:	23 c0       	rjmp	.+70     	; 0x144 <GetKeypadKey+0x7c>
  fe:	19 9b       	sbis	0x03, 1	; 3
 100:	23 c0       	rjmp	.+70     	; 0x148 <GetKeypadKey+0x80>
 102:	1a 9b       	sbis	0x03, 2	; 3
 104:	23 c0       	rjmp	.+70     	; 0x14c <GetKeypadKey+0x84>
 106:	1b 9b       	sbis	0x03, 3	; 3
 108:	23 c0       	rjmp	.+70     	; 0x150 <GetKeypadKey+0x88>
 10a:	8f e7       	ldi	r24, 0x7F	; 127
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	00 00       	nop
 110:	18 9b       	sbis	0x03, 0	; 3
 112:	20 c0       	rjmp	.+64     	; 0x154 <GetKeypadKey+0x8c>
 114:	19 9b       	sbis	0x03, 1	; 3
 116:	20 c0       	rjmp	.+64     	; 0x158 <GetKeypadKey+0x90>
 118:	1a 9b       	sbis	0x03, 2	; 3
 11a:	20 c0       	rjmp	.+64     	; 0x15c <GetKeypadKey+0x94>
 11c:	1b 9b       	sbis	0x03, 3	; 3
 11e:	20 c0       	rjmp	.+64     	; 0x160 <GetKeypadKey+0x98>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	08 95       	ret
 124:	81 e3       	ldi	r24, 0x31	; 49
 126:	08 95       	ret
 128:	84 e3       	ldi	r24, 0x34	; 52
 12a:	08 95       	ret
 12c:	87 e3       	ldi	r24, 0x37	; 55
 12e:	08 95       	ret
 130:	8a e2       	ldi	r24, 0x2A	; 42
 132:	08 95       	ret
 134:	82 e3       	ldi	r24, 0x32	; 50
 136:	08 95       	ret
 138:	85 e3       	ldi	r24, 0x35	; 53
 13a:	08 95       	ret
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	08 95       	ret
 140:	80 e3       	ldi	r24, 0x30	; 48
 142:	08 95       	ret
 144:	83 e3       	ldi	r24, 0x33	; 51
 146:	08 95       	ret
 148:	86 e3       	ldi	r24, 0x36	; 54
 14a:	08 95       	ret
 14c:	89 e3       	ldi	r24, 0x39	; 57
 14e:	08 95       	ret
 150:	83 e2       	ldi	r24, 0x23	; 35
 152:	08 95       	ret
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	08 95       	ret
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	08 95       	ret
 15c:	83 e4       	ldi	r24, 0x43	; 67
 15e:	08 95       	ret
 160:	84 e4       	ldi	r24, 0x44	; 68
 162:	08 95       	ret

00000164 <delay_ms>:
 164:	18 16       	cp	r1, r24
 166:	19 06       	cpc	r1, r25
 168:	5c f0       	brlt	.+22     	; 0x180 <delay_ms+0x1c>
 16a:	08 95       	ret
 16c:	00 00       	nop
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	e1 f7       	brne	.-8      	; 0x16c <delay_ms+0x8>
 174:	4f 5f       	subi	r20, 0xFF	; 255
 176:	5f 4f       	sbci	r21, 0xFF	; 255
 178:	84 17       	cp	r24, r20
 17a:	95 07       	cpc	r25, r21
 17c:	19 f4       	brne	.+6      	; 0x184 <delay_ms+0x20>
 17e:	08 95       	ret
 180:	40 e0       	ldi	r20, 0x00	; 0
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	27 e0       	ldi	r18, 0x07	; 7
 186:	33 e0       	ldi	r19, 0x03	; 3
 188:	f1 cf       	rjmp	.-30     	; 0x16c <delay_ms+0x8>

0000018a <LCD_WriteCommand>:
 18a:	5e 98       	cbi	0x0b, 6	; 11
 18c:	88 b9       	out	0x08, r24	; 8
 18e:	5f 9a       	sbi	0x0b, 7	; 11
 190:	00 00       	nop
 192:	5f 98       	cbi	0x0b, 7	; 11
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	e5 cf       	rjmp	.-54     	; 0x164 <delay_ms>
 19a:	08 95       	ret

0000019c <LCD_ClearScreen>:
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	f5 cf       	rjmp	.-22     	; 0x18a <LCD_WriteCommand>
 1a0:	08 95       	ret

000001a2 <LCD_Cursor>:
 1a2:	81 31       	cpi	r24, 0x11	; 17
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <LCD_Cursor+0xa>
 1a6:	81 58       	subi	r24, 0x81	; 129
 1a8:	f0 cf       	rjmp	.-32     	; 0x18a <LCD_WriteCommand>
 1aa:	08 95       	ret
 1ac:	81 55       	subi	r24, 0x51	; 81
 1ae:	ed cf       	rjmp	.-38     	; 0x18a <LCD_WriteCommand>
 1b0:	08 95       	ret

000001b2 <LCD_init>:
 1b2:	84 e6       	ldi	r24, 0x64	; 100
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	d6 df       	rcall	.-84     	; 0x164 <delay_ms>
 1b8:	88 e3       	ldi	r24, 0x38	; 56
 1ba:	e7 df       	rcall	.-50     	; 0x18a <LCD_WriteCommand>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	e5 df       	rcall	.-54     	; 0x18a <LCD_WriteCommand>
 1c0:	8f e0       	ldi	r24, 0x0F	; 15
 1c2:	e3 df       	rcall	.-58     	; 0x18a <LCD_WriteCommand>
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	e1 df       	rcall	.-62     	; 0x18a <LCD_WriteCommand>
 1c8:	8a e0       	ldi	r24, 0x0A	; 10
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	cb cf       	rjmp	.-106    	; 0x164 <delay_ms>
 1ce:	08 95       	ret

000001d0 <LCD_WriteData>:
 1d0:	5e 9a       	sbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	c2 cf       	rjmp	.-124    	; 0x164 <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_DisplayString>:
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	18 2f       	mov	r17, r24
 1ec:	eb 01       	movw	r28, r22
 1ee:	d6 df       	rcall	.-84     	; 0x19c <LCD_ClearScreen>
 1f0:	88 81       	ld	r24, Y
 1f2:	88 23       	and	r24, r24
 1f4:	51 f0       	breq	.+20     	; 0x20a <LCD_DisplayString+0x28>
 1f6:	01 e0       	ldi	r16, 0x01	; 1
 1f8:	01 0f       	add	r16, r17
 1fa:	81 2f       	mov	r24, r17
 1fc:	d2 df       	rcall	.-92     	; 0x1a2 <LCD_Cursor>
 1fe:	89 91       	ld	r24, Y+
 200:	e7 df       	rcall	.-50     	; 0x1d0 <LCD_WriteData>
 202:	10 2f       	mov	r17, r16
 204:	88 81       	ld	r24, Y
 206:	81 11       	cpse	r24, r1
 208:	f6 cf       	rjmp	.-20     	; 0x1f6 <LCD_DisplayString+0x14>
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <TimerSet>:
 214:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 218:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 21c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 220:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 224:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <__data_end>
 228:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <__data_end+0x1>
 22c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x2>
 230:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x3>
 234:	08 95       	ret

00000236 <TimerOn>:
 236:	8b e0       	ldi	r24, 0x0B	; 11
 238:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 23c:	8d e7       	ldi	r24, 0x7D	; 125
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 244:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 24e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 252:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 25a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 25e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 262:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 266:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 26a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 26e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 272:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
 276:	8f b7       	in	r24, 0x3f	; 63
 278:	80 68       	ori	r24, 0x80	; 128
 27a:	8f bf       	out	0x3f, r24	; 63
 27c:	08 95       	ret

0000027e <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
 28a:	9f 93       	push	r25
 28c:	af 93       	push	r26
 28e:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 290:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 294:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 298:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__data_end+0x2>
 29c:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__data_end+0x3>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	a1 09       	sbc	r26, r1
 2a4:	b1 09       	sbc	r27, r1
 2a6:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 2aa:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 2ae:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 2b2:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 2b6:	89 2b       	or	r24, r25
 2b8:	8a 2b       	or	r24, r26
 2ba:	8b 2b       	or	r24, r27
 2bc:	99 f4       	brne	.+38     	; 0x2e4 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 2d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 2d4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 2d8:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 2dc:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__data_end+0x2>
 2e0:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__data_end+0x3>
	}
}
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <input>:
				input();
    }
}

void input() {
	switch(state) {
 2f6:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <state>
 2fa:	88 23       	and	r24, r24
 2fc:	19 f0       	breq	.+6      	; 0x304 <input+0xe>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	29 f0       	breq	.+10     	; 0x30c <input+0x16>
 302:	08 95       	ret
		case start:
		state = output;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
		break;
 30a:	08 95       	ret
		
		case output:
		x = GetKeypadKey();
 30c:	dd de       	rcall	.-582    	; 0xc8 <GetKeypadKey>
 30e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <x>
		if (x != '\0') {
 312:	88 23       	and	r24, r24
			LCD_WriteData(x);
 314:	81 f0       	breq	.+32     	; 0x336 <input+0x40>
 316:	5c df       	rcall	.-328    	; 0x1d0 <LCD_WriteData>
			if(cursor == 17) {
 318:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cursor>
 31c:	81 31       	cpi	r24, 0x11	; 17
 31e:	19 f4       	brne	.+6      	; 0x326 <input+0x30>
				cursor = 1;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cursor>
			}
			LCD_Cursor(cursor);
 326:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cursor>
 32a:	3b df       	rcall	.-394    	; 0x1a2 <LCD_Cursor>
			++cursor;
 32c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <cursor>
 330:	8f 5f       	subi	r24, 0xFF	; 255
 332:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cursor>
		}
		state = output;
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <state>
 33c:	08 95       	ret

0000033e <main>:
unsigned char x;

int main(void)
{
    /* Replace with your application code */
	DDRB = 0xF0; PORTB = 0x0F;
 33e:	80 ef       	ldi	r24, 0xF0	; 240
 340:	84 b9       	out	0x04, r24	; 4
 342:	8f e0       	ldi	r24, 0x0F	; 15
 344:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00; //LCD
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	87 b9       	out	0x07, r24	; 7
 34a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //LCD
 34c:	8a b9       	out	0x0a, r24	; 10
 34e:	1b b8       	out	0x0b, r1	; 11
	
	TimerOn();
 350:	72 df       	rcall	.-284    	; 0x236 <TimerOn>
	TimerSet(500);
 352:	64 ef       	ldi	r22, 0xF4	; 244
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e0       	ldi	r25, 0x00	; 0
	
	LCD_init();
 35a:	5c df       	rcall	.-328    	; 0x214 <TimerSet>
 35c:	2a df       	rcall	.-428    	; 0x1b2 <LCD_init>
	LCD_DisplayString(1, "Kill Me Please");
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	71 e0       	ldi	r23, 0x01	; 1
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	3e df       	rcall	.-388    	; 0x1e2 <LCD_DisplayString>
	
	state = start;
 366:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <state>
	cursor = 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <cursor>
	LCD_Cursor(cursor);
 370:	18 df       	rcall	.-464    	; 0x1a2 <LCD_Cursor>
    while (1) 
    {
				while(!TimerFlag) {};
 372:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <TimerFlag>
 376:	88 23       	and	r24, r24
				TimerFlag = 0;
 378:	e1 f3       	breq	.-8      	; 0x372 <main+0x34>
 37a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <TimerFlag>
				input();
 37e:	bb df       	rcall	.-138    	; 0x2f6 <input>
    }
 380:	f8 cf       	rjmp	.-16     	; 0x372 <main+0x34>

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
