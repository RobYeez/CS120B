
ryee002_sqian003_lab11_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00000642  000006d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000642  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  008001a4  008001a4  0000077a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100f  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a11  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  000022b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000646  00000000  00000000  00002bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007a4  00000000  00000000  000031f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e4       	ldi	r30, 0x42	; 66
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 3a       	cpi	r26, 0xA4	; 164
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 ea       	ldi	r26, 0xA4	; 164
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 3c       	cpi	r26, 0xCA	; 202
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d8 d1       	rcall	.+944    	; 0x474 <main>
  c4:	bc c2       	rjmp	.+1400   	; 0x63e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <_avr_timer_M>
  cc:	70 93 0a 01 	sts	0x010A, r23	; 0x80010a <_avr_timer_M+0x1>
  d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <_avr_timer_M+0x2>
  d4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <_avr_timer_M+0x3>
  d8:	60 93 be 01 	sts	0x01BE, r22	; 0x8001be <_avr_timer_cntcurr>
  dc:	70 93 bf 01 	sts	0x01BF, r23	; 0x8001bf <_avr_timer_cntcurr+0x1>
  e0:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <_avr_timer_cntcurr+0x2>
  e4:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_M>
 10e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_M+0x1>
 112:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_M+0x2>
 116:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_M+0x3>
 11a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <_avr_timer_cntcurr>
 11e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <_avr_timer_cntcurr+0x1>
 122:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <_avr_timer_cntcurr+0x2>
 126:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <_avr_timer_cntcurr>
 148:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <_avr_timer_cntcurr+0x1>
 14c:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <_avr_timer_cntcurr+0x2>
 150:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <_avr_timer_cntcurr>
 15e:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <_avr_timer_cntcurr+0x1>
 162:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <_avr_timer_cntcurr+0x2>
 166:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <TimerFlag>
 178:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_avr_timer_M>
 17c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <_avr_timer_M+0x1>
 180:	a0 91 0b 01 	lds	r26, 0x010B	; 0x80010b <_avr_timer_M+0x2>
 184:	b0 91 0c 01 	lds	r27, 0x010C	; 0x80010c <_avr_timer_M+0x3>
 188:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <_avr_timer_cntcurr>
 18c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <_avr_timer_cntcurr+0x1>
 190:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <_avr_timer_cntcurr+0x2>
 194:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <delay_ms>:
 1aa:	18 16       	cp	r1, r24
 1ac:	19 06       	cpc	r1, r25
 1ae:	5c f0       	brlt	.+22     	; 0x1c6 <delay_ms+0x1c>
 1b0:	08 95       	ret
 1b2:	00 00       	nop
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	31 09       	sbc	r19, r1
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <delay_ms+0x8>
 1ba:	4f 5f       	subi	r20, 0xFF	; 255
 1bc:	5f 4f       	sbci	r21, 0xFF	; 255
 1be:	84 17       	cp	r24, r20
 1c0:	95 07       	cpc	r25, r21
 1c2:	19 f4       	brne	.+6      	; 0x1ca <delay_ms+0x20>
 1c4:	08 95       	ret
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	33 e0       	ldi	r19, 0x03	; 3
 1ce:	f1 cf       	rjmp	.-30     	; 0x1b2 <delay_ms+0x8>

000001d0 <LCD_WriteCommand>:
 1d0:	5e 98       	cbi	0x0b, 6	; 11
 1d2:	88 b9       	out	0x08, r24	; 8
 1d4:	5f 9a       	sbi	0x0b, 7	; 11
 1d6:	00 00       	nop
 1d8:	5f 98       	cbi	0x0b, 7	; 11
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	e5 cf       	rjmp	.-54     	; 0x1aa <delay_ms>
 1e0:	08 95       	ret

000001e2 <LCD_ClearScreen>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	f5 cf       	rjmp	.-22     	; 0x1d0 <LCD_WriteCommand>
 1e6:	08 95       	ret

000001e8 <LCD_Cursor>:
 1e8:	81 31       	cpi	r24, 0x11	; 17
 1ea:	18 f4       	brcc	.+6      	; 0x1f2 <LCD_Cursor+0xa>
 1ec:	81 58       	subi	r24, 0x81	; 129
 1ee:	f0 cf       	rjmp	.-32     	; 0x1d0 <LCD_WriteCommand>
 1f0:	08 95       	ret
 1f2:	81 55       	subi	r24, 0x51	; 81
 1f4:	ed cf       	rjmp	.-38     	; 0x1d0 <LCD_WriteCommand>
 1f6:	08 95       	ret

000001f8 <SM_Player>:
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	79 f1       	breq	.+94     	; 0x260 <SM_Player+0x68>
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	19 f0       	breq	.+6      	; 0x20c <SM_Player+0x14>
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
 20a:	2c c0       	rjmp	.+88     	; 0x264 <SM_Player+0x6c>
 20c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <tmpA>
 210:	82 ff       	sbrs	r24, 2
 212:	07 c0       	rjmp	.+14     	; 0x222 <SM_Player+0x2a>
 214:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <player_position>
 218:	92 31       	cpi	r25, 0x12	; 18
 21a:	18 f0       	brcs	.+6      	; 0x222 <SM_Player+0x2a>
 21c:	90 51       	subi	r25, 0x10	; 16
 21e:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <player_position>
 222:	83 ff       	sbrs	r24, 3
 224:	07 c0       	rjmp	.+14     	; 0x234 <SM_Player+0x3c>
 226:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <player_position>
 22a:	91 31       	cpi	r25, 0x11	; 17
 22c:	18 f4       	brcc	.+6      	; 0x234 <SM_Player+0x3c>
 22e:	90 5f       	subi	r25, 0xF0	; 240
 230:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <player_position>
 234:	84 ff       	sbrs	r24, 4
 236:	16 c0       	rjmp	.+44     	; 0x264 <SM_Player+0x6c>
 238:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <pauseHS>
 23c:	81 11       	cpse	r24, r1
 23e:	12 c0       	rjmp	.+36     	; 0x264 <SM_Player+0x6c>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <pauseHS>
 246:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <game_over>
 24a:	81 30       	cpi	r24, 0x01	; 1
 24c:	19 f4       	brne	.+6      	; 0x254 <SM_Player+0x5c>
 24e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <game_over>
 252:	08 c0       	rjmp	.+16     	; 0x264 <SM_Player+0x6c>
 254:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <game_pause>
 258:	80 95       	com	r24
 25a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <game_pause>
 25e:	02 c0       	rjmp	.+4      	; 0x264 <SM_Player+0x6c>
 260:	c1 e0       	ldi	r28, 0x01	; 1
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <player_position>
 268:	bf df       	rcall	.-130    	; 0x1e8 <LCD_Cursor>
 26a:	ce 01       	movw	r24, r28
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <LCD_init>:
 272:	84 e6       	ldi	r24, 0x64	; 100
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	99 df       	rcall	.-206    	; 0x1aa <delay_ms>
 278:	88 e3       	ldi	r24, 0x38	; 56
 27a:	aa df       	rcall	.-172    	; 0x1d0 <LCD_WriteCommand>
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	a8 df       	rcall	.-176    	; 0x1d0 <LCD_WriteCommand>
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	a6 df       	rcall	.-180    	; 0x1d0 <LCD_WriteCommand>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	a4 df       	rcall	.-184    	; 0x1d0 <LCD_WriteCommand>
 288:	8a e0       	ldi	r24, 0x0A	; 10
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	8e cf       	rjmp	.-228    	; 0x1aa <delay_ms>
 28e:	08 95       	ret

00000290 <LCD_WriteData>:
 290:	5e 9a       	sbi	0x0b, 6	; 11
 292:	88 b9       	out	0x08, r24	; 8
 294:	5f 9a       	sbi	0x0b, 7	; 11
 296:	00 00       	nop
 298:	5f 98       	cbi	0x0b, 7	; 11
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	85 cf       	rjmp	.-246    	; 0x1aa <delay_ms>
 2a0:	08 95       	ret

000002a2 <LCD_DisplayString>:
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	18 2f       	mov	r17, r24
 2ac:	eb 01       	movw	r28, r22
 2ae:	99 df       	rcall	.-206    	; 0x1e2 <LCD_ClearScreen>
 2b0:	88 81       	ld	r24, Y
 2b2:	88 23       	and	r24, r24
 2b4:	51 f0       	breq	.+20     	; 0x2ca <LCD_DisplayString+0x28>
 2b6:	01 e0       	ldi	r16, 0x01	; 1
 2b8:	01 0f       	add	r16, r17
 2ba:	81 2f       	mov	r24, r17
 2bc:	95 df       	rcall	.-214    	; 0x1e8 <LCD_Cursor>
 2be:	89 91       	ld	r24, Y+
 2c0:	e7 df       	rcall	.-50     	; 0x290 <LCD_WriteData>
 2c2:	10 2f       	mov	r17, r16
 2c4:	88 81       	ld	r24, Y
 2c6:	81 11       	cpse	r24, r1
 2c8:	f6 cf       	rjmp	.-20     	; 0x2b6 <LCD_DisplayString+0x14>
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	08 95       	ret

000002d4 <SM_LCD>:
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	ec 01       	movw	r28, r24
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <SM_LCD+0x10>
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	51 f0       	breq	.+20     	; 0x2f6 <SM_LCD+0x22>
 2e2:	c2 c0       	rjmp	.+388    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <game_over>
 2ec:	21 30       	cpi	r18, 0x01	; 1
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <SM_LCD+0x1e>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	c9 2f       	mov	r28, r25
 2f4:	d8 2f       	mov	r29, r24
 2f6:	c1 30       	cpi	r28, 0x01	; 1
 2f8:	d1 05       	cpc	r29, r1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <SM_LCD+0x2a>
 2fc:	b7 c0       	rjmp	.+366    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 2fe:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <pauseHS>
 302:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <game_pause>
 306:	81 11       	cpse	r24, r1
 308:	b1 c0       	rjmp	.+354    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <j+0x1>
 312:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
 316:	68 df       	rcall	.-304    	; 0x1e8 <LCD_Cursor>
 318:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <j>
 31c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <j+0x1>
 320:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <top>
 324:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <top+0x1>
 328:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <k>
 32c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <k+0x1>
 330:	e8 0f       	add	r30, r24
 332:	f9 1f       	adc	r31, r25
 334:	e2 0f       	add	r30, r18
 336:	f3 1f       	adc	r31, r19
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	80 81       	ld	r24, Z
 33c:	83 32       	cpi	r24, 0x23	; 35
 33e:	c9 f4       	brne	.+50     	; 0x372 <SM_LCD+0x9e>
 340:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <player_position>
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	24 17       	cp	r18, r20
 348:	35 07       	cpc	r19, r21
 34a:	99 f4       	brne	.+38     	; 0x372 <SM_LCD+0x9e>
 34c:	4a df       	rcall	.-364    	; 0x1e2 <LCD_ClearScreen>
 34e:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <l+0x1>
 352:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <l>
 356:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <k+0x1>
 35a:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <k>
 35e:	6d e0       	ldi	r22, 0x0D	; 13
 360:	71 e0       	ldi	r23, 0x01	; 1
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	9e df       	rcall	.-196    	; 0x2a2 <LCD_DisplayString>
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <game_over>
 36c:	c0 e0       	ldi	r28, 0x00	; 0
 36e:	d0 e0       	ldi	r29, 0x00	; 0
 370:	0d c0       	rjmp	.+26     	; 0x38c <SM_LCD+0xb8>
 372:	8e df       	rcall	.-228    	; 0x290 <LCD_WriteData>
 374:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <j>
 378:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <j+0x1>
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <j+0x1>
 382:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <j>
 386:	81 31       	cpi	r24, 0x11	; 17
 388:	91 05       	cpc	r25, r1
 38a:	2c f2       	brlt	.-118    	; 0x316 <SM_LCD+0x42>
 38c:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <k>
 390:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <k+0x1>
 394:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <textSize>
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	40 97       	sbiw	r24, 0x10	; 16
 39c:	82 17       	cp	r24, r18
 39e:	93 07       	cpc	r25, r19
 3a0:	2c f4       	brge	.+10     	; 0x3ac <SM_LCD+0xd8>
 3a2:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <k+0x1>
 3a6:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <k>
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <SM_LCD+0xe4>
 3ac:	2f 5f       	subi	r18, 0xFF	; 255
 3ae:	3f 4f       	sbci	r19, 0xFF	; 255
 3b0:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <k+0x1>
 3b4:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <k>
 3b8:	81 e1       	ldi	r24, 0x11	; 17
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3c4:	11 df       	rcall	.-478    	; 0x1e8 <LCD_Cursor>
 3c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 3ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 3ce:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <bot>
 3d2:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <bot+0x1>
 3d6:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <l>
 3da:	90 91 bb 01 	lds	r25, 0x01BB	; 0x8001bb <l+0x1>
 3de:	e8 0f       	add	r30, r24
 3e0:	f9 1f       	adc	r31, r25
 3e2:	e2 0f       	add	r30, r18
 3e4:	f3 1f       	adc	r31, r19
 3e6:	71 97       	sbiw	r30, 0x11	; 17
 3e8:	80 81       	ld	r24, Z
 3ea:	83 32       	cpi	r24, 0x23	; 35
 3ec:	c9 f4       	brne	.+50     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3ee:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <player_position>
 3f2:	50 e0       	ldi	r21, 0x00	; 0
 3f4:	24 17       	cp	r18, r20
 3f6:	35 07       	cpc	r19, r21
 3f8:	99 f4       	brne	.+38     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3fa:	f3 de       	rcall	.-538    	; 0x1e2 <LCD_ClearScreen>
 3fc:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <l+0x1>
 400:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <l>
 404:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <k+0x1>
 408:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <k>
 40c:	6d e0       	ldi	r22, 0x0D	; 13
 40e:	71 e0       	ldi	r23, 0x01	; 1
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	47 df       	rcall	.-370    	; 0x2a2 <LCD_DisplayString>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <game_over>
 41a:	c0 e0       	ldi	r28, 0x00	; 0
 41c:	d0 e0       	ldi	r29, 0x00	; 0
 41e:	0d c0       	rjmp	.+26     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 420:	37 df       	rcall	.-402    	; 0x290 <LCD_WriteData>
 422:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 426:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 42a:	01 96       	adiw	r24, 0x01	; 1
 42c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 430:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 434:	81 32       	cpi	r24, 0x21	; 33
 436:	91 05       	cpc	r25, r1
 438:	2c f2       	brlt	.-118    	; 0x3c4 <SM_LCD+0xf0>
 43a:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <l>
 43e:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <l+0x1>
 442:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <textSize>
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	40 97       	sbiw	r24, 0x10	; 16
 44a:	82 17       	cp	r24, r18
 44c:	93 07       	cpc	r25, r19
 44e:	2c f4       	brge	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 450:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <l+0x1>
 454:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <l>
 458:	09 c0       	rjmp	.+18     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	3f 4f       	sbci	r19, 0xFF	; 255
 45e:	30 93 bb 01 	sts	0x01BB, r19	; 0x8001bb <l+0x1>
 462:	20 93 ba 01 	sts	0x01BA, r18	; 0x8001ba <l>
 466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 468:	c0 e0       	ldi	r28, 0x00	; 0
 46a:	d0 e0       	ldi	r29, 0x00	; 0
 46c:	ce 01       	movw	r24, r28
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <main>:
	}
	return state;
}

int main(void)
{
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	00 d0       	rcall	.+0      	; 0x47a <main+0x6>
 47a:	00 d0       	rcall	.+0      	; 0x47c <main+0x8>
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0x03; PORTB = 0xFC;
 480:	83 e0       	ldi	r24, 0x03	; 3
 482:	84 b9       	out	0x04, r24	; 4
 484:	8c ef       	ldi	r24, 0xFC	; 252
 486:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 488:	8f ef       	ldi	r24, 0xFF	; 255
 48a:	87 b9       	out	0x07, r24	; 7
 48c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 48e:	8a b9       	out	0x0a, r24	; 10
 490:	1b b8       	out	0x0b, r1	; 11
	//var initialization
	game_pause = game_over = 0;
 492:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <game_over>
 496:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <game_pause>
	player_position = 2;
 49a:	82 e0       	ldi	r24, 0x02	; 2
 49c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <player_position>
 4a0:	0f 2e       	mov	r0, r31
 4a2:	fc e2       	ldi	r31, 0x2C	; 44
 4a4:	ef 2e       	mov	r14, r31
 4a6:	f0 2d       	mov	r31, r0
 4a8:	ff 24       	eor	r15, r15
 4aa:	f3 94       	inc	r15
 4ac:	00 e0       	ldi	r16, 0x00	; 0
 4ae:	10 e0       	ldi	r17, 0x00	; 0
 4b0:	5a e0       	ldi	r21, 0x0A	; 10
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <main+0x4e>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 4ba:	e6 2e       	mov	r14, r22
 4bc:	f7 2e       	mov	r15, r23
 4be:	08 2f       	mov	r16, r24
 4c0:	19 2f       	mov	r17, r25

unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 4c2:	65 2f       	mov	r22, r21
 4c4:	74 2f       	mov	r23, r20
 4c6:	83 2f       	mov	r24, r19
 4c8:	92 2f       	mov	r25, r18
 4ca:	2e 2d       	mov	r18, r14
 4cc:	3f 2d       	mov	r19, r15
 4ce:	40 2f       	mov	r20, r16
 4d0:	51 2f       	mov	r21, r17
 4d2:	93 d0       	rcall	.+294    	; 0x5fa <__udivmodsi4>
 4d4:	5e 2d       	mov	r21, r14
 4d6:	4f 2d       	mov	r20, r15
 4d8:	30 2f       	mov	r19, r16
 4da:	21 2f       	mov	r18, r17
		if(c==0){return b;}
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	81 05       	cpc	r24, r1
 4e2:	91 05       	cpc	r25, r1
 4e4:	51 f7       	brne	.-44     	; 0x4ba <main+0x46>
	tempGCD = findGCD(player_calc, writeLCD_calc);
	
	unsigned long int GCD;
	GCD = tempGCD;
	
	unsigned long int player_period = player_calc / GCD;
 4e6:	6a e0       	ldi	r22, 0x0A	; 10
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	2e 2d       	mov	r18, r14
 4f0:	3f 2d       	mov	r19, r15
 4f2:	40 2f       	mov	r20, r16
 4f4:	51 2f       	mov	r21, r17
 4f6:	81 d0       	rcall	.+258    	; 0x5fa <__udivmodsi4>
 4f8:	49 01       	movw	r8, r18
 4fa:	5a 01       	movw	r10, r20
	unsigned long int writeLCD_period = writeLCD_calc / GCD;
 4fc:	6c e2       	ldi	r22, 0x2C	; 44
 4fe:	71 e0       	ldi	r23, 0x01	; 1
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	2e 2d       	mov	r18, r14
 506:	3f 2d       	mov	r19, r15
 508:	40 2f       	mov	r20, r16
 50a:	51 2f       	mov	r21, r17
 50c:	76 d0       	rcall	.+236    	; 0x5fa <__udivmodsi4>
	
	static task player, writeLCD;
	task *tasks[] = { &player, &writeLCD};
 50e:	af ea       	ldi	r26, 0xAF	; 175
 510:	b1 e0       	ldi	r27, 0x01	; 1
 512:	ba 83       	std	Y+2, r27	; 0x02
 514:	a9 83       	std	Y+1, r26	; 0x01
 516:	e4 ea       	ldi	r30, 0xA4	; 164
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	fc 83       	std	Y+4, r31	; 0x04
 51c:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	player.state = SM_start1;
 51e:	1c 92       	st	X, r1
	player.period = player_period;
 520:	11 96       	adiw	r26, 0x01	; 1
 522:	8d 92       	st	X+, r8
 524:	9d 92       	st	X+, r9
 526:	ad 92       	st	X+, r10
 528:	bc 92       	st	X, r11
 52a:	14 97       	sbiw	r26, 0x04	; 4
	player.elapsedTime = player_period;
 52c:	15 96       	adiw	r26, 0x05	; 5
 52e:	8d 92       	st	X+, r8
 530:	9d 92       	st	X+, r9
 532:	ad 92       	st	X+, r10
 534:	bc 92       	st	X, r11
 536:	18 97       	sbiw	r26, 0x08	; 8
	player.TaskFct = &SM_Player;
 538:	8c ef       	ldi	r24, 0xFC	; 252
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	1a 96       	adiw	r26, 0x0a	; 10
 53e:	9c 93       	st	X, r25
 540:	8e 93       	st	-X, r24
 542:	19 97       	sbiw	r26, 0x09	; 9
	
	writeLCD.state = SM_start2;
 544:	10 82       	st	Z, r1
	writeLCD.period = writeLCD_period;
 546:	21 83       	std	Z+1, r18	; 0x01
 548:	32 83       	std	Z+2, r19	; 0x02
 54a:	43 83       	std	Z+3, r20	; 0x03
 54c:	54 83       	std	Z+4, r21	; 0x04
	writeLCD.elapsedTime = writeLCD_period;
 54e:	25 83       	std	Z+5, r18	; 0x05
 550:	36 83       	std	Z+6, r19	; 0x06
 552:	47 83       	std	Z+7, r20	; 0x07
 554:	50 87       	std	Z+8, r21	; 0x08
	writeLCD.TaskFct = &SM_LCD;
 556:	8a e6       	ldi	r24, 0x6A	; 106
 558:	91 e0       	ldi	r25, 0x01	; 1
 55a:	92 87       	std	Z+10, r25	; 0x0a
 55c:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(GCD);
 55e:	6e 2d       	mov	r22, r14
 560:	7f 2d       	mov	r23, r15
 562:	80 2f       	mov	r24, r16
	TimerOn();
 564:	91 2f       	mov	r25, r17
 566:	b0 dd       	rcall	.-1184   	; 0xc8 <TimerSet>
	LCD_init();
 568:	c0 dd       	rcall	.-1152   	; 0xea <TimerOn>
 56a:	83 de       	rcall	.-762    	; 0x272 <LCD_init>
 56c:	7e 01       	movw	r14, r28
 56e:	85 e0       	ldi	r24, 0x05	; 5
 570:	e8 0e       	add	r14, r24
 572:	f1 1c       	adc	r15, r1
	
	unsigned short i = 0;
	while(1)
	{
		tmpA = ~PINB;
 574:	83 b1       	in	r24, 0x03	; 3
 576:	80 95       	com	r24
 578:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <tmpA>
 57c:	de 01       	movw	r26, r28
 57e:	11 96       	adiw	r26, 0x01	; 1
 580:	6d 01       	movw	r12, r26
		for (i = 0; i < numTasks; i++) {
			if (tasks[i]->elapsedTime == tasks[i]->period){
 582:	f6 01       	movw	r30, r12
 584:	01 91       	ld	r16, Z+
 586:	11 91       	ld	r17, Z+
 588:	6f 01       	movw	r12, r30
 58a:	d8 01       	movw	r26, r16
 58c:	15 96       	adiw	r26, 0x05	; 5
 58e:	4d 91       	ld	r20, X+
 590:	5d 91       	ld	r21, X+
 592:	6d 91       	ld	r22, X+
 594:	7c 91       	ld	r23, X
 596:	18 97       	sbiw	r26, 0x08	; 8
 598:	11 96       	adiw	r26, 0x01	; 1
 59a:	8d 91       	ld	r24, X+
 59c:	9d 91       	ld	r25, X+
 59e:	0d 90       	ld	r0, X+
 5a0:	bc 91       	ld	r27, X
 5a2:	a0 2d       	mov	r26, r0
 5a4:	48 17       	cp	r20, r24
 5a6:	59 07       	cpc	r21, r25
 5a8:	6a 07       	cpc	r22, r26
 5aa:	7b 07       	cpc	r23, r27
 5ac:	81 f4       	brne	.+32     	; 0x5ce <main+0x15a>
				tasks[i]->state = tasks[i]->TaskFct(tasks[i]->state);
 5ae:	f8 01       	movw	r30, r16
 5b0:	80 81       	ld	r24, Z
 5b2:	01 84       	ldd	r0, Z+9	; 0x09
 5b4:	f2 85       	ldd	r31, Z+10	; 0x0a
 5b6:	e0 2d       	mov	r30, r0
 5b8:	08 2e       	mov	r0, r24
 5ba:	00 0c       	add	r0, r0
 5bc:	99 0b       	sbc	r25, r25
 5be:	09 95       	icall
 5c0:	d8 01       	movw	r26, r16
 5c2:	8c 93       	st	X, r24
				tasks[i]->elapsedTime = 0;
 5c4:	f8 01       	movw	r30, r16
 5c6:	15 82       	std	Z+5, r1	; 0x05
 5c8:	16 82       	std	Z+6, r1	; 0x06
 5ca:	17 82       	std	Z+7, r1	; 0x07
 5cc:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 5ce:	f8 01       	movw	r30, r16
 5d0:	85 81       	ldd	r24, Z+5	; 0x05
 5d2:	96 81       	ldd	r25, Z+6	; 0x06
 5d4:	a7 81       	ldd	r26, Z+7	; 0x07
 5d6:	b0 85       	ldd	r27, Z+8	; 0x08
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	a1 1d       	adc	r26, r1
 5dc:	b1 1d       	adc	r27, r1
 5de:	85 83       	std	Z+5, r24	; 0x05
 5e0:	96 83       	std	Z+6, r25	; 0x06
 5e2:	a7 83       	std	Z+7, r26	; 0x07
 5e4:	b0 87       	std	Z+8, r27	; 0x08
	
	unsigned short i = 0;
	while(1)
	{
		tmpA = ~PINB;
		for (i = 0; i < numTasks; i++) {
 5e6:	ce 14       	cp	r12, r14
 5e8:	df 04       	cpc	r13, r15
 5ea:	59 f6       	brne	.-106    	; 0x582 <main+0x10e>
				tasks[i]->state = tasks[i]->TaskFct(tasks[i]->state);
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 5ec:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <TimerFlag>
 5f0:	88 23       	and	r24, r24
 5f2:	e1 f3       	breq	.-8      	; 0x5ec <main+0x178>
		TimerFlag = 0;
 5f4:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <TimerFlag>
	}
 5f8:	bd cf       	rjmp	.-134    	; 0x574 <main+0x100>

000005fa <__udivmodsi4>:
 5fa:	a1 e2       	ldi	r26, 0x21	; 33
 5fc:	1a 2e       	mov	r1, r26
 5fe:	aa 1b       	sub	r26, r26
 600:	bb 1b       	sub	r27, r27
 602:	fd 01       	movw	r30, r26
 604:	0d c0       	rjmp	.+26     	; 0x620 <__udivmodsi4_ep>

00000606 <__udivmodsi4_loop>:
 606:	aa 1f       	adc	r26, r26
 608:	bb 1f       	adc	r27, r27
 60a:	ee 1f       	adc	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	a2 17       	cp	r26, r18
 610:	b3 07       	cpc	r27, r19
 612:	e4 07       	cpc	r30, r20
 614:	f5 07       	cpc	r31, r21
 616:	20 f0       	brcs	.+8      	; 0x620 <__udivmodsi4_ep>
 618:	a2 1b       	sub	r26, r18
 61a:	b3 0b       	sbc	r27, r19
 61c:	e4 0b       	sbc	r30, r20
 61e:	f5 0b       	sbc	r31, r21

00000620 <__udivmodsi4_ep>:
 620:	66 1f       	adc	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	88 1f       	adc	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	1a 94       	dec	r1
 62a:	69 f7       	brne	.-38     	; 0x606 <__udivmodsi4_loop>
 62c:	60 95       	com	r22
 62e:	70 95       	com	r23
 630:	80 95       	com	r24
 632:	90 95       	com	r25
 634:	9b 01       	movw	r18, r22
 636:	ac 01       	movw	r20, r24
 638:	bd 01       	movw	r22, r26
 63a:	cf 01       	movw	r24, r30
 63c:	08 95       	ret

0000063e <_exit>:
 63e:	f8 94       	cli

00000640 <__stop_program>:
 640:	ff cf       	rjmp	.-2      	; 0x640 <__stop_program>
