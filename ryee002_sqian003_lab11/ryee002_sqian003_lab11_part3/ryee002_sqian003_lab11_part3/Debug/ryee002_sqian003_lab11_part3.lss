
ryee002_sqian003_lab11_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  0000032e  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d87  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000088a  00000000  00000000  0000122f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b6  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004db  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000032d  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
   2:	00 00       	nop
   4:	7a c0       	rjmp	.+244    	; 0xfa <__bad_interrupt>
   6:	00 00       	nop
   8:	78 c0       	rjmp	.+240    	; 0xfa <__bad_interrupt>
   a:	00 00       	nop
   c:	76 c0       	rjmp	.+236    	; 0xfa <__bad_interrupt>
   e:	00 00       	nop
  10:	74 c0       	rjmp	.+232    	; 0xfa <__bad_interrupt>
  12:	00 00       	nop
  14:	72 c0       	rjmp	.+228    	; 0xfa <__bad_interrupt>
  16:	00 00       	nop
  18:	70 c0       	rjmp	.+224    	; 0xfa <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6e c0       	rjmp	.+220    	; 0xfa <__bad_interrupt>
  1e:	00 00       	nop
  20:	6c c0       	rjmp	.+216    	; 0xfa <__bad_interrupt>
  22:	00 00       	nop
  24:	6a c0       	rjmp	.+212    	; 0xfa <__bad_interrupt>
  26:	00 00       	nop
  28:	68 c0       	rjmp	.+208    	; 0xfa <__bad_interrupt>
  2a:	00 00       	nop
  2c:	66 c0       	rjmp	.+204    	; 0xfa <__bad_interrupt>
  2e:	00 00       	nop
  30:	64 c0       	rjmp	.+200    	; 0xfa <__bad_interrupt>
  32:	00 00       	nop
  34:	62 c0       	rjmp	.+196    	; 0xfa <__bad_interrupt>
  36:	00 00       	nop
  38:	60 c0       	rjmp	.+192    	; 0xfa <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5e c0       	rjmp	.+188    	; 0xfa <__bad_interrupt>
  3e:	00 00       	nop
  40:	5c c0       	rjmp	.+184    	; 0xfa <__bad_interrupt>
  42:	00 00       	nop
  44:	5a c0       	rjmp	.+180    	; 0xfa <__bad_interrupt>
  46:	00 00       	nop
  48:	58 c0       	rjmp	.+176    	; 0xfa <__bad_interrupt>
  4a:	00 00       	nop
  4c:	56 c0       	rjmp	.+172    	; 0xfa <__bad_interrupt>
  4e:	00 00       	nop
  50:	54 c0       	rjmp	.+168    	; 0xfa <__bad_interrupt>
  52:	00 00       	nop
  54:	52 c0       	rjmp	.+164    	; 0xfa <__bad_interrupt>
  56:	00 00       	nop
  58:	50 c0       	rjmp	.+160    	; 0xfa <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4e c0       	rjmp	.+156    	; 0xfa <__bad_interrupt>
  5e:	00 00       	nop
  60:	4c c0       	rjmp	.+152    	; 0xfa <__bad_interrupt>
  62:	00 00       	nop
  64:	4a c0       	rjmp	.+148    	; 0xfa <__bad_interrupt>
  66:	00 00       	nop
  68:	48 c0       	rjmp	.+144    	; 0xfa <__bad_interrupt>
  6a:	00 00       	nop
  6c:	46 c0       	rjmp	.+140    	; 0xfa <__bad_interrupt>
  6e:	00 00       	nop
  70:	44 c0       	rjmp	.+136    	; 0xfa <__bad_interrupt>
  72:	00 00       	nop
  74:	42 c0       	rjmp	.+132    	; 0xfa <__bad_interrupt>
  76:	00 00       	nop
  78:	40 c0       	rjmp	.+128    	; 0xfa <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3e c0       	rjmp	.+124    	; 0xfa <__bad_interrupt>
  7e:	00 00       	nop
  80:	3c c0       	rjmp	.+120    	; 0xfa <__bad_interrupt>
  82:	00 00       	nop
  84:	3a c0       	rjmp	.+116    	; 0xfa <__bad_interrupt>
  86:	00 00       	nop
  88:	38 c0       	rjmp	.+112    	; 0xfa <__bad_interrupt>
  8a:	00 00       	nop
  8c:	87 01       	movw	r16, r14
  8e:	32 01       	movw	r6, r4
  90:	32 01       	movw	r6, r4
  92:	32 01       	movw	r6, r4
  94:	32 01       	movw	r6, r4
  96:	32 01       	movw	r6, r4
  98:	32 01       	movw	r6, r4
  9a:	7d 01       	movw	r14, r26
  9c:	32 01       	movw	r6, r4
  9e:	32 01       	movw	r6, r4
  a0:	32 01       	movw	r6, r4
  a2:	32 01       	movw	r6, r4
  a4:	32 01       	movw	r6, r4
  a6:	82 01       	movw	r16, r4
  a8:	3c 01       	movw	r6, r24
  aa:	41 01       	movw	r8, r2
  ac:	46 01       	movw	r8, r12
  ae:	4b 01       	movw	r8, r22
  b0:	50 01       	movw	r10, r0
  b2:	55 01       	movw	r10, r10
  b4:	5a 01       	movw	r10, r20
  b6:	5f 01       	movw	r10, r30
  b8:	64 01       	movw	r12, r8
  ba:	32 01       	movw	r6, r4
  bc:	32 01       	movw	r6, r4
  be:	32 01       	movw	r6, r4
  c0:	32 01       	movw	r6, r4
  c2:	32 01       	movw	r6, r4
  c4:	32 01       	movw	r6, r4
  c6:	32 01       	movw	r6, r4
  c8:	69 01       	movw	r12, r18
  ca:	6e 01       	movw	r12, r28
  cc:	73 01       	movw	r14, r6
  ce:	78 01       	movw	r14, r16

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d0 e4       	ldi	r29, 0x40	; 64
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	ee e2       	ldi	r30, 0x2E	; 46
  e4:	f3 e0       	ldi	r31, 0x03	; 3
  e6:	00 e0       	ldi	r16, 0x00	; 0
  e8:	0b bf       	out	0x3b, r16	; 59
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x14>
  ec:	07 90       	elpm	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	a6 32       	cpi	r26, 0x26	; 38
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0x10>
  f6:	a8 d0       	rcall	.+336    	; 0x248 <main>
  f8:	18 c1       	rjmp	.+560    	; 0x32a <_exit>

000000fa <__bad_interrupt>:
  fa:	82 cf       	rjmp	.-252    	; 0x0 <__vectors>

000000fc <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
  fc:	8f ee       	ldi	r24, 0xEF	; 239
  fe:	85 b9       	out	0x05, r24	; 5
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 100:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 102:	18 9b       	sbis	0x03, 0	; 3
 104:	29 c0       	rjmp	.+82     	; 0x158 <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 106:	19 9b       	sbis	0x03, 1	; 3
 108:	29 c0       	rjmp	.+82     	; 0x15c <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 10a:	1a 9b       	sbis	0x03, 2	; 3
 10c:	29 c0       	rjmp	.+82     	; 0x160 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 10e:	1b 9b       	sbis	0x03, 3	; 3
 110:	29 c0       	rjmp	.+82     	; 0x164 <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 112:	8f ed       	ldi	r24, 0xDF	; 223
 114:	85 b9       	out	0x05, r24	; 5
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 116:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 118:	18 9b       	sbis	0x03, 0	; 3
 11a:	26 c0       	rjmp	.+76     	; 0x168 <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 11c:	19 9b       	sbis	0x03, 1	; 3
 11e:	26 c0       	rjmp	.+76     	; 0x16c <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 120:	1a 9b       	sbis	0x03, 2	; 3
 122:	26 c0       	rjmp	.+76     	; 0x170 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 124:	1b 9b       	sbis	0x03, 3	; 3
 126:	26 c0       	rjmp	.+76     	; 0x174 <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 128:	8f eb       	ldi	r24, 0xBF	; 191
 12a:	85 b9       	out	0x05, r24	; 5
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 12c:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 12e:	18 9b       	sbis	0x03, 0	; 3
 130:	23 c0       	rjmp	.+70     	; 0x178 <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 132:	19 9b       	sbis	0x03, 1	; 3
 134:	23 c0       	rjmp	.+70     	; 0x17c <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 136:	1a 9b       	sbis	0x03, 2	; 3
 138:	23 c0       	rjmp	.+70     	; 0x180 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 13a:	1b 9b       	sbis	0x03, 3	; 3
 13c:	23 c0       	rjmp	.+70     	; 0x184 <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 13e:	8f e7       	ldi	r24, 0x7F	; 127
 140:	85 b9       	out	0x05, r24	; 5
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 142:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 144:	18 9b       	sbis	0x03, 0	; 3
 146:	20 c0       	rjmp	.+64     	; 0x188 <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 148:	19 9b       	sbis	0x03, 1	; 3
 14a:	20 c0       	rjmp	.+64     	; 0x18c <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 14c:	1a 9b       	sbis	0x03, 2	; 3
 14e:	20 c0       	rjmp	.+64     	; 0x190 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 150:	1b 9b       	sbis	0x03, 3	; 3
 152:	20 c0       	rjmp	.+64     	; 0x194 <GetKeypadKey+0x98>
	
	return '\0';
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 158:	81 e3       	ldi	r24, 0x31	; 49
 15a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 15c:	84 e3       	ldi	r24, 0x34	; 52
 15e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 160:	87 e3       	ldi	r24, 0x37	; 55
 162:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 164:	8a e2       	ldi	r24, 0x2A	; 42
 166:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 16c:	85 e3       	ldi	r24, 0x35	; 53
 16e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 170:	88 e3       	ldi	r24, 0x38	; 56
 172:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 17c:	86 e3       	ldi	r24, 0x36	; 54
 17e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 180:	89 e3       	ldi	r24, 0x39	; 57
 182:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 184:	83 e2       	ldi	r24, 0x23	; 35
 186:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 188:	81 e4       	ldi	r24, 0x41	; 65
 18a:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 18c:	82 e4       	ldi	r24, 0x42	; 66
 18e:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 190:	83 e4       	ldi	r24, 0x43	; 67
 192:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 194:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 196:	08 95       	ret

00000198 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 198:	18 16       	cp	r1, r24
 19a:	19 06       	cpc	r1, r25
 19c:	5c f0       	brlt	.+22     	; 0x1b4 <delay_ms+0x1c>
 19e:	08 95       	ret
    for(j=0;j<775;j++)
  {
   asm("nop");
 1a0:	00 00       	nop
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	31 09       	sbc	r19, r1
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <delay_ms+0x8>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
 1a8:	4f 5f       	subi	r20, 0xFF	; 255
 1aa:	5f 4f       	sbci	r21, 0xFF	; 255
 1ac:	84 17       	cp	r24, r20
 1ae:	95 07       	cpc	r25, r21
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <delay_ms+0x20>
 1b2:	08 95       	ret
 1b4:	40 e0       	ldi	r20, 0x00	; 0
 1b6:	50 e0       	ldi	r21, 0x00	; 0
   }
}

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 1b8:	27 e0       	ldi	r18, 0x07	; 7
 1ba:	33 e0       	ldi	r19, 0x03	; 3
 1bc:	f1 cf       	rjmp	.-30     	; 0x1a0 <delay_ms+0x8>

000001be <LCD_WriteCommand>:
	LCD_WriteCommand(0x01);
	delay_ms(10);						 
}

void LCD_WriteCommand (unsigned char Command) {
   CLR_BIT(CONTROL_BUS,RS);
 1be:	5e 98       	cbi	0x0b, 6	; 11
   DATA_BUS = Command;
 1c0:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 1c2:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 1c4:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 1c6:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	e5 cf       	rjmp	.-54     	; 0x198 <delay_ms>
 1ce:	08 95       	ret

000001d0 <LCD_ClearScreen>:
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
   LCD_WriteCommand(0x01);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	f5 cf       	rjmp	.-22     	; 0x1be <LCD_WriteCommand>
 1d4:	08 95       	ret

000001d6 <LCD_Cursor>:
      LCD_WriteData(*string++);
   }
}

void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
 1d6:	81 31       	cpi	r24, 0x11	; 17
 1d8:	18 f4       	brcc	.+6      	; 0x1e0 <LCD_Cursor+0xa>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
 1da:	81 58       	subi	r24, 0x81	; 129
 1dc:	f0 cf       	rjmp	.-32     	; 0x1be <LCD_WriteCommand>
 1de:	08 95       	ret
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 1e0:	81 55       	subi	r24, 0x51	; 81
 1e2:	ed cf       	rjmp	.-38     	; 0x1be <LCD_WriteCommand>
 1e4:	08 95       	ret

000001e6 <LCD_init>:
}

void LCD_init(void) {

    //wait for 100 ms.
	delay_ms(100);
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	d6 df       	rcall	.-84     	; 0x198 <delay_ms>
	LCD_WriteCommand(0x38);
 1ec:	88 e3       	ldi	r24, 0x38	; 56
 1ee:	e7 df       	rcall	.-50     	; 0x1be <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	e5 df       	rcall	.-54     	; 0x1be <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	e3 df       	rcall	.-58     	; 0x1be <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	e1 df       	rcall	.-62     	; 0x1be <LCD_WriteCommand>
	delay_ms(10);						 
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	cb cf       	rjmp	.-106    	; 0x198 <delay_ms>
 202:	08 95       	ret

00000204 <LCD_WriteData>:
 204:	5e 9a       	sbi	0x0b, 6	; 11
   delay_ms(2); // ClearScreen requires 1.52ms to execute
}

void LCD_WriteData(unsigned char Data) {
   SET_BIT(CONTROL_BUS,RS);
   DATA_BUS = Data;
 206:	88 b9       	out	0x08, r24	; 8
   SET_BIT(CONTROL_BUS,E);
 208:	5f 9a       	sbi	0x0b, 7	; 11
   asm("nop");
 20a:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
 20c:	5f 98       	cbi	0x0b, 7	; 11
   delay_ms(1);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	c2 cf       	rjmp	.-124    	; 0x198 <delay_ms>
 214:	08 95       	ret

00000216 <LCD_DisplayString>:
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	18 2f       	mov	r17, r24
 220:	eb 01       	movw	r28, r22
   LCD_ClearScreen();
 222:	d6 df       	rcall	.-84     	; 0x1d0 <LCD_ClearScreen>
   unsigned char c = column;
   while(*string) {
 224:	88 81       	ld	r24, Y
 226:	88 23       	and	r24, r24
 228:	51 f0       	breq	.+20     	; 0x23e <LCD_DisplayString+0x28>
      LCD_Cursor(c++);
 22a:	01 e0       	ldi	r16, 0x01	; 1
 22c:	01 0f       	add	r16, r17
 22e:	81 2f       	mov	r24, r17
 230:	d2 df       	rcall	.-92     	; 0x1d6 <LCD_Cursor>
      LCD_WriteData(*string++);
 232:	89 91       	ld	r24, Y+
 234:	e7 df       	rcall	.-50     	; 0x204 <LCD_WriteData>
 236:	10 2f       	mov	r17, r16

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
      LCD_Cursor(c++);
 238:	88 81       	ld	r24, Y
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
 23a:	81 11       	cpse	r24, r1
 23c:	f6 cf       	rjmp	.-20     	; 0x22a <LCD_DisplayString+0x14>
 23e:	df 91       	pop	r29
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	0f 91       	pop	r16
 246:	08 95       	ret

00000248 <main>:
 248:	80 ef       	ldi	r24, 0xF0	; 240

int main(void)
{
    /* Replace with your application code */
	unsigned char x;
	DDRB = 0xF0; PORTB = 0x0F; 
 24a:	84 b9       	out	0x04, r24	; 4
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00; //LCD
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	87 b9       	out	0x07, r24	; 7
 254:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00; //LCD
 256:	8a b9       	out	0x0a, r24	; 10
 258:	1b b8       	out	0x0b, r1	; 11
	LCD_init();
 25a:	c5 df       	rcall	.-118    	; 0x1e6 <LCD_init>
	LCD_DisplayString(1, "Hello");
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	81 e0       	ldi	r24, 0x01	; 1
//	LCD_ClearScreen();
    while (1) 
    {
		x = GetKeypadKey(); 
 262:	d9 df       	rcall	.-78     	; 0x216 <LCD_DisplayString>
 264:	4b df       	rcall	.-362    	; 0xfc <GetKeypadKey>
		switch(x) {
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	fc 01       	movw	r30, r24
 26a:	b3 97       	sbiw	r30, 0x23	; 35
 26c:	e2 32       	cpi	r30, 0x22	; 34
 26e:	f1 05       	cpc	r31, r1
 270:	c8 f7       	brcc	.-14     	; 0x264 <main+0x1c>
 272:	ea 5b       	subi	r30, 0xBA	; 186
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	50 c0       	rjmp	.+160    	; 0x318 <__tablejump2__>
			case '\0': break;
			case '1': LCD_DisplayString(1, "1"); break;
 278:	66 e0       	ldi	r22, 0x06	; 6
 27a:	71 e0       	ldi	r23, 0x01	; 1
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	cb df       	rcall	.-106    	; 0x216 <LCD_DisplayString>
 280:	f1 cf       	rjmp	.-30     	; 0x264 <main+0x1c>
			case '2': LCD_DisplayString(1, "2"); break;
 282:	68 e0       	ldi	r22, 0x08	; 8
 284:	71 e0       	ldi	r23, 0x01	; 1
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	c6 df       	rcall	.-116    	; 0x216 <LCD_DisplayString>
 28a:	ec cf       	rjmp	.-40     	; 0x264 <main+0x1c>
			case '3': LCD_DisplayString(1, "3"); break;
 28c:	6a e0       	ldi	r22, 0x0A	; 10
 28e:	71 e0       	ldi	r23, 0x01	; 1
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	c1 df       	rcall	.-126    	; 0x216 <LCD_DisplayString>
 294:	e7 cf       	rjmp	.-50     	; 0x264 <main+0x1c>
			case '4': LCD_DisplayString(1, "4"); break;
 296:	6c e0       	ldi	r22, 0x0C	; 12
 298:	71 e0       	ldi	r23, 0x01	; 1
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	bc df       	rcall	.-136    	; 0x216 <LCD_DisplayString>
 29e:	e2 cf       	rjmp	.-60     	; 0x264 <main+0x1c>
			case '5': LCD_DisplayString(1, "5"); break;
 2a0:	6e e0       	ldi	r22, 0x0E	; 14
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	b7 df       	rcall	.-146    	; 0x216 <LCD_DisplayString>
 2a8:	dd cf       	rjmp	.-70     	; 0x264 <main+0x1c>
			case '6': LCD_DisplayString(1, "6"); break;
 2aa:	60 e1       	ldi	r22, 0x10	; 16
 2ac:	71 e0       	ldi	r23, 0x01	; 1
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	b2 df       	rcall	.-156    	; 0x216 <LCD_DisplayString>
 2b2:	d8 cf       	rjmp	.-80     	; 0x264 <main+0x1c>
			case '7': LCD_DisplayString(1, "7"); break;
 2b4:	62 e1       	ldi	r22, 0x12	; 18
 2b6:	71 e0       	ldi	r23, 0x01	; 1
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	ad df       	rcall	.-166    	; 0x216 <LCD_DisplayString>
 2bc:	d3 cf       	rjmp	.-90     	; 0x264 <main+0x1c>
			case '8': LCD_DisplayString(1, "8"); break;
 2be:	64 e1       	ldi	r22, 0x14	; 20
 2c0:	71 e0       	ldi	r23, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	a8 df       	rcall	.-176    	; 0x216 <LCD_DisplayString>
 2c6:	ce cf       	rjmp	.-100    	; 0x264 <main+0x1c>
			case '9': LCD_DisplayString(1, "9"); break;
 2c8:	66 e1       	ldi	r22, 0x16	; 22
 2ca:	71 e0       	ldi	r23, 0x01	; 1
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	a3 df       	rcall	.-186    	; 0x216 <LCD_DisplayString>
 2d0:	c9 cf       	rjmp	.-110    	; 0x264 <main+0x1c>
			case 'A': LCD_DisplayString(1, "A"); break;
 2d2:	68 e1       	ldi	r22, 0x18	; 24
 2d4:	71 e0       	ldi	r23, 0x01	; 1
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	9e df       	rcall	.-196    	; 0x216 <LCD_DisplayString>
 2da:	c4 cf       	rjmp	.-120    	; 0x264 <main+0x1c>
			case 'B': LCD_DisplayString(1, "B"); break;
 2dc:	6a e1       	ldi	r22, 0x1A	; 26
 2de:	71 e0       	ldi	r23, 0x01	; 1
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	99 df       	rcall	.-206    	; 0x216 <LCD_DisplayString>
 2e4:	bf cf       	rjmp	.-130    	; 0x264 <main+0x1c>
			case 'C': LCD_DisplayString(1, "C"); break;
 2e6:	6c e1       	ldi	r22, 0x1C	; 28
 2e8:	71 e0       	ldi	r23, 0x01	; 1
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	94 df       	rcall	.-216    	; 0x216 <LCD_DisplayString>
 2ee:	ba cf       	rjmp	.-140    	; 0x264 <main+0x1c>
			case 'D': LCD_DisplayString(1, "D"); break;
 2f0:	6e e1       	ldi	r22, 0x1E	; 30
 2f2:	71 e0       	ldi	r23, 0x01	; 1
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	8f df       	rcall	.-226    	; 0x216 <LCD_DisplayString>
 2f8:	b5 cf       	rjmp	.-150    	; 0x264 <main+0x1c>
			case '*': LCD_DisplayString(1, "*"); break;
 2fa:	60 e2       	ldi	r22, 0x20	; 32
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	8a df       	rcall	.-236    	; 0x216 <LCD_DisplayString>
 302:	b0 cf       	rjmp	.-160    	; 0x264 <main+0x1c>
 304:	62 e2       	ldi	r22, 0x22	; 34
			case '0': LCD_DisplayString(1, "0"); break;
 306:	71 e0       	ldi	r23, 0x01	; 1
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	85 df       	rcall	.-246    	; 0x216 <LCD_DisplayString>
 30c:	ab cf       	rjmp	.-170    	; 0x264 <main+0x1c>
 30e:	64 e2       	ldi	r22, 0x24	; 36
 310:	71 e0       	ldi	r23, 0x01	; 1
			case '#': LCD_DisplayString(1, "#"); break;
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	80 df       	rcall	.-256    	; 0x216 <LCD_DisplayString>
 316:	a6 cf       	rjmp	.-180    	; 0x264 <main+0x1c>

00000318 <__tablejump2__>:
 318:	ee 0f       	add	r30, r30
 31a:	ff 1f       	adc	r31, r31
 31c:	00 24       	eor	r0, r0
 31e:	00 1c       	adc	r0, r0
 320:	0b be       	out	0x3b, r0	; 59
 322:	07 90       	elpm	r0, Z+
 324:	f6 91       	elpm	r31, Z
 326:	e0 2d       	mov	r30, r0
 328:	09 94       	ijmp

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
