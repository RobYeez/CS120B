
LEDV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004d6  0000056a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800104  00800104  0000056e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000056e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f82  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d18  00000000  00000000  000026da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118b  00000000  00000000  000033f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00004580  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c29  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a0  00000000  00000000  0000555d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  000065fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c1       	rjmp	.+574    	; 0x274 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 ed       	ldi	r30, 0xD6	; 214
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 33       	cpi	r26, 0x35	; 53
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	76 d0       	rcall	.+236    	; 0x1b0 <main>
  c4:	06 c2       	rjmp	.+1036   	; 0x4d2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	fc 01       	movw	r30, r24
  ce:	db 01       	movw	r26, r22
  d0:	21 81       	ldd	r18, Z+1	; 0x01
  d2:	32 81       	ldd	r19, Z+2	; 0x02
  d4:	e9 01       	movw	r28, r18
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	9b 81       	ldd	r25, Y+3	; 0x03
  da:	13 96       	adiw	r26, 0x03	; 3
  dc:	9c 93       	st	X, r25
  de:	8e 93       	st	-X, r24
  e0:	12 97       	sbiw	r26, 0x02	; 2
  e2:	81 81       	ldd	r24, Z+1	; 0x01
  e4:	92 81       	ldd	r25, Z+2	; 0x02
  e6:	15 96       	adiw	r26, 0x05	; 5
  e8:	9c 93       	st	X, r25
  ea:	8e 93       	st	-X, r24
  ec:	14 97       	sbiw	r26, 0x04	; 4
  ee:	8a 81       	ldd	r24, Y+2	; 0x02
  f0:	9b 81       	ldd	r25, Y+3	; 0x03
  f2:	ec 01       	movw	r28, r24
  f4:	7d 83       	std	Y+5, r23	; 0x05
  f6:	6c 83       	std	Y+4, r22	; 0x04
  f8:	e9 01       	movw	r28, r18
  fa:	7b 83       	std	Y+3, r23	; 0x03
  fc:	6a 83       	std	Y+2, r22	; 0x02
  fe:	72 83       	std	Z+2, r23	; 0x02
 100:	61 83       	std	Z+1, r22	; 0x01
 102:	19 96       	adiw	r26, 0x09	; 9
 104:	fc 93       	st	X, r31
 106:	ee 93       	st	-X, r30
 108:	18 97       	sbiw	r26, 0x08	; 8
 10a:	80 81       	ld	r24, Z
 10c:	8f 5f       	subi	r24, 0xFF	; 255
 10e:	80 83       	st	Z, r24
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 116:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 118:	a2 81       	ldd	r26, Z+2	; 0x02
 11a:	b3 81       	ldd	r27, Z+3	; 0x03
 11c:	84 81       	ldd	r24, Z+4	; 0x04
 11e:	95 81       	ldd	r25, Z+5	; 0x05
 120:	15 96       	adiw	r26, 0x05	; 5
 122:	9c 93       	st	X, r25
 124:	8e 93       	st	-X, r24
 126:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 128:	a4 81       	ldd	r26, Z+4	; 0x04
 12a:	b5 81       	ldd	r27, Z+5	; 0x05
 12c:	82 81       	ldd	r24, Z+2	; 0x02
 12e:	93 81       	ldd	r25, Z+3	; 0x03
 130:	13 96       	adiw	r26, 0x03	; 3
 132:	9c 93       	st	X, r25
 134:	8e 93       	st	-X, r24
 136:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 138:	a0 85       	ldd	r26, Z+8	; 0x08
 13a:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 13c:	11 96       	adiw	r26, 0x01	; 1
 13e:	8d 91       	ld	r24, X+
 140:	9c 91       	ld	r25, X
 142:	12 97       	sbiw	r26, 0x02	; 2
 144:	e8 17       	cp	r30, r24
 146:	f9 07       	cpc	r31, r25
 148:	31 f4       	brne	.+12     	; 0x156 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 14a:	84 81       	ldd	r24, Z+4	; 0x04
 14c:	95 81       	ldd	r25, Z+5	; 0x05
 14e:	12 96       	adiw	r26, 0x02	; 2
 150:	9c 93       	st	X, r25
 152:	8e 93       	st	-X, r24
 154:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 156:	11 86       	std	Z+9, r1	; 0x09
 158:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 15a:	8c 91       	ld	r24, X
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	8c 93       	st	X, r24
 160:	08 95       	ret

00000162 <Demo_Tick>:
		break;
	}
	// Actions
	switch ( state ) {
		case shift :
		if ( row == 0xEF && pattern == 0x01 ) { // Reset demo
 162:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <row.1809>
 166:	9f 3e       	cpi	r25, 0xEF	; 239
 168:	59 f4       	brne	.+22     	; 0x180 <Demo_Tick+0x1e>
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	99 f4       	brne	.+38     	; 0x198 <Demo_Tick+0x36>
			pattern = 0x80 ;
 172:	80 e8       	ldi	r24, 0x80	; 128
 174:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			row = 0xFE;
 178:	8e ef       	ldi	r24, 0xFE	; 254
 17a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <row.1809>
 17e:	0f c0       	rjmp	.+30     	; 0x19e <Demo_Tick+0x3c>
			} else if ( pattern == 0x01 ) { // Move LED to start of next row
 180:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	41 f4       	brne	.+16     	; 0x198 <Demo_Tick+0x36>
			pattern = 0x80;
 188:	80 e8       	ldi	r24, 0x80	; 128
 18a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			row = ( row << 1 ) | 0x01;
 18e:	99 0f       	add	r25, r25
 190:	91 60       	ori	r25, 0x01	; 1
 192:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <row.1809>
 196:	03 c0       	rjmp	.+6      	; 0x19e <Demo_Tick+0x3c>
			} else { // Shift LED one spot to the right on current row
			pattern >>= 1;
 198:	86 95       	lsr	r24
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		break;
		default :
		break;
	}
	PORTC = pattern ; // Pattern to display
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1a2:	88 b9       	out	0x08, r24	; 8
	PORTD = row ; // Row(s) displaying pattern
 1a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <row.1809>
 1a8:	8b b9       	out	0x0b, r24	; 11
	return state;
}
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <main>:

int main() {
	DDRC = 0xFF; PORTC = 0x00;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	87 b9       	out	0x07, r24	; 7
 1b4:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 1b6:	8a b9       	out	0x0a, r24	; 10
 1b8:	1b b8       	out	0x0b, r1	; 11
	
	while(1) {
		Demo_Tick(shift);
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	d1 df       	rcall	.-94     	; 0x162 <Demo_Tick>
 1c0:	fc cf       	rjmp	.-8      	; 0x1ba <main+0xa>

000001c2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	0f 92       	push	r0
 1ca:	1f 92       	push	r1
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 92       	push	r2
 1d0:	3f 92       	push	r3
 1d2:	4f 92       	push	r4
 1d4:	5f 92       	push	r5
 1d6:	6f 92       	push	r6
 1d8:	7f 92       	push	r7
 1da:	8f 92       	push	r8
 1dc:	9f 92       	push	r9
 1de:	af 92       	push	r10
 1e0:	bf 92       	push	r11
 1e2:	cf 92       	push	r12
 1e4:	df 92       	push	r13
 1e6:	ef 92       	push	r14
 1e8:	ff 92       	push	r15
 1ea:	0f 93       	push	r16
 1ec:	1f 93       	push	r17
 1ee:	2f 93       	push	r18
 1f0:	3f 93       	push	r19
 1f2:	4f 93       	push	r20
 1f4:	5f 93       	push	r21
 1f6:	6f 93       	push	r22
 1f8:	7f 93       	push	r23
 1fa:	8f 93       	push	r24
 1fc:	9f 93       	push	r25
 1fe:	af 93       	push	r26
 200:	bf 93       	push	r27
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <pxCurrentTCB>
 20e:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <pxCurrentTCB+0x1>
 212:	0d b6       	in	r0, 0x3d	; 61
 214:	0d 92       	st	X+, r0
 216:	0e b6       	in	r0, 0x3e	; 62
 218:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 21a:	2e d0       	rcall	.+92     	; 0x278 <vTaskIncrementTick>
	vTaskSwitchContext();
 21c:	ee d0       	rcall	.+476    	; 0x3fa <vTaskSwitchContext>
 21e:	a0 91 33 01 	lds	r26, 0x0133	; 0x800133 <pxCurrentTCB>
	portRESTORE_CONTEXT();
 222:	b0 91 34 01 	lds	r27, 0x0134	; 0x800134 <pxCurrentTCB+0x1>
 226:	cd 91       	ld	r28, X+
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	dd 91       	ld	r29, X+
 22c:	de bf       	out	0x3e, r29	; 62
 22e:	ff 91       	pop	r31
 230:	ef 91       	pop	r30
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	1f 91       	pop	r17
 24c:	0f 91       	pop	r16
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	bf 90       	pop	r11
 258:	af 90       	pop	r10
 25a:	9f 90       	pop	r9
 25c:	8f 90       	pop	r8
 25e:	7f 90       	pop	r7
 260:	6f 90       	pop	r6
 262:	5f 90       	pop	r5
 264:	4f 90       	pop	r4
 266:	3f 90       	pop	r3
 268:	2f 90       	pop	r2
 26a:	1f 90       	pop	r1
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	08 95       	ret

00000274 <__vector_13>:

	asm volatile ( "ret" );
 274:	a6 df       	rcall	.-180    	; 0x1c2 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 276:	18 95       	reti

00000278 <vTaskIncrementTick>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
			{
				taskYIELD();
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uxSchedulerSuspended>
 284:	81 11       	cpse	r24, r1
 286:	af c0       	rjmp	.+350    	; 0x3e6 <vTaskIncrementTick+0x16e>
 288:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <xTickCount>
 28c:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <xTickCount+0x1>
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <xTickCount+0x1>
 296:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <xTickCount>
 29a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <xTickCount>
 29e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <xTickCount+0x1>
 2a2:	89 2b       	or	r24, r25
 2a4:	99 f5       	brne	.+102    	; 0x30c <vTaskIncrementTick+0x94>
 2a6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <pxDelayedTaskList>
 2aa:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <pxDelayedTaskList+0x1>
 2ae:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <pxOverflowDelayedTaskList>
 2b2:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <pxOverflowDelayedTaskList+0x1>
 2b6:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <pxDelayedTaskList+0x1>
 2ba:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <pxDelayedTaskList>
 2be:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <pxOverflowDelayedTaskList+0x1>
 2c2:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pxOverflowDelayedTaskList>
 2c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 2d0:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <pxDelayedTaskList>
 2d4:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <pxDelayedTaskList+0x1>
 2d8:	80 81       	ld	r24, Z
 2da:	81 11       	cpse	r24, r1
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <vTaskIncrementTick+0x74>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	9f ef       	ldi	r25, 0xFF	; 255
 2e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 2e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 2ea:	10 c0       	rjmp	.+32     	; 0x30c <vTaskIncrementTick+0x94>
 2ec:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <pxDelayedTaskList>
 2f0:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <pxDelayedTaskList+0x1>
 2f4:	05 80       	ldd	r0, Z+5	; 0x05
 2f6:	f6 81       	ldd	r31, Z+6	; 0x06
 2f8:	e0 2d       	mov	r30, r0
 2fa:	06 80       	ldd	r0, Z+6	; 0x06
 2fc:	f7 81       	ldd	r31, Z+7	; 0x07
 2fe:	e0 2d       	mov	r30, r0
 300:	82 81       	ldd	r24, Z+2	; 0x02
 302:	93 81       	ldd	r25, Z+3	; 0x03
 304:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 308:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 30c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <xTickCount>
 310:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <xTickCount+0x1>
 314:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
 318:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
 31c:	28 17       	cp	r18, r24
 31e:	39 07       	cpc	r19, r25
 320:	08 f4       	brcc	.+2      	; 0x324 <vTaskIncrementTick+0xac>
 322:	66 c0       	rjmp	.+204    	; 0x3f0 <vTaskIncrementTick+0x178>
 324:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <pxDelayedTaskList>
 328:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <pxDelayedTaskList+0x1>
 32c:	80 81       	ld	r24, Z
 32e:	88 23       	and	r24, r24
 330:	99 f0       	breq	.+38     	; 0x358 <vTaskIncrementTick+0xe0>
 332:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <pxDelayedTaskList>
 336:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <pxDelayedTaskList+0x1>
 33a:	05 80       	ldd	r0, Z+5	; 0x05
 33c:	f6 81       	ldd	r31, Z+6	; 0x06
 33e:	e0 2d       	mov	r30, r0
 340:	c6 81       	ldd	r28, Z+6	; 0x06
 342:	d7 81       	ldd	r29, Z+7	; 0x07
 344:	8a 81       	ldd	r24, Y+2	; 0x02
 346:	9b 81       	ldd	r25, Y+3	; 0x03
 348:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <xTickCount>
 34c:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <xTickCount+0x1>
 350:	28 17       	cp	r18, r24
 352:	39 07       	cpc	r19, r25
 354:	f8 f4       	brcc	.+62     	; 0x394 <vTaskIncrementTick+0x11c>
 356:	19 c0       	rjmp	.+50     	; 0x38a <vTaskIncrementTick+0x112>
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 360:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 364:	45 c0       	rjmp	.+138    	; 0x3f0 <vTaskIncrementTick+0x178>
 366:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <pxDelayedTaskList>
 36a:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <pxDelayedTaskList+0x1>
 36e:	05 80       	ldd	r0, Z+5	; 0x05
 370:	f6 81       	ldd	r31, Z+6	; 0x06
 372:	e0 2d       	mov	r30, r0
 374:	c6 81       	ldd	r28, Z+6	; 0x06
 376:	d7 81       	ldd	r29, Z+7	; 0x07
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	9b 81       	ldd	r25, Y+3	; 0x03
 37c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <xTickCount>
 380:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <xTickCount+0x1>
 384:	28 17       	cp	r18, r24
 386:	39 07       	cpc	r19, r25
 388:	28 f4       	brcc	.+10     	; 0x394 <vTaskIncrementTick+0x11c>
 38a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 38e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 392:	2e c0       	rjmp	.+92     	; 0x3f0 <vTaskIncrementTick+0x178>
 394:	8e 01       	movw	r16, r28
 396:	0e 5f       	subi	r16, 0xFE	; 254
 398:	1f 4f       	sbci	r17, 0xFF	; 255
 39a:	c8 01       	movw	r24, r16
 39c:	bc de       	rcall	.-648    	; 0x116 <vListRemove>
 39e:	8c 89       	ldd	r24, Y+20	; 0x14
 3a0:	9d 89       	ldd	r25, Y+21	; 0x15
 3a2:	89 2b       	or	r24, r25
 3a4:	19 f0       	breq	.+6      	; 0x3ac <vTaskIncrementTick+0x134>
 3a6:	ce 01       	movw	r24, r28
 3a8:	0c 96       	adiw	r24, 0x0c	; 12
 3aa:	b5 de       	rcall	.-662    	; 0x116 <vListRemove>
 3ac:	8e 89       	ldd	r24, Y+22	; 0x16
 3ae:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <uxTopReadyPriority>
 3b2:	98 17       	cp	r25, r24
 3b4:	10 f4       	brcc	.+4      	; 0x3ba <vTaskIncrementTick+0x142>
 3b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <uxTopReadyPriority>
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	9c 01       	movw	r18, r24
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	b8 01       	movw	r22, r16
 3d0:	81 5f       	subi	r24, 0xF1	; 241
 3d2:	9e 4f       	sbci	r25, 0xFE	; 254
 3d4:	79 de       	rcall	.-782    	; 0xc8 <vListInsertEnd>
 3d6:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <pxDelayedTaskList>
 3da:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <pxDelayedTaskList+0x1>
 3de:	80 81       	ld	r24, Z
 3e0:	81 11       	cpse	r24, r1
 3e2:	c1 cf       	rjmp	.-126    	; 0x366 <vTaskIncrementTick+0xee>
 3e4:	b9 cf       	rjmp	.-142    	; 0x358 <vTaskIncrementTick+0xe0>
 3e6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uxMissedTicks>
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uxMissedTicks>
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 3fa:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uxSchedulerSuspended>
 3fe:	81 11       	cpse	r24, r1
 400:	13 c0       	rjmp	.+38     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 402:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <uxTopReadyPriority>
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	ee 0f       	add	r30, r30
 40c:	ff 1f       	adc	r31, r31
 40e:	ee 0f       	add	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	8e 0f       	add	r24, r30
 418:	9f 1f       	adc	r25, r31
 41a:	fc 01       	movw	r30, r24
 41c:	e1 5f       	subi	r30, 0xF1	; 241
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	80 81       	ld	r24, Z
 422:	88 23       	and	r24, r24
 424:	29 f0       	breq	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	1b c0       	rjmp	.+54     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <xMissedYield>
 42e:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 430:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <uxTopReadyPriority>
 434:	81 50       	subi	r24, 0x01	; 1
 436:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 43a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <uxTopReadyPriority>
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	fc 01       	movw	r30, r24
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	ee 0f       	add	r30, r30
 448:	ff 1f       	adc	r31, r31
 44a:	ee 0f       	add	r30, r30
 44c:	ff 1f       	adc	r31, r31
 44e:	8e 0f       	add	r24, r30
 450:	9f 1f       	adc	r25, r31
 452:	fc 01       	movw	r30, r24
 454:	e1 5f       	subi	r30, 0xF1	; 241
 456:	fe 4f       	sbci	r31, 0xFE	; 254
 458:	80 81       	ld	r24, Z
 45a:	88 23       	and	r24, r24
 45c:	49 f3       	breq	.-46     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 45e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <uxTopReadyPriority>
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	9c 01       	movw	r18, r24
 466:	22 0f       	add	r18, r18
 468:	33 1f       	adc	r19, r19
 46a:	22 0f       	add	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	22 0f       	add	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	28 0f       	add	r18, r24
 474:	39 1f       	adc	r19, r25
 476:	d9 01       	movw	r26, r18
 478:	a1 5f       	subi	r26, 0xF1	; 241
 47a:	be 4f       	sbci	r27, 0xFE	; 254
 47c:	11 96       	adiw	r26, 0x01	; 1
 47e:	ed 91       	ld	r30, X+
 480:	fc 91       	ld	r31, X
 482:	12 97       	sbiw	r26, 0x02	; 2
 484:	02 80       	ldd	r0, Z+2	; 0x02
 486:	f3 81       	ldd	r31, Z+3	; 0x03
 488:	e0 2d       	mov	r30, r0
 48a:	12 96       	adiw	r26, 0x02	; 2
 48c:	fc 93       	st	X, r31
 48e:	ee 93       	st	-X, r30
 490:	11 97       	sbiw	r26, 0x01	; 1
 492:	2e 5e       	subi	r18, 0xEE	; 238
 494:	3e 4f       	sbci	r19, 0xFE	; 254
 496:	e2 17       	cp	r30, r18
 498:	f3 07       	cpc	r31, r19
 49a:	29 f4       	brne	.+10     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 49c:	22 81       	ldd	r18, Z+2	; 0x02
 49e:	33 81       	ldd	r19, Z+3	; 0x03
 4a0:	fd 01       	movw	r30, r26
 4a2:	32 83       	std	Z+2, r19	; 0x02
 4a4:	21 83       	std	Z+1, r18	; 0x01
 4a6:	fc 01       	movw	r30, r24
 4a8:	ee 0f       	add	r30, r30
 4aa:	ff 1f       	adc	r31, r31
 4ac:	ee 0f       	add	r30, r30
 4ae:	ff 1f       	adc	r31, r31
 4b0:	ee 0f       	add	r30, r30
 4b2:	ff 1f       	adc	r31, r31
 4b4:	8e 0f       	add	r24, r30
 4b6:	9f 1f       	adc	r25, r31
 4b8:	fc 01       	movw	r30, r24
 4ba:	e1 5f       	subi	r30, 0xF1	; 241
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	01 80       	ldd	r0, Z+1	; 0x01
 4c0:	f2 81       	ldd	r31, Z+2	; 0x02
 4c2:	e0 2d       	mov	r30, r0
 4c4:	86 81       	ldd	r24, Z+6	; 0x06
 4c6:	97 81       	ldd	r25, Z+7	; 0x07
 4c8:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <pxCurrentTCB+0x1>
 4cc:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <pxCurrentTCB>
 4d0:	08 95       	ret

000004d2 <_exit>:
 4d2:	f8 94       	cli

000004d4 <__stop_program>:
 4d4:	ff cf       	rjmp	.-2      	; 0x4d4 <__stop_program>
