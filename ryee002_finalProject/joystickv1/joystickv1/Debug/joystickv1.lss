
joystickv1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000494  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000494  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  00800102  00800102  0000052a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f6b  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d29  00000000  00000000  00002687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011bf  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00004570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c32  00000000  00000000  00004934  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001021  00000000  00000000  00005566  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00006587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	fe c0       	rjmp	.+508    	; 0x232 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 33       	cpi	r26, 0x33	; 51
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	08 d0       	rcall	.+16     	; 0xd4 <main>
  c4:	e5 c1       	rjmp	.+970    	; 0x490 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <A2D_init>:
{
	state = init;
	for(;;)
	{
		Display_Tick();
		vTaskDelay(100);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 6e       	ori	r24, 0xE0	; 224
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <main>:
// 	xTaskCreate(A2D_Task, (signed portCHAR *)"A2D_Task", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
// }

int main(void)
{
	A2D_init();
  d4:	f9 df       	rcall	.-14     	; 0xc8 <A2D_init>
	DDRA = 0x00; PORTA = 0xFF;
  d6:	11 b8       	out	0x01, r1	; 1
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
  dc:	84 b9       	out	0x04, r24	; 4
  de:	15 b8       	out	0x05, r1	; 5
	//DDRC = 0xFF; PORTC = 0x00;
	//DDRD = 0xFF; PORTD = 0x00;
	//StartShiftPulse(1);
	//vTaskStartScheduler();
}
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	08 95       	ret

000000e6 <vListInsertEnd>:
	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	fc 01       	movw	r30, r24
  ec:	db 01       	movw	r26, r22
  ee:	21 81       	ldd	r18, Z+1	; 0x01
  f0:	32 81       	ldd	r19, Z+2	; 0x02
  f2:	e9 01       	movw	r28, r18
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	9b 81       	ldd	r25, Y+3	; 0x03
  f8:	13 96       	adiw	r26, 0x03	; 3
  fa:	9c 93       	st	X, r25
  fc:	8e 93       	st	-X, r24
  fe:	12 97       	sbiw	r26, 0x02	; 2
 100:	81 81       	ldd	r24, Z+1	; 0x01
 102:	92 81       	ldd	r25, Z+2	; 0x02
 104:	15 96       	adiw	r26, 0x05	; 5
 106:	9c 93       	st	X, r25
 108:	8e 93       	st	-X, r24
 10a:	14 97       	sbiw	r26, 0x04	; 4
 10c:	8a 81       	ldd	r24, Y+2	; 0x02
 10e:	9b 81       	ldd	r25, Y+3	; 0x03
 110:	ec 01       	movw	r28, r24
 112:	7d 83       	std	Y+5, r23	; 0x05
 114:	6c 83       	std	Y+4, r22	; 0x04
 116:	e9 01       	movw	r28, r18
 118:	7b 83       	std	Y+3, r23	; 0x03
 11a:	6a 83       	std	Y+2, r22	; 0x02
 11c:	72 83       	std	Z+2, r23	; 0x02
 11e:	61 83       	std	Z+1, r22	; 0x01
 120:	19 96       	adiw	r26, 0x09	; 9
 122:	fc 93       	st	X, r31
 124:	ee 93       	st	-X, r30
 126:	18 97       	sbiw	r26, 0x08	; 8
 128:	80 81       	ld	r24, Z
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 83       	st	Z, r24
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 134:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 136:	a2 81       	ldd	r26, Z+2	; 0x02
 138:	b3 81       	ldd	r27, Z+3	; 0x03
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	95 81       	ldd	r25, Z+5	; 0x05
 13e:	15 96       	adiw	r26, 0x05	; 5
 140:	9c 93       	st	X, r25
 142:	8e 93       	st	-X, r24
 144:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 146:	a4 81       	ldd	r26, Z+4	; 0x04
 148:	b5 81       	ldd	r27, Z+5	; 0x05
 14a:	82 81       	ldd	r24, Z+2	; 0x02
 14c:	93 81       	ldd	r25, Z+3	; 0x03
 14e:	13 96       	adiw	r26, 0x03	; 3
 150:	9c 93       	st	X, r25
 152:	8e 93       	st	-X, r24
 154:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 156:	a0 85       	ldd	r26, Z+8	; 0x08
 158:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 15a:	11 96       	adiw	r26, 0x01	; 1
 15c:	8d 91       	ld	r24, X+
 15e:	9c 91       	ld	r25, X
 160:	12 97       	sbiw	r26, 0x02	; 2
 162:	e8 17       	cp	r30, r24
 164:	f9 07       	cpc	r31, r25
 166:	31 f4       	brne	.+12     	; 0x174 <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 168:	84 81       	ldd	r24, Z+4	; 0x04
 16a:	95 81       	ldd	r25, Z+5	; 0x05
 16c:	12 96       	adiw	r26, 0x02	; 2
 16e:	9c 93       	st	X, r25
 170:	8e 93       	st	-X, r24
 172:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 174:	11 86       	std	Z+9, r1	; 0x09
 176:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 178:	8c 91       	ld	r24, X
 17a:	81 50       	subi	r24, 0x01	; 1
 17c:	8c 93       	st	X, r24
 17e:	08 95       	ret

00000180 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 180:	0f 92       	push	r0
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	0f 92       	push	r0
 188:	1f 92       	push	r1
 18a:	11 24       	eor	r1, r1
 18c:	2f 92       	push	r2
 18e:	3f 92       	push	r3
 190:	4f 92       	push	r4
 192:	5f 92       	push	r5
 194:	6f 92       	push	r6
 196:	7f 92       	push	r7
 198:	8f 92       	push	r8
 19a:	9f 92       	push	r9
 19c:	af 92       	push	r10
 19e:	bf 92       	push	r11
 1a0:	cf 92       	push	r12
 1a2:	df 92       	push	r13
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	2f 93       	push	r18
 1ae:	3f 93       	push	r19
 1b0:	4f 93       	push	r20
 1b2:	5f 93       	push	r21
 1b4:	6f 93       	push	r22
 1b6:	7f 93       	push	r23
 1b8:	8f 93       	push	r24
 1ba:	9f 93       	push	r25
 1bc:	af 93       	push	r26
 1be:	bf 93       	push	r27
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	ef 93       	push	r30
 1c6:	ff 93       	push	r31
 1c8:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <pxCurrentTCB>
 1cc:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <pxCurrentTCB+0x1>
 1d0:	0d b6       	in	r0, 0x3d	; 61
 1d2:	0d 92       	st	X+, r0
 1d4:	0e b6       	in	r0, 0x3e	; 62
 1d6:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 1d8:	2e d0       	rcall	.+92     	; 0x236 <vTaskIncrementTick>
	vTaskSwitchContext();
 1da:	ee d0       	rcall	.+476    	; 0x3b8 <vTaskSwitchContext>
 1dc:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <pxCurrentTCB>
	portRESTORE_CONTEXT();
 1e0:	b0 91 32 01 	lds	r27, 0x0132	; 0x800132 <pxCurrentTCB+0x1>
 1e4:	cd 91       	ld	r28, X+
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	dd 91       	ld	r29, X+
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	ff 91       	pop	r31
 1ee:	ef 91       	pop	r30
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	7f 91       	pop	r23
 1fe:	6f 91       	pop	r22
 200:	5f 91       	pop	r21
 202:	4f 91       	pop	r20
 204:	3f 91       	pop	r19
 206:	2f 91       	pop	r18
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	af 90       	pop	r10
 218:	9f 90       	pop	r9
 21a:	8f 90       	pop	r8
 21c:	7f 90       	pop	r7
 21e:	6f 90       	pop	r6
 220:	5f 90       	pop	r5
 222:	4f 90       	pop	r4
 224:	3f 90       	pop	r3
 226:	2f 90       	pop	r2
 228:	1f 90       	pop	r1
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	08 95       	ret

00000232 <__vector_13>:

	asm volatile ( "ret" );
 232:	a6 df       	rcall	.-180    	; 0x180 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 234:	18 95       	reti

00000236 <vTaskIncrementTick>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
			{
				taskYIELD();
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	cf 93       	push	r28
 23c:	df 93       	push	r29
 23e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <uxSchedulerSuspended>
 242:	81 11       	cpse	r24, r1
 244:	af c0       	rjmp	.+350    	; 0x3a4 <vTaskIncrementTick+0x16e>
 246:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <xTickCount>
 24a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <xTickCount+0x1>
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <xTickCount+0x1>
 254:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <xTickCount>
 258:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <xTickCount>
 25c:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <xTickCount+0x1>
 260:	89 2b       	or	r24, r25
 262:	99 f5       	brne	.+102    	; 0x2ca <vTaskIncrementTick+0x94>
 264:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pxDelayedTaskList>
 268:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <pxDelayedTaskList+0x1>
 26c:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <pxOverflowDelayedTaskList>
 270:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <pxOverflowDelayedTaskList+0x1>
 274:	30 93 0c 01 	sts	0x010C, r19	; 0x80010c <pxDelayedTaskList+0x1>
 278:	20 93 0b 01 	sts	0x010B, r18	; 0x80010b <pxDelayedTaskList>
 27c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <pxOverflowDelayedTaskList+0x1>
 280:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <pxOverflowDelayedTaskList>
 284:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 288:	8f 5f       	subi	r24, 0xFF	; 255
 28a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 28e:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <pxDelayedTaskList>
 292:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <pxDelayedTaskList+0x1>
 296:	80 81       	ld	r24, Z
 298:	81 11       	cpse	r24, r1
 29a:	07 c0       	rjmp	.+14     	; 0x2aa <vTaskIncrementTick+0x74>
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	9f ef       	ldi	r25, 0xFF	; 255
 2a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2a8:	10 c0       	rjmp	.+32     	; 0x2ca <vTaskIncrementTick+0x94>
 2aa:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <pxDelayedTaskList>
 2ae:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <pxDelayedTaskList+0x1>
 2b2:	05 80       	ldd	r0, Z+5	; 0x05
 2b4:	f6 81       	ldd	r31, Z+6	; 0x06
 2b6:	e0 2d       	mov	r30, r0
 2b8:	06 80       	ldd	r0, Z+6	; 0x06
 2ba:	f7 81       	ldd	r31, Z+7	; 0x07
 2bc:	e0 2d       	mov	r30, r0
 2be:	82 81       	ldd	r24, Z+2	; 0x02
 2c0:	93 81       	ldd	r25, Z+3	; 0x03
 2c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 2c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ca:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <xTickCount>
 2ce:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <xTickCount+0x1>
 2d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 2da:	28 17       	cp	r18, r24
 2dc:	39 07       	cpc	r19, r25
 2de:	08 f4       	brcc	.+2      	; 0x2e2 <vTaskIncrementTick+0xac>
 2e0:	66 c0       	rjmp	.+204    	; 0x3ae <vTaskIncrementTick+0x178>
 2e2:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <pxDelayedTaskList>
 2e6:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <pxDelayedTaskList+0x1>
 2ea:	80 81       	ld	r24, Z
 2ec:	88 23       	and	r24, r24
 2ee:	99 f0       	breq	.+38     	; 0x316 <vTaskIncrementTick+0xe0>
 2f0:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <pxDelayedTaskList>
 2f4:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <pxDelayedTaskList+0x1>
 2f8:	05 80       	ldd	r0, Z+5	; 0x05
 2fa:	f6 81       	ldd	r31, Z+6	; 0x06
 2fc:	e0 2d       	mov	r30, r0
 2fe:	c6 81       	ldd	r28, Z+6	; 0x06
 300:	d7 81       	ldd	r29, Z+7	; 0x07
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	9b 81       	ldd	r25, Y+3	; 0x03
 306:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <xTickCount>
 30a:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <xTickCount+0x1>
 30e:	28 17       	cp	r18, r24
 310:	39 07       	cpc	r19, r25
 312:	f8 f4       	brcc	.+62     	; 0x352 <vTaskIncrementTick+0x11c>
 314:	19 c0       	rjmp	.+50     	; 0x348 <vTaskIncrementTick+0x112>
 316:	8f ef       	ldi	r24, 0xFF	; 255
 318:	9f ef       	ldi	r25, 0xFF	; 255
 31a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 31e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 322:	45 c0       	rjmp	.+138    	; 0x3ae <vTaskIncrementTick+0x178>
 324:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <pxDelayedTaskList>
 328:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <pxDelayedTaskList+0x1>
 32c:	05 80       	ldd	r0, Z+5	; 0x05
 32e:	f6 81       	ldd	r31, Z+6	; 0x06
 330:	e0 2d       	mov	r30, r0
 332:	c6 81       	ldd	r28, Z+6	; 0x06
 334:	d7 81       	ldd	r29, Z+7	; 0x07
 336:	8a 81       	ldd	r24, Y+2	; 0x02
 338:	9b 81       	ldd	r25, Y+3	; 0x03
 33a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <xTickCount>
 33e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <xTickCount+0x1>
 342:	28 17       	cp	r18, r24
 344:	39 07       	cpc	r19, r25
 346:	28 f4       	brcc	.+10     	; 0x352 <vTaskIncrementTick+0x11c>
 348:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 34c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 350:	2e c0       	rjmp	.+92     	; 0x3ae <vTaskIncrementTick+0x178>
 352:	8e 01       	movw	r16, r28
 354:	0e 5f       	subi	r16, 0xFE	; 254
 356:	1f 4f       	sbci	r17, 0xFF	; 255
 358:	c8 01       	movw	r24, r16
 35a:	ec de       	rcall	.-552    	; 0x134 <vListRemove>
 35c:	8c 89       	ldd	r24, Y+20	; 0x14
 35e:	9d 89       	ldd	r25, Y+21	; 0x15
 360:	89 2b       	or	r24, r25
 362:	19 f0       	breq	.+6      	; 0x36a <vTaskIncrementTick+0x134>
 364:	ce 01       	movw	r24, r28
 366:	0c 96       	adiw	r24, 0x0c	; 12
 368:	e5 de       	rcall	.-566    	; 0x134 <vListRemove>
 36a:	8e 89       	ldd	r24, Y+22	; 0x16
 36c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <uxTopReadyPriority>
 370:	98 17       	cp	r25, r24
 372:	10 f4       	brcc	.+4      	; 0x378 <vTaskIncrementTick+0x142>
 374:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uxTopReadyPriority>
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	9c 01       	movw	r18, r24
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	22 0f       	add	r18, r18
 386:	33 1f       	adc	r19, r19
 388:	82 0f       	add	r24, r18
 38a:	93 1f       	adc	r25, r19
 38c:	b8 01       	movw	r22, r16
 38e:	83 5f       	subi	r24, 0xF3	; 243
 390:	9e 4f       	sbci	r25, 0xFE	; 254
 392:	a9 de       	rcall	.-686    	; 0xe6 <vListInsertEnd>
 394:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <pxDelayedTaskList>
 398:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <pxDelayedTaskList+0x1>
 39c:	80 81       	ld	r24, Z
 39e:	81 11       	cpse	r24, r1
 3a0:	c1 cf       	rjmp	.-126    	; 0x324 <vTaskIncrementTick+0xee>
 3a2:	b9 cf       	rjmp	.-142    	; 0x316 <vTaskIncrementTick+0xe0>
 3a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <uxMissedTicks>
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <uxMissedTicks>
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	1f 91       	pop	r17
 3b4:	0f 91       	pop	r16
 3b6:	08 95       	ret

000003b8 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 3b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <uxSchedulerSuspended>
 3bc:	81 11       	cpse	r24, r1
 3be:	13 c0       	rjmp	.+38     	; 0x3e6 <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 3c0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uxTopReadyPriority>
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	fc 01       	movw	r30, r24
 3c8:	ee 0f       	add	r30, r30
 3ca:	ff 1f       	adc	r31, r31
 3cc:	ee 0f       	add	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	8e 0f       	add	r24, r30
 3d6:	9f 1f       	adc	r25, r31
 3d8:	fc 01       	movw	r30, r24
 3da:	e3 5f       	subi	r30, 0xF3	; 243
 3dc:	fe 4f       	sbci	r31, 0xFE	; 254
 3de:	80 81       	ld	r24, Z
 3e0:	88 23       	and	r24, r24
 3e2:	29 f0       	breq	.+10     	; 0x3ee <vTaskSwitchContext+0x36>
 3e4:	1b c0       	rjmp	.+54     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <xMissedYield>
 3ec:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 3ee:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uxTopReadyPriority>
 3f2:	81 50       	subi	r24, 0x01	; 1
 3f4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 3f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uxTopReadyPriority>
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	fc 01       	movw	r30, r24
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	8e 0f       	add	r24, r30
 40e:	9f 1f       	adc	r25, r31
 410:	fc 01       	movw	r30, r24
 412:	e3 5f       	subi	r30, 0xF3	; 243
 414:	fe 4f       	sbci	r31, 0xFE	; 254
 416:	80 81       	ld	r24, Z
 418:	88 23       	and	r24, r24
 41a:	49 f3       	breq	.-46     	; 0x3ee <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 41c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uxTopReadyPriority>
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	9c 01       	movw	r18, r24
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	22 0f       	add	r18, r18
 42a:	33 1f       	adc	r19, r19
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	28 0f       	add	r18, r24
 432:	39 1f       	adc	r19, r25
 434:	d9 01       	movw	r26, r18
 436:	a3 5f       	subi	r26, 0xF3	; 243
 438:	be 4f       	sbci	r27, 0xFE	; 254
 43a:	11 96       	adiw	r26, 0x01	; 1
 43c:	ed 91       	ld	r30, X+
 43e:	fc 91       	ld	r31, X
 440:	12 97       	sbiw	r26, 0x02	; 2
 442:	02 80       	ldd	r0, Z+2	; 0x02
 444:	f3 81       	ldd	r31, Z+3	; 0x03
 446:	e0 2d       	mov	r30, r0
 448:	12 96       	adiw	r26, 0x02	; 2
 44a:	fc 93       	st	X, r31
 44c:	ee 93       	st	-X, r30
 44e:	11 97       	sbiw	r26, 0x01	; 1
 450:	20 5f       	subi	r18, 0xF0	; 240
 452:	3e 4f       	sbci	r19, 0xFE	; 254
 454:	e2 17       	cp	r30, r18
 456:	f3 07       	cpc	r31, r19
 458:	29 f4       	brne	.+10     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 45a:	22 81       	ldd	r18, Z+2	; 0x02
 45c:	33 81       	ldd	r19, Z+3	; 0x03
 45e:	fd 01       	movw	r30, r26
 460:	32 83       	std	Z+2, r19	; 0x02
 462:	21 83       	std	Z+1, r18	; 0x01
 464:	fc 01       	movw	r30, r24
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	8e 0f       	add	r24, r30
 474:	9f 1f       	adc	r25, r31
 476:	fc 01       	movw	r30, r24
 478:	e3 5f       	subi	r30, 0xF3	; 243
 47a:	fe 4f       	sbci	r31, 0xFE	; 254
 47c:	01 80       	ldd	r0, Z+1	; 0x01
 47e:	f2 81       	ldd	r31, Z+2	; 0x02
 480:	e0 2d       	mov	r30, r0
 482:	86 81       	ldd	r24, Z+6	; 0x06
 484:	97 81       	ldd	r25, Z+7	; 0x07
 486:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <pxCurrentTCB+0x1>
 48a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <pxCurrentTCB>
 48e:	08 95       	ret

00000490 <_exit>:
 490:	f8 94       	cli

00000492 <__stop_program>:
 492:	ff cf       	rjmp	.-2      	; 0x492 <__stop_program>
