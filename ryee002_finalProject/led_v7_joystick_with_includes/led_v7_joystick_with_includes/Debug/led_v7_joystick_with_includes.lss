
led_v7_joystick_with_includes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000d98  00000e2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000640  00800120  00800120  00000e4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ae  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eed  00000000  00000000  0000344a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013af  00000000  00000000  00004337  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  000056e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d51  00000000  00000000  00005b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001211  00000000  00000000  000068d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00007ae6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	41 c3       	rjmp	.+1666   	; 0x6b8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 36       	cpi	r26, 0x60	; 96
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	95 d1       	rcall	.+810    	; 0x3ee <main>
  c4:	67 c6       	rjmp	.+3278   	; 0xd94 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
  ce:	47 d4       	rcall	.+2190   	; 0x95e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
  d0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__data_end>
  d4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__data_end+0x1>
  d8:	c9 01       	movw	r24, r18
  da:	8c 0f       	add	r24, r28
  dc:	9d 1f       	adc	r25, r29
  de:	8c 3d       	cpi	r24, 0xDC	; 220
  e0:	45 e0       	ldi	r20, 0x05	; 5
  e2:	94 07       	cpc	r25, r20
  e4:	58 f4       	brcc	.+22     	; 0xfc <pvPortMalloc+0x34>
  e6:	28 17       	cp	r18, r24
  e8:	39 07       	cpc	r19, r25
  ea:	58 f4       	brcc	.+22     	; 0x102 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
  ec:	e9 01       	movw	r28, r18
  ee:	ce 5d       	subi	r28, 0xDE	; 222
  f0:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
  f2:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__data_end+0x1>
  f6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <pvPortMalloc+0x3e>
 102:	c0 e0       	ldi	r28, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
 104:	d0 e0       	ldi	r29, 0x00	; 0
 106:	f2 d4       	rcall	.+2532   	; 0xaec <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
 108:	ce 01       	movw	r24, r28
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 110:	08 95       	ret

00000112 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
 112:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 114:	03 96       	adiw	r24, 0x03	; 3
 116:	92 83       	std	Z+2, r25	; 0x02
 118:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	3f ef       	ldi	r19, 0xFF	; 255
 11e:	34 83       	std	Z+4, r19	; 0x04
 120:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 122:	96 83       	std	Z+6, r25	; 0x06
 124:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 126:	90 87       	std	Z+8, r25	; 0x08
 128:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 12a:	10 82       	st	Z, r1
 12c:	08 95       	ret

0000012e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 12e:	fc 01       	movw	r30, r24
 130:	11 86       	std	Z+9, r1	; 0x09
 132:	10 86       	std	Z+8, r1	; 0x08
 134:	08 95       	ret

00000136 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
 13c:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 13e:	21 81       	ldd	r18, Z+1	; 0x01
 140:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
 142:	e9 01       	movw	r28, r18
 144:	8a 81       	ldd	r24, Y+2	; 0x02
 146:	9b 81       	ldd	r25, Y+3	; 0x03
 148:	13 96       	adiw	r26, 0x03	; 3
 14a:	9c 93       	st	X, r25
 14c:	8e 93       	st	-X, r24
 14e:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
 150:	81 81       	ldd	r24, Z+1	; 0x01
 152:	92 81       	ldd	r25, Z+2	; 0x02
 154:	15 96       	adiw	r26, 0x05	; 5
 156:	9c 93       	st	X, r25
 158:	8e 93       	st	-X, r24
 15a:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	9b 81       	ldd	r25, Y+3	; 0x03
 160:	ec 01       	movw	r28, r24
 162:	7d 83       	std	Y+5, r23	; 0x05
 164:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 166:	e9 01       	movw	r28, r18
 168:	7b 83       	std	Y+3, r23	; 0x03
 16a:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 16c:	72 83       	std	Z+2, r23	; 0x02
 16e:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 170:	19 96       	adiw	r26, 0x09	; 9
 172:	fc 93       	st	X, r31
 174:	ee 93       	st	-X, r30
 176:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
 178:	80 81       	ld	r24, Z
 17a:	8f 5f       	subi	r24, 0xFF	; 255
 17c:	80 83       	st	Z, r24
}
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 18a:	48 81       	ld	r20, Y
 18c:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 18e:	4f 3f       	cpi	r20, 0xFF	; 255
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	52 07       	cpc	r21, r18
 194:	31 f4       	brne	.+12     	; 0x1a2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 196:	dc 01       	movw	r26, r24
 198:	17 96       	adiw	r26, 0x07	; 7
 19a:	ed 91       	ld	r30, X+
 19c:	fc 91       	ld	r31, X
 19e:	18 97       	sbiw	r26, 0x08	; 8
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 1a2:	fc 01       	movw	r30, r24
 1a4:	33 96       	adiw	r30, 0x03	; 3
 1a6:	dc 01       	movw	r26, r24
 1a8:	15 96       	adiw	r26, 0x05	; 5
 1aa:	2d 91       	ld	r18, X+
 1ac:	3c 91       	ld	r19, X
 1ae:	16 97       	sbiw	r26, 0x06	; 6
 1b0:	d9 01       	movw	r26, r18
 1b2:	2d 91       	ld	r18, X+
 1b4:	3c 91       	ld	r19, X
 1b6:	42 17       	cp	r20, r18
 1b8:	53 07       	cpc	r21, r19
 1ba:	50 f0       	brcs	.+20     	; 0x1d0 <vListInsert+0x4c>
 1bc:	02 80       	ldd	r0, Z+2	; 0x02
 1be:	f3 81       	ldd	r31, Z+3	; 0x03
 1c0:	e0 2d       	mov	r30, r0
 1c2:	a2 81       	ldd	r26, Z+2	; 0x02
 1c4:	b3 81       	ldd	r27, Z+3	; 0x03
 1c6:	2d 91       	ld	r18, X+
 1c8:	3c 91       	ld	r19, X
 1ca:	42 17       	cp	r20, r18
 1cc:	53 07       	cpc	r21, r19
 1ce:	b0 f7       	brcc	.-20     	; 0x1bc <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 1d0:	a2 81       	ldd	r26, Z+2	; 0x02
 1d2:	b3 81       	ldd	r27, Z+3	; 0x03
 1d4:	bb 83       	std	Y+3, r27	; 0x03
 1d6:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 1d8:	15 96       	adiw	r26, 0x05	; 5
 1da:	dc 93       	st	X, r29
 1dc:	ce 93       	st	-X, r28
 1de:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
 1e0:	fd 83       	std	Y+5, r31	; 0x05
 1e2:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 1e4:	d3 83       	std	Z+3, r29	; 0x03
 1e6:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 1e8:	99 87       	std	Y+9, r25	; 0x09
 1ea:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 81       	ld	r18, Z
 1f0:	2f 5f       	subi	r18, 0xFF	; 255
 1f2:	20 83       	st	Z, r18
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
 1fa:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 1fc:	a2 81       	ldd	r26, Z+2	; 0x02
 1fe:	b3 81       	ldd	r27, Z+3	; 0x03
 200:	84 81       	ldd	r24, Z+4	; 0x04
 202:	95 81       	ldd	r25, Z+5	; 0x05
 204:	15 96       	adiw	r26, 0x05	; 5
 206:	9c 93       	st	X, r25
 208:	8e 93       	st	-X, r24
 20a:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 20c:	a4 81       	ldd	r26, Z+4	; 0x04
 20e:	b5 81       	ldd	r27, Z+5	; 0x05
 210:	82 81       	ldd	r24, Z+2	; 0x02
 212:	93 81       	ldd	r25, Z+3	; 0x03
 214:	13 96       	adiw	r26, 0x03	; 3
 216:	9c 93       	st	X, r25
 218:	8e 93       	st	-X, r24
 21a:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 21c:	a0 85       	ldd	r26, Z+8	; 0x08
 21e:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	8d 91       	ld	r24, X+
 224:	9c 91       	ld	r25, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	e8 17       	cp	r30, r24
 22a:	f9 07       	cpc	r31, r25
 22c:	31 f4       	brne	.+12     	; 0x23a <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 22e:	84 81       	ldd	r24, Z+4	; 0x04
 230:	95 81       	ldd	r25, Z+5	; 0x05
 232:	12 96       	adiw	r26, 0x02	; 2
 234:	9c 93       	st	X, r25
 236:	8e 93       	st	-X, r24
 238:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
 23a:	11 86       	std	Z+9, r1	; 0x09
 23c:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
 23e:	8c 91       	ld	r24, X
 240:	81 50       	subi	r24, 0x01	; 1
 242:	8c 93       	st	X, r24
 244:	08 95       	ret

00000246 <transmit_data>:
#define SHIFT_REG PORTC

void transmit_data(unsigned char data){
	unsigned char tmp = data;
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
 246:	43 9a       	sbi	0x08, 3	; 8
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
 248:	41 98       	cbi	0x08, 1	; 8
	
	for(i = 0; i < 8; i++){
 24a:	10 92 03 07 	sts	0x0703, r1	; 0x800703 <i>
		CLR_BIT(SHIFT_REG, 2);			//set SRCLK low
		tmp = GET_BIT(data, i);
		if(tmp)
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	50 e0       	ldi	r21, 0x00	; 0
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
	
	for(i = 0; i < 8; i++){
		CLR_BIT(SHIFT_REG, 2);			//set SRCLK low
 252:	42 98       	cbi	0x08, 2	; 8
		tmp = GET_BIT(data, i);
		if(tmp)
 254:	9a 01       	movw	r18, r20
 256:	00 90 03 07 	lds	r0, 0x0703	; 0x800703 <i>
 25a:	02 c0       	rjmp	.+4      	; 0x260 <transmit_data+0x1a>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	0a 94       	dec	r0
 262:	e2 f7       	brpl	.-8      	; 0x25c <transmit_data+0x16>
 264:	28 23       	and	r18, r24
 266:	11 f0       	breq	.+4      	; 0x26c <transmit_data+0x26>
		SET_BIT(SHIFT_REG, 0);	//set SER to data to be transmitted
 268:	40 9a       	sbi	0x08, 0	; 8
 26a:	01 c0       	rjmp	.+2      	; 0x26e <transmit_data+0x28>
		else
		CLR_BIT(SHIFT_REG, 0);
 26c:	40 98       	cbi	0x08, 0	; 8
		SET_BIT(SHIFT_REG, 2);			//set SRCLK high
 26e:	42 9a       	sbi	0x08, 2	; 8
	unsigned char tmp = data;
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
	
	for(i = 0; i < 8; i++){
 270:	90 91 03 07 	lds	r25, 0x0703	; 0x800703 <i>
 274:	9f 5f       	subi	r25, 0xFF	; 255
 276:	90 93 03 07 	sts	0x0703, r25	; 0x800703 <i>
 27a:	98 30       	cpi	r25, 0x08	; 8
 27c:	50 f3       	brcs	.-44     	; 0x252 <transmit_data+0xc>
		else
		CLR_BIT(SHIFT_REG, 0);
		SET_BIT(SHIFT_REG, 2);			//set SRCLK high
	}
	
	SET_BIT(SHIFT_REG, 1);				//set RCLK high
 27e:	41 9a       	sbi	0x08, 1	; 8
 280:	08 95       	ret

00000282 <Set_A2D_Pin>:
// The Default Channel is 0 (PA0)
// The value of pinNum determines the pin on PORTA used for A2D conversion
// Valid values range between 0 and 7, where the value represents the desired pin for A2D conversion
void Set_A2D_Pin(unsigned char pinNum)
{
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	60 f0       	brcs	.+24     	; 0x29e <Set_A2D_Pin+0x1c>
 286:	ec e7       	ldi	r30, 0x7C	; 124
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	80 83       	st	Z, r24
// Pins on PORTA are used as input for A2D conversion
// The Default Channel is 0 (PA0)
// The value of pinNum determines the pin on PORTA used for A2D conversion
// Valid values range between 0 and 7, where the value represents the desired pin for A2D conversion
void Set_A2D_Pin(unsigned char pinNum)
{
 28e:	8f e0       	ldi	r24, 0x0F	; 15
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
	// Allow channel to stabilize
	static unsigned char i = 0;
	for(i = 0; i < 15; ++i){asm("nop");}
 290:	00 00       	nop
 292:	81 50       	subi	r24, 0x01	; 1
 294:	e9 f7       	brne	.-6      	; 0x290 <Set_A2D_Pin+0xe>
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	80 93 fe 06 	sts	0x06FE, r24	; 0x8006fe <i.1816>
}
 29c:	08 95       	ret
// The Default Channel is 0 (PA0)
// The value of pinNum determines the pin on PORTA used for A2D conversion
// Valid values range between 0 and 7, where the value represents the desired pin for A2D conversion
void Set_A2D_Pin(unsigned char pinNum)
{
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 29e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 2a2:	f5 cf       	rjmp	.-22     	; 0x28e <Set_A2D_Pin+0xc>

000002a4 <A2D_init>:
	static unsigned char i = 0;
	for(i = 0; i < 15; ++i){asm("nop");}
}
void A2D_init()
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 2a4:	ea e7       	ldi	r30, 0x7A	; 122
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	80 6e       	ori	r24, 0xE0	; 224
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret

000002b0 <convert>:
	//ADSC: Starts analog-to-digital conversion
	//ADATE: Enables auto-triggering, allowing for constant analog to digital conversions.
}
void convert()
{
	ADCSRA |=(1<<ADSC);//start ADC conversion
 2b0:	ea e7       	ldi	r30, 0x7A	; 122
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	80 83       	st	Z, r24
	while ( !(ADCSRA & (1<<ADIF)));//wait till ADC conversion
 2ba:	80 81       	ld	r24, Z
 2bc:	84 ff       	sbrs	r24, 4
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <convert+0xa>
	
}
 2c0:	08 95       	ret

000002c2 <LEDMatrix_Tick>:
		case display:
			break;
		default:
			break;
	}
	switch(LEDstate)
 2c2:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <LEDstate>
 2c6:	81 11       	cpse	r24, r1
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <LEDMatrix_Tick+0x16>
	{
		case display:

			PORTD = pattern;
 2ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 2ce:	8b b9       	out	0x0b, r24	; 11
			transmit_data(~row);
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 2d4:	80 95       	com	r24
 2d6:	b7 cf       	rjmp	.-146    	; 0x246 <transmit_data>
 2d8:	08 95       	ret

000002da <LEDMatrix_Task>:
			break;
	}
}
void LEDMatrix_Task()
{
	LEDstate = display;
 2da:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <LEDstate>
	for(;;)
	{
		LEDMatrix_Tick();
 2de:	f1 df       	rcall	.-30     	; 0x2c2 <LEDMatrix_Tick>
		vTaskDelay(250);
 2e0:	8a ef       	ldi	r24, 0xFA	; 250
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	84 d4       	rcall	.+2312   	; 0xbee <vTaskDelay>
 2e6:	fb cf       	rjmp	.-10     	; 0x2de <LEDMatrix_Task+0x4>

000002e8 <LR_Tick>:
			break;
	}
}
void LR_Tick()
{
	switch(state)
 2e8:	80 91 5f 07 	lds	r24, 0x075F	; 0x80075f <state>
 2ec:	88 23       	and	r24, r24
 2ee:	19 f0       	breq	.+6      	; 0x2f6 <LR_Tick+0xe>
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	39 f1       	breq	.+78     	; 0x342 <LR_Tick+0x5a>
 2f4:	08 95       	ret
	{
		case leftRight:
			Set_A2D_Pin(0x00);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	c4 df       	rcall	.-120    	; 0x282 <Set_A2D_Pin>
			convert();
 2fa:	da df       	rcall	.-76     	; 0x2b0 <convert>
 2fc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			joystick = ADC;
 300:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 304:	90 93 02 07 	sts	0x0702, r25	; 0x800702 <joystick+0x1>
 308:	80 93 01 07 	sts	0x0701, r24	; 0x800701 <joystick>
 30c:	8e 35       	cpi	r24, 0x5E	; 94
			if(joystick < 350)
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	92 07       	cpc	r25, r18
 312:	40 f4       	brcc	.+16     	; 0x324 <LR_Tick+0x3c>
 314:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
			{
				if(pattern != 0x01)
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	79 f0       	breq	.+30     	; 0x33a <LR_Tick+0x52>
 31c:	86 95       	lsr	r24
					pattern = pattern >> 1;
 31e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
 322:	0b c0       	rjmp	.+22     	; 0x33a <LR_Tick+0x52>
 324:	8d 3b       	cpi	r24, 0xBD	; 189
			}
			else if(joystick > 700)
 326:	92 40       	sbci	r25, 0x02	; 2
 328:	40 f0       	brcs	.+16     	; 0x33a <LR_Tick+0x52>
 32a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
			{
				if(pattern != 0x80)
 32e:	80 38       	cpi	r24, 0x80	; 128
 330:	21 f0       	breq	.+8      	; 0x33a <LR_Tick+0x52>
 332:	88 0f       	add	r24, r24
					pattern = pattern << 1 | 0x01;
 334:	81 60       	ori	r24, 0x01	; 1
 336:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
 33a:	81 e0       	ldi	r24, 0x01	; 1
			}
			state = upDown;
 33c:	80 93 5f 07 	sts	0x075F, r24	; 0x80075f <state>
 340:	08 95       	ret
			break;
		case upDown:
			Set_A2D_Pin(0x01);
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	9e df       	rcall	.-196    	; 0x282 <Set_A2D_Pin>
			convert();
 346:	b4 df       	rcall	.-152    	; 0x2b0 <convert>
 348:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			temp = ADC;
 34c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 350:	90 93 00 07 	sts	0x0700, r25	; 0x800700 <temp+0x1>
 354:	80 93 ff 06 	sts	0x06FF, r24	; 0x8006ff <temp>
 358:	8e 35       	cpi	r24, 0x5E	; 94
			if(temp < 350)
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	92 07       	cpc	r25, r18
 35e:	48 f4       	brcc	.+18     	; 0x372 <LR_Tick+0x8a>
 360:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			{
				if(row != 0x10)
 364:	80 31       	cpi	r24, 0x10	; 16
 366:	79 f0       	breq	.+30     	; 0x386 <LR_Tick+0x9e>
 368:	88 0f       	add	r24, r24
					row = row << 1 | 0x01;
 36a:	81 60       	ori	r24, 0x01	; 1
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 370:	0a c0       	rjmp	.+20     	; 0x386 <LR_Tick+0x9e>
 372:	8d 3b       	cpi	r24, 0xBD	; 189
			}
			else if(temp > 700)
 374:	92 40       	sbci	r25, 0x02	; 2
 376:	38 f0       	brcs	.+14     	; 0x386 <LR_Tick+0x9e>
 378:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
			{
				if(row != 0x01)
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	19 f0       	breq	.+6      	; 0x386 <LR_Tick+0x9e>
 380:	86 95       	lsr	r24
					row = row >> 1;
 382:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 386:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <state>
			}
			state = leftRight;
 38a:	08 95       	ret

0000038c <LR_Task>:
 38c:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <state>
void LR_Task()
{
	state = leftRight;
	for(;;)
	{
		LR_Tick();
 390:	ab df       	rcall	.-170    	; 0x2e8 <LR_Tick>
		vTaskDelay(250);
 392:	8a ef       	ldi	r24, 0xFA	; 250
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	2b d4       	rcall	.+2134   	; 0xbee <vTaskDelay>
 398:	fb cf       	rjmp	.-10     	; 0x390 <LR_Task+0x4>

0000039a <StartShiftPulse>:
	}
}
void StartShiftPulse(unsigned portBASE_TYPE Priority)
{
 39a:	af 92       	push	r10
 39c:	bf 92       	push	r11
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	cf 93       	push	r28
	xTaskCreate(LR_Task, (signed portCHAR *) "LR_Task", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
 3aa:	a1 2c       	mov	r10, r1
 3ac:	b1 2c       	mov	r11, r1
 3ae:	c1 2c       	mov	r12, r1
 3b0:	d1 2c       	mov	r13, r1
 3b2:	e1 2c       	mov	r14, r1
 3b4:	f1 2c       	mov	r15, r1
 3b6:	08 2f       	mov	r16, r24
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	45 e5       	ldi	r20, 0x55	; 85
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	64 e0       	ldi	r22, 0x04	; 4
 3c2:	71 e0       	ldi	r23, 0x01	; 1
 3c4:	86 ec       	ldi	r24, 0xC6	; 198
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	ae d1       	rcall	.+860    	; 0x726 <xTaskGenericCreate>
	xTaskCreate(LEDMatrix_Task, (signed portCHAR *) "LEDMatrix_Task", configMINIMAL_STACK_SIZE, NULL, Priority, NULL);
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	45 e5       	ldi	r20, 0x55	; 85
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	6c e0       	ldi	r22, 0x0C	; 12
 3d4:	71 e0       	ldi	r23, 0x01	; 1
 3d6:	8d e6       	ldi	r24, 0x6D	; 109
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	a5 d1       	rcall	.+842    	; 0x726 <xTaskGenericCreate>
}
 3dc:	cf 91       	pop	r28
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	bf 90       	pop	r11
 3ea:	af 90       	pop	r10
 3ec:	08 95       	ret

000003ee <main>:
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 3ee:	11 b8       	out	0x01, r1	; 1
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 3f4:	87 b9       	out	0x07, r24	; 7
 3f6:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 3f8:	8a b9       	out	0x0a, r24	; 10
 3fa:	1b b8       	out	0x0b, r1	; 11
	A2D_init();
 3fc:	53 df       	rcall	.-346    	; 0x2a4 <A2D_init>
	StartShiftPulse(1);
 3fe:	81 e0       	ldi	r24, 0x01	; 1
	vTaskStartScheduler();
 400:	cc df       	rcall	.-104    	; 0x39a <StartShiftPulse>
 402:	84 d2       	rcall	.+1288   	; 0x90c <vTaskStartScheduler>
	return 0;
}
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	08 95       	ret

0000040a <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
 40a:	31 e1       	ldi	r19, 0x11	; 17
 40c:	fc 01       	movw	r30, r24
 40e:	30 83       	st	Z, r19
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	22 e2       	ldi	r18, 0x22	; 34
 414:	20 83       	st	Z, r18
 416:	31 97       	sbiw	r30, 0x01	; 1
 418:	a3 e3       	ldi	r26, 0x33	; 51
 41a:	a0 83       	st	Z, r26
 41c:	31 97       	sbiw	r30, 0x01	; 1
 41e:	60 83       	st	Z, r22
 420:	31 97       	sbiw	r30, 0x01	; 1
 422:	70 83       	st	Z, r23
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	10 82       	st	Z, r1
 428:	31 97       	sbiw	r30, 0x01	; 1
 42a:	60 e8       	ldi	r22, 0x80	; 128
 42c:	60 83       	st	Z, r22
 42e:	31 97       	sbiw	r30, 0x01	; 1
 430:	10 82       	st	Z, r1
 432:	31 97       	sbiw	r30, 0x01	; 1
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	60 83       	st	Z, r22
 438:	31 97       	sbiw	r30, 0x01	; 1
 43a:	63 e0       	ldi	r22, 0x03	; 3
 43c:	60 83       	st	Z, r22
 43e:	31 97       	sbiw	r30, 0x01	; 1
 440:	64 e0       	ldi	r22, 0x04	; 4
 442:	60 83       	st	Z, r22
 444:	31 97       	sbiw	r30, 0x01	; 1
 446:	65 e0       	ldi	r22, 0x05	; 5
 448:	60 83       	st	Z, r22
 44a:	31 97       	sbiw	r30, 0x01	; 1
 44c:	66 e0       	ldi	r22, 0x06	; 6
 44e:	60 83       	st	Z, r22
 450:	31 97       	sbiw	r30, 0x01	; 1
 452:	67 e0       	ldi	r22, 0x07	; 7
 454:	60 83       	st	Z, r22
 456:	31 97       	sbiw	r30, 0x01	; 1
 458:	68 e0       	ldi	r22, 0x08	; 8
 45a:	60 83       	st	Z, r22
 45c:	31 97       	sbiw	r30, 0x01	; 1
 45e:	69 e0       	ldi	r22, 0x09	; 9
 460:	60 83       	st	Z, r22
 462:	31 97       	sbiw	r30, 0x01	; 1
 464:	60 e1       	ldi	r22, 0x10	; 16
 466:	60 83       	st	Z, r22
 468:	31 97       	sbiw	r30, 0x01	; 1
 46a:	30 83       	st	Z, r19
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	32 e1       	ldi	r19, 0x12	; 18
 470:	30 83       	st	Z, r19
 472:	31 97       	sbiw	r30, 0x01	; 1
 474:	33 e1       	ldi	r19, 0x13	; 19
 476:	30 83       	st	Z, r19
 478:	31 97       	sbiw	r30, 0x01	; 1
 47a:	34 e1       	ldi	r19, 0x14	; 20
 47c:	30 83       	st	Z, r19
 47e:	31 97       	sbiw	r30, 0x01	; 1
 480:	35 e1       	ldi	r19, 0x15	; 21
 482:	30 83       	st	Z, r19
 484:	31 97       	sbiw	r30, 0x01	; 1
 486:	36 e1       	ldi	r19, 0x16	; 22
 488:	30 83       	st	Z, r19
 48a:	31 97       	sbiw	r30, 0x01	; 1
 48c:	37 e1       	ldi	r19, 0x17	; 23
 48e:	30 83       	st	Z, r19
 490:	31 97       	sbiw	r30, 0x01	; 1
 492:	38 e1       	ldi	r19, 0x18	; 24
 494:	30 83       	st	Z, r19
 496:	31 97       	sbiw	r30, 0x01	; 1
 498:	39 e1       	ldi	r19, 0x19	; 25
 49a:	30 83       	st	Z, r19
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	30 e2       	ldi	r19, 0x20	; 32
 4a0:	30 83       	st	Z, r19
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	31 e2       	ldi	r19, 0x21	; 33
 4a6:	30 83       	st	Z, r19
 4a8:	31 97       	sbiw	r30, 0x01	; 1
 4aa:	20 83       	st	Z, r18
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	23 e2       	ldi	r18, 0x23	; 35
 4b0:	20 83       	st	Z, r18
 4b2:	31 97       	sbiw	r30, 0x01	; 1
 4b4:	40 83       	st	Z, r20
 4b6:	31 97       	sbiw	r30, 0x01	; 1
 4b8:	50 83       	st	Z, r21
 4ba:	31 97       	sbiw	r30, 0x01	; 1
 4bc:	26 e2       	ldi	r18, 0x26	; 38
 4be:	20 83       	st	Z, r18
 4c0:	31 97       	sbiw	r30, 0x01	; 1
 4c2:	27 e2       	ldi	r18, 0x27	; 39
 4c4:	20 83       	st	Z, r18
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	28 e2       	ldi	r18, 0x28	; 40
 4ca:	20 83       	st	Z, r18
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	29 e2       	ldi	r18, 0x29	; 41
 4d0:	20 83       	st	Z, r18
 4d2:	31 97       	sbiw	r30, 0x01	; 1
 4d4:	20 e3       	ldi	r18, 0x30	; 48
 4d6:	20 83       	st	Z, r18
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	21 e3       	ldi	r18, 0x31	; 49
 4dc:	20 83       	st	Z, r18
 4de:	86 97       	sbiw	r24, 0x26	; 38
 4e0:	08 95       	ret

000004e2 <xPortStartScheduler>:
 4e2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 4e6:	8c e7       	ldi	r24, 0x7C	; 124
 4e8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 4ec:	8b e0       	ldi	r24, 0x0B	; 11
 4ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 4f2:	ef e6       	ldi	r30, 0x6F	; 111
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	82 60       	ori	r24, 0x02	; 2
 4fa:	80 83       	st	Z, r24
 4fc:	a0 91 5c 07 	lds	r26, 0x075C	; 0x80075c <pxCurrentTCB>
 500:	b0 91 5d 07 	lds	r27, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 504:	cd 91       	ld	r28, X+
 506:	cd bf       	out	0x3d, r28	; 61
 508:	dd 91       	ld	r29, X+
 50a:	de bf       	out	0x3e, r29	; 62
 50c:	ff 91       	pop	r31
 50e:	ef 91       	pop	r30
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	bf 91       	pop	r27
 516:	af 91       	pop	r26
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	7f 91       	pop	r23
 51e:	6f 91       	pop	r22
 520:	5f 91       	pop	r21
 522:	4f 91       	pop	r20
 524:	3f 91       	pop	r19
 526:	2f 91       	pop	r18
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	df 90       	pop	r13
 532:	cf 90       	pop	r12
 534:	bf 90       	pop	r11
 536:	af 90       	pop	r10
 538:	9f 90       	pop	r9
 53a:	8f 90       	pop	r8
 53c:	7f 90       	pop	r7
 53e:	6f 90       	pop	r6
 540:	5f 90       	pop	r5
 542:	4f 90       	pop	r4
 544:	3f 90       	pop	r3
 546:	2f 90       	pop	r2
 548:	1f 90       	pop	r1
 54a:	0f 90       	pop	r0
 54c:	0f be       	out	0x3f, r0	; 63
 54e:	0f 90       	pop	r0
 550:	08 95       	ret
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	08 95       	ret

00000556 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
 556:	0f 92       	push	r0
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	0f 92       	push	r0
 55e:	1f 92       	push	r1
 560:	11 24       	eor	r1, r1
 562:	2f 92       	push	r2
 564:	3f 92       	push	r3
 566:	4f 92       	push	r4
 568:	5f 92       	push	r5
 56a:	6f 92       	push	r6
 56c:	7f 92       	push	r7
 56e:	8f 92       	push	r8
 570:	9f 92       	push	r9
 572:	af 92       	push	r10
 574:	bf 92       	push	r11
 576:	cf 92       	push	r12
 578:	df 92       	push	r13
 57a:	ef 92       	push	r14
 57c:	ff 92       	push	r15
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	2f 93       	push	r18
 584:	3f 93       	push	r19
 586:	4f 93       	push	r20
 588:	5f 93       	push	r21
 58a:	6f 93       	push	r22
 58c:	7f 93       	push	r23
 58e:	8f 93       	push	r24
 590:	9f 93       	push	r25
 592:	af 93       	push	r26
 594:	bf 93       	push	r27
 596:	cf 93       	push	r28
 598:	df 93       	push	r29
 59a:	ef 93       	push	r30
 59c:	ff 93       	push	r31
 59e:	a0 91 5c 07 	lds	r26, 0x075C	; 0x80075c <pxCurrentTCB>
 5a2:	b0 91 5d 07 	lds	r27, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 5a6:	0d b6       	in	r0, 0x3d	; 61
 5a8:	0d 92       	st	X+, r0
 5aa:	0e b6       	in	r0, 0x3e	; 62
 5ac:	0d 92       	st	X+, r0
	vTaskSwitchContext();
 5ae:	70 d3       	rcall	.+1760   	; 0xc90 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
 5b0:	a0 91 5c 07 	lds	r26, 0x075C	; 0x80075c <pxCurrentTCB>
 5b4:	b0 91 5d 07 	lds	r27, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 5b8:	cd 91       	ld	r28, X+
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	dd 91       	ld	r29, X+
 5be:	de bf       	out	0x3e, r29	; 62
 5c0:	ff 91       	pop	r31
 5c2:	ef 91       	pop	r30
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	bf 91       	pop	r27
 5ca:	af 91       	pop	r26
 5cc:	9f 91       	pop	r25
 5ce:	8f 91       	pop	r24
 5d0:	7f 91       	pop	r23
 5d2:	6f 91       	pop	r22
 5d4:	5f 91       	pop	r21
 5d6:	4f 91       	pop	r20
 5d8:	3f 91       	pop	r19
 5da:	2f 91       	pop	r18
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	ff 90       	pop	r15
 5e2:	ef 90       	pop	r14
 5e4:	df 90       	pop	r13
 5e6:	cf 90       	pop	r12
 5e8:	bf 90       	pop	r11
 5ea:	af 90       	pop	r10
 5ec:	9f 90       	pop	r9
 5ee:	8f 90       	pop	r8
 5f0:	7f 90       	pop	r7
 5f2:	6f 90       	pop	r6
 5f4:	5f 90       	pop	r5
 5f6:	4f 90       	pop	r4
 5f8:	3f 90       	pop	r3
 5fa:	2f 90       	pop	r2
 5fc:	1f 90       	pop	r1
 5fe:	0f 90       	pop	r0
 600:	0f be       	out	0x3f, r0	; 63
 602:	0f 90       	pop	r0

	asm volatile ( "ret" );
 604:	08 95       	ret

00000606 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
 606:	0f 92       	push	r0
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	0f 92       	push	r0
 60e:	1f 92       	push	r1
 610:	11 24       	eor	r1, r1
 612:	2f 92       	push	r2
 614:	3f 92       	push	r3
 616:	4f 92       	push	r4
 618:	5f 92       	push	r5
 61a:	6f 92       	push	r6
 61c:	7f 92       	push	r7
 61e:	8f 92       	push	r8
 620:	9f 92       	push	r9
 622:	af 92       	push	r10
 624:	bf 92       	push	r11
 626:	cf 92       	push	r12
 628:	df 92       	push	r13
 62a:	ef 92       	push	r14
 62c:	ff 92       	push	r15
 62e:	0f 93       	push	r16
 630:	1f 93       	push	r17
 632:	2f 93       	push	r18
 634:	3f 93       	push	r19
 636:	4f 93       	push	r20
 638:	5f 93       	push	r21
 63a:	6f 93       	push	r22
 63c:	7f 93       	push	r23
 63e:	8f 93       	push	r24
 640:	9f 93       	push	r25
 642:	af 93       	push	r26
 644:	bf 93       	push	r27
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
 64a:	ef 93       	push	r30
 64c:	ff 93       	push	r31
 64e:	a0 91 5c 07 	lds	r26, 0x075C	; 0x80075c <pxCurrentTCB>
 652:	b0 91 5d 07 	lds	r27, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 656:	0d b6       	in	r0, 0x3d	; 61
 658:	0d 92       	st	X+, r0
 65a:	0e b6       	in	r0, 0x3e	; 62
 65c:	0d 92       	st	X+, r0
	vTaskIncrementTick();
 65e:	85 d1       	rcall	.+778    	; 0x96a <vTaskIncrementTick>
	vTaskSwitchContext();
 660:	17 d3       	rcall	.+1582   	; 0xc90 <vTaskSwitchContext>
 662:	a0 91 5c 07 	lds	r26, 0x075C	; 0x80075c <pxCurrentTCB>
	portRESTORE_CONTEXT();
 666:	b0 91 5d 07 	lds	r27, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 66a:	cd 91       	ld	r28, X+
 66c:	cd bf       	out	0x3d, r28	; 61
 66e:	dd 91       	ld	r29, X+
 670:	de bf       	out	0x3e, r29	; 62
 672:	ff 91       	pop	r31
 674:	ef 91       	pop	r30
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	df 90       	pop	r13
 698:	cf 90       	pop	r12
 69a:	bf 90       	pop	r11
 69c:	af 90       	pop	r10
 69e:	9f 90       	pop	r9
 6a0:	8f 90       	pop	r8
 6a2:	7f 90       	pop	r7
 6a4:	6f 90       	pop	r6
 6a6:	5f 90       	pop	r5
 6a8:	4f 90       	pop	r4
 6aa:	3f 90       	pop	r3
 6ac:	2f 90       	pop	r2
 6ae:	1f 90       	pop	r1
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	08 95       	ret

000006b8 <__vector_13>:

	asm volatile ( "ret" );
 6b8:	a6 df       	rcall	.-180    	; 0x606 <vPortYieldFromTick>
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
		asm volatile ( "reti" );
 6ba:	18 95       	reti

000006bc <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	ec 01       	movw	r28, r24
 6c2:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxCurrentTCB>
 6c6:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 6ca:	93 83       	std	Z+3, r25	; 0x03
 6cc:	82 83       	std	Z+2, r24	; 0x02
 6ce:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <xTickCount>
 6d2:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <xTickCount+0x1>
 6d6:	c8 17       	cp	r28, r24
 6d8:	d9 07       	cpc	r29, r25
 6da:	60 f4       	brcc	.+24     	; 0x6f4 <prvAddCurrentTaskToDelayedList+0x38>
 6dc:	60 91 5c 07 	lds	r22, 0x075C	; 0x80075c <pxCurrentTCB>
 6e0:	70 91 5d 07 	lds	r23, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 6e4:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <pxOverflowDelayedTaskList>
 6e8:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <pxOverflowDelayedTaskList+0x1>
 6ec:	6e 5f       	subi	r22, 0xFE	; 254
 6ee:	7f 4f       	sbci	r23, 0xFF	; 255
 6f0:	49 dd       	rcall	.-1390   	; 0x184 <vListInsert>
 6f2:	16 c0       	rjmp	.+44     	; 0x720 <prvAddCurrentTaskToDelayedList+0x64>
 6f4:	60 91 5c 07 	lds	r22, 0x075C	; 0x80075c <pxCurrentTCB>
 6f8:	70 91 5d 07 	lds	r23, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 6fc:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <pxDelayedTaskList>
 700:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 704:	6e 5f       	subi	r22, 0xFE	; 254
 706:	7f 4f       	sbci	r23, 0xFF	; 255
 708:	3d dd       	rcall	.-1414   	; 0x184 <vListInsert>
 70a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
 70e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
 712:	c8 17       	cp	r28, r24
 714:	d9 07       	cpc	r29, r25
 716:	20 f4       	brcc	.+8      	; 0x720 <prvAddCurrentTaskToDelayedList+0x64>
 718:	d0 93 03 01 	sts	0x0103, r29	; 0x800103 <xNextTaskUnblockTime+0x1>
 71c:	c0 93 02 01 	sts	0x0102, r28	; 0x800102 <xNextTaskUnblockTime>
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <xTaskGenericCreate>:
 726:	4f 92       	push	r4
 728:	5f 92       	push	r5
 72a:	6f 92       	push	r6
 72c:	7f 92       	push	r7
 72e:	8f 92       	push	r8
 730:	9f 92       	push	r9
 732:	af 92       	push	r10
 734:	bf 92       	push	r11
 736:	cf 92       	push	r12
 738:	df 92       	push	r13
 73a:	ef 92       	push	r14
 73c:	ff 92       	push	r15
 73e:	0f 93       	push	r16
 740:	1f 93       	push	r17
 742:	cf 93       	push	r28
 744:	df 93       	push	r29
 746:	5c 01       	movw	r10, r24
 748:	4b 01       	movw	r8, r22
 74a:	3a 01       	movw	r6, r20
 74c:	29 01       	movw	r4, r18
 74e:	81 e2       	ldi	r24, 0x21	; 33
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	ba dc       	rcall	.-1676   	; 0xc8 <pvPortMalloc>
 754:	ec 01       	movw	r28, r24
 756:	89 2b       	or	r24, r25
 758:	09 f4       	brne	.+2      	; 0x75c <xTaskGenericCreate+0x36>
 75a:	c6 c0       	rjmp	.+396    	; 0x8e8 <xTaskGenericCreate+0x1c2>
 75c:	c1 14       	cp	r12, r1
 75e:	d1 04       	cpc	r13, r1
 760:	09 f0       	breq	.+2      	; 0x764 <xTaskGenericCreate+0x3e>
 762:	be c0       	rjmp	.+380    	; 0x8e0 <xTaskGenericCreate+0x1ba>
 764:	c3 01       	movw	r24, r6
 766:	b0 dc       	rcall	.-1696   	; 0xc8 <pvPortMalloc>
 768:	98 8f       	std	Y+24, r25	; 0x18
 76a:	8f 8b       	std	Y+23, r24	; 0x17
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	19 f4       	brne	.+6      	; 0x776 <xTaskGenericCreate+0x50>
 770:	ce 01       	movw	r24, r28
 772:	ce dc       	rcall	.-1636   	; 0x110 <vPortFree>
 774:	b9 c0       	rjmp	.+370    	; 0x8e8 <xTaskGenericCreate+0x1c2>
 776:	a3 01       	movw	r20, r6
 778:	65 ea       	ldi	r22, 0xA5	; 165
 77a:	70 e0       	ldi	r23, 0x00	; 0
 77c:	f5 d2       	rcall	.+1514   	; 0xd68 <memset>
 77e:	93 01       	movw	r18, r6
 780:	21 50       	subi	r18, 0x01	; 1
 782:	31 09       	sbc	r19, r1
 784:	8f 89       	ldd	r24, Y+23	; 0x17
 786:	98 8d       	ldd	r25, Y+24	; 0x18
 788:	3c 01       	movw	r6, r24
 78a:	62 0e       	add	r6, r18
 78c:	73 1e       	adc	r7, r19
 78e:	48 e0       	ldi	r20, 0x08	; 8
 790:	50 e0       	ldi	r21, 0x00	; 0
 792:	b4 01       	movw	r22, r8
 794:	ce 01       	movw	r24, r28
 796:	49 96       	adiw	r24, 0x19	; 25
 798:	ee d2       	rcall	.+1500   	; 0xd76 <strncpy>
 79a:	18 a2       	std	Y+32, r1	; 0x20
 79c:	10 2f       	mov	r17, r16
 79e:	04 30       	cpi	r16, 0x04	; 4
 7a0:	08 f0       	brcs	.+2      	; 0x7a4 <xTaskGenericCreate+0x7e>
 7a2:	13 e0       	ldi	r17, 0x03	; 3
 7a4:	1e 8b       	std	Y+22, r17	; 0x16
 7a6:	6e 01       	movw	r12, r28
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	c8 0e       	add	r12, r24
 7ac:	d1 1c       	adc	r13, r1
 7ae:	c6 01       	movw	r24, r12
 7b0:	be dc       	rcall	.-1668   	; 0x12e <vListInitialiseItem>
 7b2:	ce 01       	movw	r24, r28
 7b4:	0c 96       	adiw	r24, 0x0c	; 12
 7b6:	bb dc       	rcall	.-1674   	; 0x12e <vListInitialiseItem>
 7b8:	d9 87       	std	Y+9, r29	; 0x09
 7ba:	c8 87       	std	Y+8, r28	; 0x08
 7bc:	84 e0       	ldi	r24, 0x04	; 4
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	81 1b       	sub	r24, r17
 7c2:	91 09       	sbc	r25, r1
 7c4:	9d 87       	std	Y+13, r25	; 0x0d
 7c6:	8c 87       	std	Y+12, r24	; 0x0c
 7c8:	db 8b       	std	Y+19, r29	; 0x13
 7ca:	ca 8b       	std	Y+18, r28	; 0x12
 7cc:	a2 01       	movw	r20, r4
 7ce:	b5 01       	movw	r22, r10
 7d0:	c3 01       	movw	r24, r6
 7d2:	1b de       	rcall	.-970    	; 0x40a <pxPortInitialiseStack>
 7d4:	99 83       	std	Y+1, r25	; 0x01
 7d6:	88 83       	st	Y, r24
 7d8:	e1 14       	cp	r14, r1
 7da:	f1 04       	cpc	r15, r1
 7dc:	19 f0       	breq	.+6      	; 0x7e4 <xTaskGenericCreate+0xbe>
 7de:	f7 01       	movw	r30, r14
 7e0:	d1 83       	std	Z+1, r29	; 0x01
 7e2:	c0 83       	st	Z, r28
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	f8 94       	cli
 7e8:	0f 92       	push	r0
 7ea:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxCurrentNumberOfTasks>
 7ee:	8f 5f       	subi	r24, 0xFF	; 255
 7f0:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxCurrentNumberOfTasks>
 7f4:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <pxCurrentTCB>
 7f8:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 7fc:	89 2b       	or	r24, r25
 7fe:	69 f5       	brne	.+90     	; 0x85a <xTaskGenericCreate+0x134>
 800:	d0 93 5d 07 	sts	0x075D, r29	; 0x80075d <pxCurrentTCB+0x1>
 804:	c0 93 5c 07 	sts	0x075C, r28	; 0x80075c <pxCurrentTCB>
 808:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxCurrentNumberOfTasks>
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	a1 f5       	brne	.+104    	; 0x878 <xTaskGenericCreate+0x152>
 810:	88 e3       	ldi	r24, 0x38	; 56
 812:	97 e0       	ldi	r25, 0x07	; 7
 814:	7e dc       	rcall	.-1796   	; 0x112 <vListInitialise>
 816:	81 e4       	ldi	r24, 0x41	; 65
 818:	97 e0       	ldi	r25, 0x07	; 7
 81a:	7b dc       	rcall	.-1802   	; 0x112 <vListInitialise>
 81c:	8a e4       	ldi	r24, 0x4A	; 74
 81e:	97 e0       	ldi	r25, 0x07	; 7
 820:	78 dc       	rcall	.-1808   	; 0x112 <vListInitialise>
 822:	83 e5       	ldi	r24, 0x53	; 83
 824:	97 e0       	ldi	r25, 0x07	; 7
 826:	75 dc       	rcall	.-1814   	; 0x112 <vListInitialise>
 828:	8f e2       	ldi	r24, 0x2F	; 47
 82a:	97 e0       	ldi	r25, 0x07	; 7
 82c:	72 dc       	rcall	.-1820   	; 0x112 <vListInitialise>
 82e:	86 e2       	ldi	r24, 0x26	; 38
 830:	97 e0       	ldi	r25, 0x07	; 7
 832:	6f dc       	rcall	.-1826   	; 0x112 <vListInitialise>
 834:	89 e1       	ldi	r24, 0x19	; 25
 836:	97 e0       	ldi	r25, 0x07	; 7
 838:	6c dc       	rcall	.-1832   	; 0x112 <vListInitialise>
 83a:	80 e1       	ldi	r24, 0x10	; 16
 83c:	97 e0       	ldi	r25, 0x07	; 7
 83e:	69 dc       	rcall	.-1838   	; 0x112 <vListInitialise>
 840:	8f e2       	ldi	r24, 0x2F	; 47
 842:	97 e0       	ldi	r25, 0x07	; 7
 844:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <pxDelayedTaskList+0x1>
 848:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <pxDelayedTaskList>
 84c:	86 e2       	ldi	r24, 0x26	; 38
 84e:	97 e0       	ldi	r25, 0x07	; 7
 850:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <pxOverflowDelayedTaskList+0x1>
 854:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <pxOverflowDelayedTaskList>
 858:	0f c0       	rjmp	.+30     	; 0x878 <xTaskGenericCreate+0x152>
 85a:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xSchedulerRunning>
 85e:	81 11       	cpse	r24, r1
 860:	0b c0       	rjmp	.+22     	; 0x878 <xTaskGenericCreate+0x152>
 862:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxCurrentTCB>
 866:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 86a:	86 89       	ldd	r24, Z+22	; 0x16
 86c:	08 17       	cp	r16, r24
 86e:	20 f0       	brcs	.+8      	; 0x878 <xTaskGenericCreate+0x152>
 870:	d0 93 5d 07 	sts	0x075D, r29	; 0x80075d <pxCurrentTCB+0x1>
 874:	c0 93 5c 07 	sts	0x075C, r28	; 0x80075c <pxCurrentTCB>
 878:	8e 89       	ldd	r24, Y+22	; 0x16
 87a:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <uxTopUsedPriority>
 87e:	98 17       	cp	r25, r24
 880:	10 f4       	brcc	.+4      	; 0x886 <xTaskGenericCreate+0x160>
 882:	80 93 0b 07 	sts	0x070B, r24	; 0x80070b <uxTopUsedPriority>
 886:	90 91 04 07 	lds	r25, 0x0704	; 0x800704 <uxTaskNumber>
 88a:	9f 5f       	subi	r25, 0xFF	; 255
 88c:	90 93 04 07 	sts	0x0704, r25	; 0x800704 <uxTaskNumber>
 890:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTopReadyPriority>
 894:	98 17       	cp	r25, r24
 896:	10 f4       	brcc	.+4      	; 0x89c <xTaskGenericCreate+0x176>
 898:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopReadyPriority>
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	9c 01       	movw	r18, r24
 8a0:	22 0f       	add	r18, r18
 8a2:	33 1f       	adc	r19, r19
 8a4:	22 0f       	add	r18, r18
 8a6:	33 1f       	adc	r19, r19
 8a8:	22 0f       	add	r18, r18
 8aa:	33 1f       	adc	r19, r19
 8ac:	82 0f       	add	r24, r18
 8ae:	93 1f       	adc	r25, r19
 8b0:	b6 01       	movw	r22, r12
 8b2:	88 5c       	subi	r24, 0xC8	; 200
 8b4:	98 4f       	sbci	r25, 0xF8	; 248
 8b6:	3f dc       	rcall	.-1922   	; 0x136 <vListInsertEnd>
 8b8:	0f 90       	pop	r0
 8ba:	0f be       	out	0x3f, r0	; 63
 8bc:	80 91 09 07 	lds	r24, 0x0709	; 0x800709 <xSchedulerRunning>
 8c0:	88 23       	and	r24, r24
 8c2:	51 f0       	breq	.+20     	; 0x8d8 <xTaskGenericCreate+0x1b2>
 8c4:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxCurrentTCB>
 8c8:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 8cc:	86 89       	ldd	r24, Z+22	; 0x16
 8ce:	80 17       	cp	r24, r16
 8d0:	28 f4       	brcc	.+10     	; 0x8dc <xTaskGenericCreate+0x1b6>
 8d2:	41 de       	rcall	.-894    	; 0x556 <vPortYield>
 8d4:	81 e0       	ldi	r24, 0x01	; 1
 8d6:	09 c0       	rjmp	.+18     	; 0x8ea <xTaskGenericCreate+0x1c4>
 8d8:	81 e0       	ldi	r24, 0x01	; 1
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <xTaskGenericCreate+0x1c4>
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	05 c0       	rjmp	.+10     	; 0x8ea <xTaskGenericCreate+0x1c4>
 8e0:	d8 8e       	std	Y+24, r13	; 0x18
 8e2:	cf 8a       	std	Y+23, r12	; 0x17
 8e4:	c6 01       	movw	r24, r12
 8e6:	47 cf       	rjmp	.-370    	; 0x776 <xTaskGenericCreate+0x50>
 8e8:	8f ef       	ldi	r24, 0xFF	; 255
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	1f 91       	pop	r17
 8f0:	0f 91       	pop	r16
 8f2:	ff 90       	pop	r15
 8f4:	ef 90       	pop	r14
 8f6:	df 90       	pop	r13
 8f8:	cf 90       	pop	r12
 8fa:	bf 90       	pop	r11
 8fc:	af 90       	pop	r10
 8fe:	9f 90       	pop	r9
 900:	8f 90       	pop	r8
 902:	7f 90       	pop	r7
 904:	6f 90       	pop	r6
 906:	5f 90       	pop	r5
 908:	4f 90       	pop	r4
 90a:	08 95       	ret

0000090c <vTaskStartScheduler>:
 90c:	af 92       	push	r10
 90e:	bf 92       	push	r11
 910:	cf 92       	push	r12
 912:	df 92       	push	r13
 914:	ef 92       	push	r14
 916:	ff 92       	push	r15
 918:	0f 93       	push	r16
 91a:	a1 2c       	mov	r10, r1
 91c:	b1 2c       	mov	r11, r1
 91e:	c1 2c       	mov	r12, r1
 920:	d1 2c       	mov	r13, r1
 922:	e1 2c       	mov	r14, r1
 924:	f1 2c       	mov	r15, r1
 926:	00 e0       	ldi	r16, 0x00	; 0
 928:	20 e0       	ldi	r18, 0x00	; 0
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	45 e5       	ldi	r20, 0x55	; 85
 92e:	50 e0       	ldi	r21, 0x00	; 0
 930:	6b e1       	ldi	r22, 0x1B	; 27
 932:	71 e0       	ldi	r23, 0x01	; 1
 934:	82 e1       	ldi	r24, 0x12	; 18
 936:	96 e0       	ldi	r25, 0x06	; 6
 938:	f6 de       	rcall	.-532    	; 0x726 <xTaskGenericCreate>
 93a:	81 30       	cpi	r24, 0x01	; 1
 93c:	41 f4       	brne	.+16     	; 0x94e <vTaskStartScheduler+0x42>
 93e:	f8 94       	cli
 940:	80 93 09 07 	sts	0x0709, r24	; 0x800709 <xSchedulerRunning>
 944:	10 92 0d 07 	sts	0x070D, r1	; 0x80070d <xTickCount+0x1>
 948:	10 92 0c 07 	sts	0x070C, r1	; 0x80070c <xTickCount>
 94c:	ca dd       	rcall	.-1132   	; 0x4e2 <xPortStartScheduler>
 94e:	0f 91       	pop	r16
 950:	ff 90       	pop	r15
 952:	ef 90       	pop	r14
 954:	df 90       	pop	r13
 956:	cf 90       	pop	r12
 958:	bf 90       	pop	r11
 95a:	af 90       	pop	r10
 95c:	08 95       	ret

0000095e <vTaskSuspendAll>:
 95e:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxSchedulerSuspended>
 962:	8f 5f       	subi	r24, 0xFF	; 255
 964:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <uxSchedulerSuspended>
 968:	08 95       	ret

0000096a <vTaskIncrementTick>:
 96a:	0f 93       	push	r16
 96c:	1f 93       	push	r17
 96e:	cf 93       	push	r28
 970:	df 93       	push	r29
 972:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxSchedulerSuspended>
 976:	81 11       	cpse	r24, r1
 978:	af c0       	rjmp	.+350    	; 0xad8 <vTaskIncrementTick+0x16e>
 97a:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <xTickCount>
 97e:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <xTickCount+0x1>
 982:	01 96       	adiw	r24, 0x01	; 1
 984:	90 93 0d 07 	sts	0x070D, r25	; 0x80070d <xTickCount+0x1>
 988:	80 93 0c 07 	sts	0x070C, r24	; 0x80070c <xTickCount>
 98c:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <xTickCount>
 990:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <xTickCount+0x1>
 994:	89 2b       	or	r24, r25
 996:	99 f5       	brne	.+102    	; 0x9fe <vTaskIncrementTick+0x94>
 998:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <pxDelayedTaskList>
 99c:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 9a0:	20 91 22 07 	lds	r18, 0x0722	; 0x800722 <pxOverflowDelayedTaskList>
 9a4:	30 91 23 07 	lds	r19, 0x0723	; 0x800723 <pxOverflowDelayedTaskList+0x1>
 9a8:	30 93 25 07 	sts	0x0725, r19	; 0x800725 <pxDelayedTaskList+0x1>
 9ac:	20 93 24 07 	sts	0x0724, r18	; 0x800724 <pxDelayedTaskList>
 9b0:	90 93 23 07 	sts	0x0723, r25	; 0x800723 <pxOverflowDelayedTaskList+0x1>
 9b4:	80 93 22 07 	sts	0x0722, r24	; 0x800722 <pxOverflowDelayedTaskList>
 9b8:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <xNumOfOverflows>
 9bc:	8f 5f       	subi	r24, 0xFF	; 255
 9be:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <xNumOfOverflows>
 9c2:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <pxDelayedTaskList>
 9c6:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 9ca:	80 81       	ld	r24, Z
 9cc:	81 11       	cpse	r24, r1
 9ce:	07 c0       	rjmp	.+14     	; 0x9de <vTaskIncrementTick+0x74>
 9d0:	8f ef       	ldi	r24, 0xFF	; 255
 9d2:	9f ef       	ldi	r25, 0xFF	; 255
 9d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 9d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 9dc:	10 c0       	rjmp	.+32     	; 0x9fe <vTaskIncrementTick+0x94>
 9de:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <pxDelayedTaskList>
 9e2:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 9e6:	05 80       	ldd	r0, Z+5	; 0x05
 9e8:	f6 81       	ldd	r31, Z+6	; 0x06
 9ea:	e0 2d       	mov	r30, r0
 9ec:	06 80       	ldd	r0, Z+6	; 0x06
 9ee:	f7 81       	ldd	r31, Z+7	; 0x07
 9f0:	e0 2d       	mov	r30, r0
 9f2:	82 81       	ldd	r24, Z+2	; 0x02
 9f4:	93 81       	ldd	r25, Z+3	; 0x03
 9f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 9fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 9fe:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <xTickCount>
 a02:	30 91 0d 07 	lds	r19, 0x070D	; 0x80070d <xTickCount+0x1>
 a06:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <xNextTaskUnblockTime>
 a0a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <xNextTaskUnblockTime+0x1>
 a0e:	28 17       	cp	r18, r24
 a10:	39 07       	cpc	r19, r25
 a12:	08 f4       	brcc	.+2      	; 0xa16 <vTaskIncrementTick+0xac>
 a14:	66 c0       	rjmp	.+204    	; 0xae2 <vTaskIncrementTick+0x178>
 a16:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <pxDelayedTaskList>
 a1a:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 a1e:	80 81       	ld	r24, Z
 a20:	88 23       	and	r24, r24
 a22:	99 f0       	breq	.+38     	; 0xa4a <vTaskIncrementTick+0xe0>
 a24:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <pxDelayedTaskList>
 a28:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 a2c:	05 80       	ldd	r0, Z+5	; 0x05
 a2e:	f6 81       	ldd	r31, Z+6	; 0x06
 a30:	e0 2d       	mov	r30, r0
 a32:	c6 81       	ldd	r28, Z+6	; 0x06
 a34:	d7 81       	ldd	r29, Z+7	; 0x07
 a36:	8a 81       	ldd	r24, Y+2	; 0x02
 a38:	9b 81       	ldd	r25, Y+3	; 0x03
 a3a:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <xTickCount>
 a3e:	30 91 0d 07 	lds	r19, 0x070D	; 0x80070d <xTickCount+0x1>
 a42:	28 17       	cp	r18, r24
 a44:	39 07       	cpc	r19, r25
 a46:	f8 f4       	brcc	.+62     	; 0xa86 <vTaskIncrementTick+0x11c>
 a48:	19 c0       	rjmp	.+50     	; 0xa7c <vTaskIncrementTick+0x112>
 a4a:	8f ef       	ldi	r24, 0xFF	; 255
 a4c:	9f ef       	ldi	r25, 0xFF	; 255
 a4e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 a52:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 a56:	45 c0       	rjmp	.+138    	; 0xae2 <vTaskIncrementTick+0x178>
 a58:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <pxDelayedTaskList>
 a5c:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 a60:	05 80       	ldd	r0, Z+5	; 0x05
 a62:	f6 81       	ldd	r31, Z+6	; 0x06
 a64:	e0 2d       	mov	r30, r0
 a66:	c6 81       	ldd	r28, Z+6	; 0x06
 a68:	d7 81       	ldd	r29, Z+7	; 0x07
 a6a:	8a 81       	ldd	r24, Y+2	; 0x02
 a6c:	9b 81       	ldd	r25, Y+3	; 0x03
 a6e:	20 91 0c 07 	lds	r18, 0x070C	; 0x80070c <xTickCount>
 a72:	30 91 0d 07 	lds	r19, 0x070D	; 0x80070d <xTickCount+0x1>
 a76:	28 17       	cp	r18, r24
 a78:	39 07       	cpc	r19, r25
 a7a:	28 f4       	brcc	.+10     	; 0xa86 <vTaskIncrementTick+0x11c>
 a7c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <xNextTaskUnblockTime+0x1>
 a80:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <xNextTaskUnblockTime>
 a84:	2e c0       	rjmp	.+92     	; 0xae2 <vTaskIncrementTick+0x178>
 a86:	8e 01       	movw	r16, r28
 a88:	0e 5f       	subi	r16, 0xFE	; 254
 a8a:	1f 4f       	sbci	r17, 0xFF	; 255
 a8c:	c8 01       	movw	r24, r16
 a8e:	b5 db       	rcall	.-2198   	; 0x1fa <vListRemove>
 a90:	8c 89       	ldd	r24, Y+20	; 0x14
 a92:	9d 89       	ldd	r25, Y+21	; 0x15
 a94:	89 2b       	or	r24, r25
 a96:	19 f0       	breq	.+6      	; 0xa9e <vTaskIncrementTick+0x134>
 a98:	ce 01       	movw	r24, r28
 a9a:	0c 96       	adiw	r24, 0x0c	; 12
 a9c:	ae db       	rcall	.-2212   	; 0x1fa <vListRemove>
 a9e:	8e 89       	ldd	r24, Y+22	; 0x16
 aa0:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTopReadyPriority>
 aa4:	98 17       	cp	r25, r24
 aa6:	10 f4       	brcc	.+4      	; 0xaac <vTaskIncrementTick+0x142>
 aa8:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopReadyPriority>
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	9c 01       	movw	r18, r24
 ab0:	22 0f       	add	r18, r18
 ab2:	33 1f       	adc	r19, r19
 ab4:	22 0f       	add	r18, r18
 ab6:	33 1f       	adc	r19, r19
 ab8:	22 0f       	add	r18, r18
 aba:	33 1f       	adc	r19, r19
 abc:	82 0f       	add	r24, r18
 abe:	93 1f       	adc	r25, r19
 ac0:	b8 01       	movw	r22, r16
 ac2:	88 5c       	subi	r24, 0xC8	; 200
 ac4:	98 4f       	sbci	r25, 0xF8	; 248
 ac6:	37 db       	rcall	.-2450   	; 0x136 <vListInsertEnd>
 ac8:	e0 91 24 07 	lds	r30, 0x0724	; 0x800724 <pxDelayedTaskList>
 acc:	f0 91 25 07 	lds	r31, 0x0725	; 0x800725 <pxDelayedTaskList+0x1>
 ad0:	80 81       	ld	r24, Z
 ad2:	81 11       	cpse	r24, r1
 ad4:	c1 cf       	rjmp	.-126    	; 0xa58 <vTaskIncrementTick+0xee>
 ad6:	b9 cf       	rjmp	.-142    	; 0xa4a <vTaskIncrementTick+0xe0>
 ad8:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxMissedTicks>
 adc:	8f 5f       	subi	r24, 0xFF	; 255
 ade:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxMissedTicks>
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	1f 91       	pop	r17
 ae8:	0f 91       	pop	r16
 aea:	08 95       	ret

00000aec <xTaskResumeAll>:
 aec:	cf 92       	push	r12
 aee:	df 92       	push	r13
 af0:	ef 92       	push	r14
 af2:	ff 92       	push	r15
 af4:	0f 93       	push	r16
 af6:	1f 93       	push	r17
 af8:	cf 93       	push	r28
 afa:	df 93       	push	r29
 afc:	0f b6       	in	r0, 0x3f	; 63
 afe:	f8 94       	cli
 b00:	0f 92       	push	r0
 b02:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxSchedulerSuspended>
 b06:	81 50       	subi	r24, 0x01	; 1
 b08:	80 93 08 07 	sts	0x0708, r24	; 0x800708 <uxSchedulerSuspended>
 b0c:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxSchedulerSuspended>
 b10:	81 11       	cpse	r24, r1
 b12:	5f c0       	rjmp	.+190    	; 0xbd2 <xTaskResumeAll+0xe6>
 b14:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxCurrentNumberOfTasks>
 b18:	81 11       	cpse	r24, r1
 b1a:	2f c0       	rjmp	.+94     	; 0xb7a <xTaskResumeAll+0x8e>
 b1c:	5d c0       	rjmp	.+186    	; 0xbd8 <xTaskResumeAll+0xec>
 b1e:	d7 01       	movw	r26, r14
 b20:	15 96       	adiw	r26, 0x05	; 5
 b22:	ed 91       	ld	r30, X+
 b24:	fc 91       	ld	r31, X
 b26:	16 97       	sbiw	r26, 0x06	; 6
 b28:	c6 81       	ldd	r28, Z+6	; 0x06
 b2a:	d7 81       	ldd	r29, Z+7	; 0x07
 b2c:	ce 01       	movw	r24, r28
 b2e:	0c 96       	adiw	r24, 0x0c	; 12
 b30:	64 db       	rcall	.-2360   	; 0x1fa <vListRemove>
 b32:	8e 01       	movw	r16, r28
 b34:	0e 5f       	subi	r16, 0xFE	; 254
 b36:	1f 4f       	sbci	r17, 0xFF	; 255
 b38:	c8 01       	movw	r24, r16
 b3a:	5f db       	rcall	.-2370   	; 0x1fa <vListRemove>
 b3c:	8e 89       	ldd	r24, Y+22	; 0x16
 b3e:	90 91 0a 07 	lds	r25, 0x070A	; 0x80070a <uxTopReadyPriority>
 b42:	98 17       	cp	r25, r24
 b44:	10 f4       	brcc	.+4      	; 0xb4a <xTaskResumeAll+0x5e>
 b46:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopReadyPriority>
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	9c 01       	movw	r18, r24
 b4e:	22 0f       	add	r18, r18
 b50:	33 1f       	adc	r19, r19
 b52:	22 0f       	add	r18, r18
 b54:	33 1f       	adc	r19, r19
 b56:	22 0f       	add	r18, r18
 b58:	33 1f       	adc	r19, r19
 b5a:	82 0f       	add	r24, r18
 b5c:	93 1f       	adc	r25, r19
 b5e:	b8 01       	movw	r22, r16
 b60:	88 5c       	subi	r24, 0xC8	; 200
 b62:	98 4f       	sbci	r25, 0xF8	; 248
 b64:	e8 da       	rcall	.-2608   	; 0x136 <vListInsertEnd>
 b66:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <pxCurrentTCB>
 b6a:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 b6e:	9e 89       	ldd	r25, Y+22	; 0x16
 b70:	86 89       	ldd	r24, Z+22	; 0x16
 b72:	98 17       	cp	r25, r24
 b74:	58 f0       	brcs	.+22     	; 0xb8c <xTaskResumeAll+0xa0>
 b76:	dc 2c       	mov	r13, r12
 b78:	09 c0       	rjmp	.+18     	; 0xb8c <xTaskResumeAll+0xa0>
 b7a:	d1 2c       	mov	r13, r1
 b7c:	0f 2e       	mov	r0, r31
 b7e:	f9 e1       	ldi	r31, 0x19	; 25
 b80:	ef 2e       	mov	r14, r31
 b82:	f7 e0       	ldi	r31, 0x07	; 7
 b84:	ff 2e       	mov	r15, r31
 b86:	f0 2d       	mov	r31, r0
 b88:	cc 24       	eor	r12, r12
 b8a:	c3 94       	inc	r12
 b8c:	f7 01       	movw	r30, r14
 b8e:	80 81       	ld	r24, Z
 b90:	81 11       	cpse	r24, r1
 b92:	c5 cf       	rjmp	.-118    	; 0xb1e <xTaskResumeAll+0x32>
 b94:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxMissedTicks>
 b98:	88 23       	and	r24, r24
 b9a:	79 f0       	breq	.+30     	; 0xbba <xTaskResumeAll+0xce>
 b9c:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxMissedTicks>
 ba0:	88 23       	and	r24, r24
 ba2:	91 f0       	breq	.+36     	; 0xbc8 <xTaskResumeAll+0xdc>
 ba4:	e2 de       	rcall	.-572    	; 0x96a <vTaskIncrementTick>
 ba6:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxMissedTicks>
 baa:	81 50       	subi	r24, 0x01	; 1
 bac:	80 93 07 07 	sts	0x0707, r24	; 0x800707 <uxMissedTicks>
 bb0:	80 91 07 07 	lds	r24, 0x0707	; 0x800707 <uxMissedTicks>
 bb4:	81 11       	cpse	r24, r1
 bb6:	f6 cf       	rjmp	.-20     	; 0xba4 <xTaskResumeAll+0xb8>
 bb8:	07 c0       	rjmp	.+14     	; 0xbc8 <xTaskResumeAll+0xdc>
 bba:	f1 e0       	ldi	r31, 0x01	; 1
 bbc:	df 16       	cp	r13, r31
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <xTaskResumeAll+0xdc>
 bc0:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <xMissedYield>
 bc4:	81 30       	cpi	r24, 0x01	; 1
 bc6:	39 f4       	brne	.+14     	; 0xbd6 <xTaskResumeAll+0xea>
 bc8:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <xMissedYield>
 bcc:	c4 dc       	rcall	.-1656   	; 0x556 <vPortYield>
 bce:	81 e0       	ldi	r24, 0x01	; 1
 bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <xTaskResumeAll+0xec>
 bd2:	80 e0       	ldi	r24, 0x00	; 0
 bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <xTaskResumeAll+0xec>
 bd6:	80 e0       	ldi	r24, 0x00	; 0
 bd8:	0f 90       	pop	r0
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	df 91       	pop	r29
 bde:	cf 91       	pop	r28
 be0:	1f 91       	pop	r17
 be2:	0f 91       	pop	r16
 be4:	ff 90       	pop	r15
 be6:	ef 90       	pop	r14
 be8:	df 90       	pop	r13
 bea:	cf 90       	pop	r12
 bec:	08 95       	ret

00000bee <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
 bf4:	89 2b       	or	r24, r25
 bf6:	91 f0       	breq	.+36     	; 0xc1c <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
 bf8:	b2 de       	rcall	.-668    	; 0x95e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 bfa:	80 91 0c 07 	lds	r24, 0x070C	; 0x80070c <xTickCount>
 bfe:	90 91 0d 07 	lds	r25, 0x070D	; 0x80070d <xTickCount+0x1>
 c02:	c8 0f       	add	r28, r24
 c04:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 c06:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <pxCurrentTCB>
 c0a:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <pxCurrentTCB+0x1>
 c0e:	02 96       	adiw	r24, 0x02	; 2
 c10:	f4 da       	rcall	.-2584   	; 0x1fa <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 c12:	ce 01       	movw	r24, r28
 c14:	53 dd       	rcall	.-1370   	; 0x6bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 c16:	6a df       	rcall	.-300    	; 0xaec <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 c18:	81 11       	cpse	r24, r1
 c1a:	01 c0       	rjmp	.+2      	; 0xc1e <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
 c1c:	9c dc       	rcall	.-1736   	; 0x556 <vPortYield>
 c1e:	df 91       	pop	r29
		}
	}
 c20:	cf 91       	pop	r28
 c22:	08 95       	ret

00000c24 <prvIdleTask>:
 c24:	0f 2e       	mov	r0, r31
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c26:	f0 e1       	ldi	r31, 0x10	; 16
 c28:	ef 2e       	mov	r14, r31
 c2a:	f7 e0       	ldi	r31, 0x07	; 7
 c2c:	ff 2e       	mov	r15, r31
 c2e:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c30:	c8 e3       	ldi	r28, 0x38	; 56
 c32:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 c34:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxTasksDeleted>
 c38:	88 23       	and	r24, r24
 c3a:	29 f1       	breq	.+74     	; 0xc86 <prvIdleTask+0x62>
		{
			vTaskSuspendAll();
 c3c:	90 de       	rcall	.-736    	; 0x95e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 c3e:	d7 01       	movw	r26, r14
			xTaskResumeAll();
 c40:	1c 91       	ld	r17, X
 c42:	54 df       	rcall	.-344    	; 0xaec <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 c44:	11 23       	and	r17, r17
 c46:	f9 f0       	breq	.+62     	; 0xc86 <prvIdleTask+0x62>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	f8 94       	cli
 c4c:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 c4e:	d7 01       	movw	r26, r14
 c50:	15 96       	adiw	r26, 0x05	; 5
 c52:	ed 91       	ld	r30, X+
 c54:	fc 91       	ld	r31, X
 c56:	16 97       	sbiw	r26, 0x06	; 6
 c58:	06 81       	ldd	r16, Z+6	; 0x06
 c5a:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
 c5c:	c8 01       	movw	r24, r16
 c5e:	02 96       	adiw	r24, 0x02	; 2
 c60:	cc da       	rcall	.-2664   	; 0x1fa <vListRemove>
					--uxCurrentNumberOfTasks;
 c62:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <uxCurrentNumberOfTasks>
 c66:	81 50       	subi	r24, 0x01	; 1
 c68:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
 c6c:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <uxTasksDeleted>
 c70:	81 50       	subi	r24, 0x01	; 1
 c72:	80 93 0f 07 	sts	0x070F, r24	; 0x80070f <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
 c76:	0f 90       	pop	r0
 c78:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 c7a:	f8 01       	movw	r30, r16
 c7c:	87 89       	ldd	r24, Z+23	; 0x17
 c7e:	90 8d       	ldd	r25, Z+24	; 0x18
		vPortFree( pxTCB );
 c80:	47 da       	rcall	.-2930   	; 0x110 <vPortFree>
 c82:	c8 01       	movw	r24, r16

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 c84:	45 da       	rcall	.-2934   	; 0x110 <vPortFree>
 c86:	88 81       	ld	r24, Y
 c88:	82 30       	cpi	r24, 0x02	; 2
			{
				taskYIELD();
 c8a:	a0 f2       	brcs	.-88     	; 0xc34 <prvIdleTask+0x10>
 c8c:	64 dc       	rcall	.-1848   	; 0x556 <vPortYield>
 c8e:	d2 cf       	rjmp	.-92     	; 0xc34 <prvIdleTask+0x10>

00000c90 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 c90:	80 91 08 07 	lds	r24, 0x0708	; 0x800708 <uxSchedulerSuspended>
 c94:	81 11       	cpse	r24, r1
 c96:	13 c0       	rjmp	.+38     	; 0xcbe <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 c98:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxTopReadyPriority>
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	fc 01       	movw	r30, r24
 ca0:	ee 0f       	add	r30, r30
 ca2:	ff 1f       	adc	r31, r31
 ca4:	ee 0f       	add	r30, r30
 ca6:	ff 1f       	adc	r31, r31
 ca8:	ee 0f       	add	r30, r30
 caa:	ff 1f       	adc	r31, r31
 cac:	8e 0f       	add	r24, r30
 cae:	9f 1f       	adc	r25, r31
 cb0:	fc 01       	movw	r30, r24
 cb2:	e8 5c       	subi	r30, 0xC8	; 200
 cb4:	f8 4f       	sbci	r31, 0xF8	; 248
 cb6:	80 81       	ld	r24, Z
 cb8:	88 23       	and	r24, r24
 cba:	29 f0       	breq	.+10     	; 0xcc6 <vTaskSwitchContext+0x36>
 cbc:	1b c0       	rjmp	.+54     	; 0xcf4 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 cbe:	81 e0       	ldi	r24, 0x01	; 1
 cc0:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <xMissedYield>
 cc4:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 cc6:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxTopReadyPriority>
 cca:	81 50       	subi	r24, 0x01	; 1
 ccc:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 cd0:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxTopReadyPriority>
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	fc 01       	movw	r30, r24
 cd8:	ee 0f       	add	r30, r30
 cda:	ff 1f       	adc	r31, r31
 cdc:	ee 0f       	add	r30, r30
 cde:	ff 1f       	adc	r31, r31
 ce0:	ee 0f       	add	r30, r30
 ce2:	ff 1f       	adc	r31, r31
 ce4:	8e 0f       	add	r24, r30
 ce6:	9f 1f       	adc	r25, r31
 ce8:	fc 01       	movw	r30, r24
 cea:	e8 5c       	subi	r30, 0xC8	; 200
 cec:	f8 4f       	sbci	r31, 0xF8	; 248
 cee:	80 81       	ld	r24, Z
 cf0:	88 23       	and	r24, r24
 cf2:	49 f3       	breq	.-46     	; 0xcc6 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 cf4:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <uxTopReadyPriority>
 cf8:	90 e0       	ldi	r25, 0x00	; 0
 cfa:	9c 01       	movw	r18, r24
 cfc:	22 0f       	add	r18, r18
 cfe:	33 1f       	adc	r19, r19
 d00:	22 0f       	add	r18, r18
 d02:	33 1f       	adc	r19, r19
 d04:	22 0f       	add	r18, r18
 d06:	33 1f       	adc	r19, r19
 d08:	28 0f       	add	r18, r24
 d0a:	39 1f       	adc	r19, r25
 d0c:	d9 01       	movw	r26, r18
 d0e:	a8 5c       	subi	r26, 0xC8	; 200
 d10:	b8 4f       	sbci	r27, 0xF8	; 248
 d12:	11 96       	adiw	r26, 0x01	; 1
 d14:	ed 91       	ld	r30, X+
 d16:	fc 91       	ld	r31, X
 d18:	12 97       	sbiw	r26, 0x02	; 2
 d1a:	02 80       	ldd	r0, Z+2	; 0x02
 d1c:	f3 81       	ldd	r31, Z+3	; 0x03
 d1e:	e0 2d       	mov	r30, r0
 d20:	12 96       	adiw	r26, 0x02	; 2
 d22:	fc 93       	st	X, r31
 d24:	ee 93       	st	-X, r30
 d26:	11 97       	sbiw	r26, 0x01	; 1
 d28:	25 5c       	subi	r18, 0xC5	; 197
 d2a:	38 4f       	sbci	r19, 0xF8	; 248
 d2c:	e2 17       	cp	r30, r18
 d2e:	f3 07       	cpc	r31, r19
 d30:	29 f4       	brne	.+10     	; 0xd3c <vTaskSwitchContext+0xac>
 d32:	22 81       	ldd	r18, Z+2	; 0x02
 d34:	33 81       	ldd	r19, Z+3	; 0x03
 d36:	fd 01       	movw	r30, r26
 d38:	32 83       	std	Z+2, r19	; 0x02
 d3a:	21 83       	std	Z+1, r18	; 0x01
 d3c:	fc 01       	movw	r30, r24
 d3e:	ee 0f       	add	r30, r30
 d40:	ff 1f       	adc	r31, r31
 d42:	ee 0f       	add	r30, r30
 d44:	ff 1f       	adc	r31, r31
 d46:	ee 0f       	add	r30, r30
 d48:	ff 1f       	adc	r31, r31
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	fc 01       	movw	r30, r24
 d50:	e8 5c       	subi	r30, 0xC8	; 200
 d52:	f8 4f       	sbci	r31, 0xF8	; 248
 d54:	01 80       	ldd	r0, Z+1	; 0x01
 d56:	f2 81       	ldd	r31, Z+2	; 0x02
 d58:	e0 2d       	mov	r30, r0
 d5a:	86 81       	ldd	r24, Z+6	; 0x06
 d5c:	97 81       	ldd	r25, Z+7	; 0x07
 d5e:	90 93 5d 07 	sts	0x075D, r25	; 0x80075d <pxCurrentTCB+0x1>
 d62:	80 93 5c 07 	sts	0x075C, r24	; 0x80075c <pxCurrentTCB>
 d66:	08 95       	ret

00000d68 <memset>:
 d68:	dc 01       	movw	r26, r24
 d6a:	01 c0       	rjmp	.+2      	; 0xd6e <memset+0x6>
 d6c:	6d 93       	st	X+, r22
 d6e:	41 50       	subi	r20, 0x01	; 1
 d70:	50 40       	sbci	r21, 0x00	; 0
 d72:	e0 f7       	brcc	.-8      	; 0xd6c <memset+0x4>
 d74:	08 95       	ret

00000d76 <strncpy>:
 d76:	fb 01       	movw	r30, r22
 d78:	dc 01       	movw	r26, r24
 d7a:	41 50       	subi	r20, 0x01	; 1
 d7c:	50 40       	sbci	r21, 0x00	; 0
 d7e:	48 f0       	brcs	.+18     	; 0xd92 <strncpy+0x1c>
 d80:	01 90       	ld	r0, Z+
 d82:	0d 92       	st	X+, r0
 d84:	00 20       	and	r0, r0
 d86:	c9 f7       	brne	.-14     	; 0xd7a <strncpy+0x4>
 d88:	01 c0       	rjmp	.+2      	; 0xd8c <strncpy+0x16>
 d8a:	1d 92       	st	X+, r1
 d8c:	41 50       	subi	r20, 0x01	; 1
 d8e:	50 40       	sbci	r21, 0x00	; 0
 d90:	e0 f7       	brcc	.-8      	; 0xd8a <strncpy+0x14>
 d92:	08 95       	ret

00000d94 <_exit>:
 d94:	f8 94       	cli

00000d96 <__stop_program>:
 d96:	ff cf       	rjmp	.-2      	; 0xd96 <__stop_program>
