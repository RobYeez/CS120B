
led_v8_test_w_button_led5_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003b8  0000044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800106  00800106  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ac7  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000586  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e4  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000527  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b9  00000000  00000000  0000244f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 31       	cpi	r26, 0x13	; 19
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	56 d1       	rcall	.+684    	; 0x370 <main>
  c4:	77 c1       	rjmp	.+750    	; 0x3b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
void convert()
{
	ADCSRA |=(1<<ADSC);//start ADC conversion
	while ( !(ADCSRA & (1<<ADIF)));//wait till ADC conversion
	
}
  c8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
  cc:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
  d0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
  d4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
  d8:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <_avr_timer_cntcurr>
  dc:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <_avr_timer_cntcurr+0x1>
  e0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr+0x2>
  e4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 10e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 112:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 116:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 11a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 11e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 122:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 126:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 148:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 14c:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 150:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 15e:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 162:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 166:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TimerFlag>
 178:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 17c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 180:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 184:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 188:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 18c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 190:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 194:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <adc_init>:
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 6e       	ori	r24, 0xE0	; 224
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret

000001b6 <Set_A2D_Pin>:
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	60 f0       	brcs	.+24     	; 0x1d2 <Set_A2D_Pin+0x1c>
 1ba:	ec e7       	ldi	r30, 0x7C	; 124
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	80 83       	st	Z, r24
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	00 00       	nop
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	e9 f7       	brne	.-6      	; 0x1c4 <Set_A2D_Pin+0xe>
 1ca:	8f e0       	ldi	r24, 0x0F	; 15
 1cc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1d0:	08 95       	ret
 1d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 1d6:	f5 cf       	rjmp	.-22     	; 0x1c2 <Set_A2D_Pin+0xc>

000001d8 <transmit_data>:
#define SHIFT_REG PORTC

void transmit_data(unsigned char data){
	unsigned char tmp = data;
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
 1d8:	43 9a       	sbi	0x08, 3	; 8
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
 1da:	41 98       	cbi	0x08, 1	; 8
	
	for(i = 0; i < 8; i++){
 1dc:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <i>
		CLR_BIT(SHIFT_REG, 2);			//set SRCLK low
		tmp = GET_BIT(data, i);
		if(tmp)
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	50 e0       	ldi	r21, 0x00	; 0
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
	
	for(i = 0; i < 8; i++){
		CLR_BIT(SHIFT_REG, 2);			//set SRCLK low
 1e4:	42 98       	cbi	0x08, 2	; 8
		tmp = GET_BIT(data, i);
		if(tmp)
 1e6:	9a 01       	movw	r18, r20
 1e8:	00 90 0c 01 	lds	r0, 0x010C	; 0x80010c <i>
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <transmit_data+0x1a>
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	0a 94       	dec	r0
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <transmit_data+0x16>
 1f6:	28 23       	and	r18, r24
 1f8:	11 f0       	breq	.+4      	; 0x1fe <transmit_data+0x26>
		SET_BIT(SHIFT_REG, 0);	//set SER to data to be transmitted
 1fa:	40 9a       	sbi	0x08, 0	; 8
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <transmit_data+0x28>
		else
		CLR_BIT(SHIFT_REG, 0);
 1fe:	40 98       	cbi	0x08, 0	; 8
		SET_BIT(SHIFT_REG, 2);			//set SRCLK high
 200:	42 9a       	sbi	0x08, 2	; 8
	unsigned char tmp = data;
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
	
	for(i = 0; i < 8; i++){
 202:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <i>
 206:	9f 5f       	subi	r25, 0xFF	; 255
 208:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <i>
 20c:	98 30       	cpi	r25, 0x08	; 8
 20e:	50 f3       	brcs	.-44     	; 0x1e4 <transmit_data+0xc>
		else
		CLR_BIT(SHIFT_REG, 0);
		SET_BIT(SHIFT_REG, 2);			//set SRCLK high
	}
	
	SET_BIT(SHIFT_REG, 1);				//set RCLK high
 210:	41 9a       	sbi	0x08, 1	; 8
 212:	08 95       	ret

00000214 <JoyStick_Tick>:
enum JoystickStates{wait, left, right} state;

void JoyStick_Tick()
{
	
	Set_A2D_Pin(0x00);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	cf df       	rcall	.-98     	; 0x1b6 <Set_A2D_Pin>
	//convert();
	joystick = ADC;
 218:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 21c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 220:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <joystick+0x1>
 224:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <joystick>
	switch(state)
 228:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <state>
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	99 f0       	breq	.+38     	; 0x256 <JoyStick_Tick+0x42>
 230:	18 f0       	brcs	.+6      	; 0x238 <JoyStick_Tick+0x24>
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	b1 f0       	breq	.+44     	; 0x262 <JoyStick_Tick+0x4e>
 236:	1c c0       	rjmp	.+56     	; 0x270 <JoyStick_Tick+0x5c>
	{
		case wait:
		if(joystick < 400){
 238:	20 39       	cpi	r18, 0x90	; 144
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	38 07       	cpc	r19, r24
 23e:	20 f4       	brcc	.+8      	; 0x248 <JoyStick_Tick+0x34>
			state = left;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 246:	2c c0       	rjmp	.+88     	; 0x2a0 <JoyStick_Tick+0x8c>
		}
		else if(joystick > 700) {
 248:	2d 3b       	cpi	r18, 0xBD	; 189
 24a:	32 40       	sbci	r19, 0x02	; 2
 24c:	c0 f0       	brcs	.+48     	; 0x27e <JoyStick_Tick+0x6a>
			state = right;
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <state>
 254:	55 c0       	rjmp	.+170    	; 0x300 <JoyStick_Tick+0xec>
			state = wait;
		}
		break;
		
		case left:
		if(joystick < 400) {
 256:	20 39       	cpi	r18, 0x90	; 144
 258:	31 40       	sbci	r19, 0x01	; 1
 25a:	10 f1       	brcs	.+68     	; 0x2a0 <JoyStick_Tick+0x8c>
			state = left;
		}
		else {
			state = wait;
 25c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <state>
 260:	0e c0       	rjmp	.+28     	; 0x27e <JoyStick_Tick+0x6a>
		}
		break;
		
		case right:
		if(joystick > 800){
 262:	21 32       	cpi	r18, 0x21	; 33
 264:	33 40       	sbci	r19, 0x03	; 3
 266:	08 f0       	brcs	.+2      	; 0x26a <JoyStick_Tick+0x56>
 268:	4b c0       	rjmp	.+150    	; 0x300 <JoyStick_Tick+0xec>
			state = right;
		}
		else {
			state = wait;
 26a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <state>
 26e:	07 c0       	rjmp	.+14     	; 0x27e <JoyStick_Tick+0x6a>
		break;
		
		default:
		break;
	}
	switch(state)
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	b1 f0       	breq	.+44     	; 0x2a0 <JoyStick_Tick+0x8c>
 274:	20 f0       	brcs	.+8      	; 0x27e <JoyStick_Tick+0x6a>
 276:	82 30       	cpi	r24, 0x02	; 2
 278:	09 f0       	breq	.+2      	; 0x27c <JoyStick_Tick+0x68>
 27a:	73 c0       	rjmp	.+230    	; 0x362 <JoyStick_Tick+0x14e>
 27c:	41 c0       	rjmp	.+130    	; 0x300 <JoyStick_Tick+0xec>
	{
		case wait:
		if (row == 0x0F && pattern == 0x01 ) { // Reset demo
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 282:	8f 30       	cpi	r24, 0x0F	; 15
 284:	09 f0       	breq	.+2      	; 0x288 <JoyStick_Tick+0x74>
 286:	6d c0       	rjmp	.+218    	; 0x362 <JoyStick_Tick+0x14e>
 288:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	09 f0       	breq	.+2      	; 0x292 <JoyStick_Tick+0x7e>
 290:	68 c0       	rjmp	.+208    	; 0x362 <JoyStick_Tick+0x14e>
				pattern = 0x80;
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
				row = 0x1E;
 298:	8e e1       	ldi	r24, 0x1E	; 30
 29a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 29e:	61 c0       	rjmp	.+194    	; 0x362 <JoyStick_Tick+0x14e>
		}
		break;
		
		case left:
		if(pattern == 0x80) { //if all the way to the left
 2a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 2a4:	80 38       	cpi	r24, 0x80	; 128
 2a6:	41 f5       	brne	.+80     	; 0x2f8 <JoyStick_Tick+0xe4>
			pattern = 0x01;		//start at right
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
			if(buttonCnt > 0) --buttonCnt;
 2ae:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buttonCnt>
 2b2:	88 23       	and	r24, r24
 2b4:	29 f0       	breq	.+10     	; 0x2c0 <JoyStick_Tick+0xac>
 2b6:	81 50       	subi	r24, 0x01	; 1
 2b8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buttonCnt>
			if (buttonCnt == 0) row = 0x1E;
 2bc:	81 11       	cpse	r24, r1
 2be:	04 c0       	rjmp	.+8      	; 0x2c8 <JoyStick_Tick+0xb4>
 2c0:	8e e1       	ldi	r24, 0x1E	; 30
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2c6:	4d c0       	rjmp	.+154    	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 1) row = 0x1D;
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <JoyStick_Tick+0xc0>
 2cc:	8d e1       	ldi	r24, 0x1D	; 29
 2ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2d2:	47 c0       	rjmp	.+142    	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 2) row = 0x1B;
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	21 f4       	brne	.+8      	; 0x2e0 <JoyStick_Tick+0xcc>
 2d8:	8b e1       	ldi	r24, 0x1B	; 27
 2da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2de:	41 c0       	rjmp	.+130    	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 3) row = 0x17;
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	21 f4       	brne	.+8      	; 0x2ec <JoyStick_Tick+0xd8>
 2e4:	87 e1       	ldi	r24, 0x17	; 23
 2e6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2ea:	3b c0       	rjmp	.+118    	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 4) row = 0x0F;
 2ec:	84 30       	cpi	r24, 0x04	; 4
 2ee:	c9 f5       	brne	.+114    	; 0x362 <JoyStick_Tick+0x14e>
 2f0:	8f e0       	ldi	r24, 0x0F	; 15
 2f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 2f6:	35 c0       	rjmp	.+106    	; 0x362 <JoyStick_Tick+0x14e>
		}
		else {
		pattern = pattern << 1; //shift left
 2f8:	88 0f       	add	r24, r24
 2fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
 2fe:	31 c0       	rjmp	.+98     	; 0x362 <JoyStick_Tick+0x14e>
		}
		break;
		
		case right:
		if(pattern == 0x01) { //if all the way to the left
 300:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	51 f5       	brne	.+84     	; 0x35c <JoyStick_Tick+0x148>
			pattern = 0x80;		//sart at right
 308:	80 e8       	ldi	r24, 0x80	; 128
 30a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
			if(buttonCnt < 5) ++buttonCnt;
 30e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buttonCnt>
 312:	85 30       	cpi	r24, 0x05	; 5
 314:	18 f4       	brcc	.+6      	; 0x31c <JoyStick_Tick+0x108>
 316:	8f 5f       	subi	r24, 0xFF	; 255
 318:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <buttonCnt>
			if (buttonCnt == 0) row = 0x1E;
 31c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <buttonCnt>
 320:	81 11       	cpse	r24, r1
 322:	04 c0       	rjmp	.+8      	; 0x32c <JoyStick_Tick+0x118>
 324:	8e e1       	ldi	r24, 0x1E	; 30
 326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 32a:	1b c0       	rjmp	.+54     	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 1) row = 0x1D;
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	21 f4       	brne	.+8      	; 0x338 <JoyStick_Tick+0x124>
 330:	8d e1       	ldi	r24, 0x1D	; 29
 332:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 336:	15 c0       	rjmp	.+42     	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 2) row = 0x1B;
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	21 f4       	brne	.+8      	; 0x344 <JoyStick_Tick+0x130>
 33c:	8b e1       	ldi	r24, 0x1B	; 27
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 342:	0f c0       	rjmp	.+30     	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 3) row = 0x17;
 344:	83 30       	cpi	r24, 0x03	; 3
 346:	21 f4       	brne	.+8      	; 0x350 <JoyStick_Tick+0x13c>
 348:	87 e1       	ldi	r24, 0x17	; 23
 34a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 34e:	09 c0       	rjmp	.+18     	; 0x362 <JoyStick_Tick+0x14e>
			else if (buttonCnt == 4) row = 0x0F;
 350:	84 30       	cpi	r24, 0x04	; 4
 352:	39 f4       	brne	.+14     	; 0x362 <JoyStick_Tick+0x14e>
 354:	8f e0       	ldi	r24, 0x0F	; 15
 356:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 35a:	03 c0       	rjmp	.+6      	; 0x362 <JoyStick_Tick+0x14e>
		}
		else {
		pattern = pattern >> 1;  //shift right
 35c:	86 95       	lsr	r24
 35e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
		}
		break;
	}
	PORTD = row;
 362:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 366:	8b b9       	out	0x0b, r24	; 11
	transmit_data(pattern);
 368:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 36c:	35 cf       	rjmp	.-406    	; 0x1d8 <transmit_data>
 36e:	08 95       	ret

00000370 <main>:
*/

int main(void)
{
    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 370:	11 b8       	out	0x01, r1	; 1
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x00; PORTB = 0xFF; //buttons
 376:	14 b8       	out	0x04, r1	; 4
 378:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;
 37a:	87 b9       	out	0x07, r24	; 7
 37c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 37e:	8a b9       	out	0x0a, r24	; 10
 380:	1b b8       	out	0x0b, r1	; 11
    adc_init();
 382:	13 df       	rcall	.-474    	; 0x1aa <adc_init>
	TimerSet(100);
 384:	64 e6       	ldi	r22, 0x64	; 100
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 38c:	9d de       	rcall	.-710    	; 0xc8 <TimerSet>
 38e:	ad de       	rcall	.-678    	; 0xea <TimerOn>
	buttonUp = ~PINB & 0x01;
 390:	83 b1       	in	r24, 0x03	; 3
 392:	80 95       	com	r24
 394:	81 70       	andi	r24, 0x01	; 1
 396:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <buttonUp>
	buttonDown = ~PINB & 0x02;
 39a:	83 b1       	in	r24, 0x03	; 3
 39c:	80 95       	com	r24
 39e:	82 70       	andi	r24, 0x02	; 2
 3a0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <buttonDown>
	while (1) 
    {
		while(!TimerFlag);
 3a4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TimerFlag>
 3a8:	88 23       	and	r24, r24
		TimerFlag = 0;
 3aa:	e1 f3       	breq	.-8      	; 0x3a4 <main+0x34>
 3ac:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TimerFlag>
		JoyStick_Tick();
 3b0:	31 df       	rcall	.-414    	; 0x214 <JoyStick_Tick>
    }
 3b2:	f8 cf       	rjmp	.-16     	; 0x3a4 <main+0x34>

000003b4 <_exit>:
 3b4:	f8 94       	cli

000003b6 <__stop_program>:
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <__stop_program>
