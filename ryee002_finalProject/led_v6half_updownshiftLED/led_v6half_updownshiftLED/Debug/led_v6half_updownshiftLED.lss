
led_v6half_updownshiftLED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800106  00800106  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a73  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c3  00000000  00000000  00000e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045e  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f3  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b9  00000000  00000000  00002147  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002200  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 31       	cpi	r26, 0x12	; 18
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c8 d0       	rcall	.+400    	; 0x254 <main>
  c4:	d7 c0       	rjmp	.+430    	; 0x274 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_13>:
	TimerFlag = 1;
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
  da:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <_avr_timer_cntcurr>
  de:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <_avr_timer_cntcurr+0x1>
  e2:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x2>
  e6:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x3>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
  f4:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
  f8:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
  fc:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 100:	89 2b       	or	r24, r25
 102:	8a 2b       	or	r24, r26
 104:	8b 2b       	or	r24, r27
 106:	99 f4       	brne	.+38     	; 0x12e <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 10e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 112:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 116:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 11a:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 11e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <_avr_timer_cntcurr>
 122:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <_avr_timer_cntcurr+0x1>
 126:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <_avr_timer_cntcurr+0x2>
 12a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <_avr_timer_cntcurr+0x3>
	}
}
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <adc_init>:

#include <avr/io.h>
#include "timer.h"
void adc_init() // call this before while loop to init adc
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
 140:	ea e7       	ldi	r30, 0x7A	; 122
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 6e       	ori	r24, 0xE0	; 224
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <Set_A2D_Pin>:
}

void Set_A2D_Pin(unsigned char pinNum)
{
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	60 f0       	brcs	.+24     	; 0x168 <Set_A2D_Pin+0x1c>
 150:	ec e7       	ldi	r30, 0x7C	; 124
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 83       	st	Z, r24
{
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
}

void Set_A2D_Pin(unsigned char pinNum)
{
 158:	8f e0       	ldi	r24, 0x0F	; 15
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;

	static unsigned char i = 0;
	for(i = 0; i < 15; ++i)
	{
		asm("nop");
 15a:	00 00       	nop
 15c:	81 50       	subi	r24, 0x01	; 1
void Set_A2D_Pin(unsigned char pinNum)
{
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;

	static unsigned char i = 0;
	for(i = 0; i < 15; ++i)
 15e:	e9 f7       	brne	.-6      	; 0x15a <Set_A2D_Pin+0xe>
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	{
		asm("nop");
	}
}
 166:	08 95       	ret
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
}

void Set_A2D_Pin(unsigned char pinNum)
{
	ADMUX = (pinNum <= 0x07) ? pinNum : ADMUX;
 168:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 16c:	f5 cf       	rjmp	.-22     	; 0x158 <Set_A2D_Pin+0xc>

0000016e <transmit_data>:
#define SHIFT_REG PORTC

void transmit_data(unsigned char data){
	unsigned char tmp = data;
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
 16e:	43 9a       	sbi	0x08, 3	; 8
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
 170:	41 98       	cbi	0x08, 1	; 8
	
	for(i = 0; i < 8; i++){
 172:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <i>
		CLR_BIT(SHIFT_REG, 2);			//set SRCLK low
		tmp = GET_BIT(data, i);
		if(tmp)
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	50 e0       	ldi	r21, 0x00	; 0
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
	
	for(i = 0; i < 8; i++){
		CLR_BIT(SHIFT_REG, 2);			//set SRCLK low
 17a:	42 98       	cbi	0x08, 2	; 8
		tmp = GET_BIT(data, i);
		if(tmp)
 17c:	9a 01       	movw	r18, r20
 17e:	00 90 0b 01 	lds	r0, 0x010B	; 0x80010b <i>
 182:	02 c0       	rjmp	.+4      	; 0x188 <transmit_data+0x1a>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	0a 94       	dec	r0
 18a:	e2 f7       	brpl	.-8      	; 0x184 <transmit_data+0x16>
 18c:	28 23       	and	r18, r24
 18e:	11 f0       	breq	.+4      	; 0x194 <transmit_data+0x26>
		SET_BIT(SHIFT_REG, 0);	//set SER to data to be transmitted
 190:	40 9a       	sbi	0x08, 0	; 8
 192:	01 c0       	rjmp	.+2      	; 0x196 <transmit_data+0x28>
		else
		CLR_BIT(SHIFT_REG, 0);
 194:	40 98       	cbi	0x08, 0	; 8
		SET_BIT(SHIFT_REG, 2);			//set SRCLK high
 196:	42 9a       	sbi	0x08, 2	; 8
	unsigned char tmp = data;
	
	SET_BIT(SHIFT_REG, 3);				//set SRCLR high
	CLR_BIT(SHIFT_REG, 1);				//set RCLK low
	
	for(i = 0; i < 8; i++){
 198:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <i>
 19c:	9f 5f       	subi	r25, 0xFF	; 255
 19e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <i>
 1a2:	98 30       	cpi	r25, 0x08	; 8
 1a4:	50 f3       	brcs	.-44     	; 0x17a <transmit_data+0xc>
		else
		CLR_BIT(SHIFT_REG, 0);
		SET_BIT(SHIFT_REG, 2);			//set SRCLK high
	}
	
	SET_BIT(SHIFT_REG, 1);				//set RCLK high
 1a6:	41 9a       	sbi	0x08, 1	; 8
 1a8:	08 95       	ret

000001aa <LR_Tick>:
enum LRStates{leftRight, upDown} state;


void LR_Tick()
{
	switch(state)
 1aa:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <state>
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <LR_Tick+0xe>
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	29 f1       	breq	.+74     	; 0x200 <LR_Tick+0x56>
 1b6:	46 c0       	rjmp	.+140    	; 0x244 <LR_Tick+0x9a>
	{
		case leftRight:
		Set_A2D_Pin(0x00);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	c8 df       	rcall	.-112    	; 0x14c <Set_A2D_Pin>
		joystick = ADC;
 1bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c4:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <joystick+0x1>
 1c8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <joystick>
		if(joystick < 350)
 1cc:	8e 35       	cpi	r24, 0x5E	; 94
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	92 07       	cpc	r25, r18
 1d2:	40 f4       	brcc	.+16     	; 0x1e4 <LR_Tick+0x3a>
		{
			if(pattern != 0x01)
 1d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	71 f0       	breq	.+28     	; 0x1f8 <LR_Tick+0x4e>
			pattern = pattern >> 1;
 1dc:	86 95       	lsr	r24
 1de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
 1e2:	0a c0       	rjmp	.+20     	; 0x1f8 <LR_Tick+0x4e>
		}
		else if(joystick > 700)
 1e4:	8d 3b       	cpi	r24, 0xBD	; 189
 1e6:	92 40       	sbci	r25, 0x02	; 2
 1e8:	38 f0       	brcs	.+14     	; 0x1f8 <LR_Tick+0x4e>
		{
			if(pattern != 0x80)
 1ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 1ee:	80 38       	cpi	r24, 0x80	; 128
 1f0:	19 f0       	breq	.+6      	; 0x1f8 <LR_Tick+0x4e>
			pattern = pattern << 1;
 1f2:	88 0f       	add	r24, r24
 1f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pattern>
		}
		state = upDown;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <state>
		break;
 1fe:	22 c0       	rjmp	.+68     	; 0x244 <LR_Tick+0x9a>
		case upDown:
		Set_A2D_Pin(0x02);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	a4 df       	rcall	.-184    	; 0x14c <Set_A2D_Pin>
		temp = ADC;
 204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 208:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 20c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <temp+0x1>
 210:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <temp>
		if(temp < 350)
 214:	8e 35       	cpi	r24, 0x5E	; 94
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	92 07       	cpc	r25, r18
 21a:	40 f4       	brcc	.+16     	; 0x22c <LR_Tick+0x82>
		{
			if(row != 0x10)
 21c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 220:	80 31       	cpi	r24, 0x10	; 16
 222:	71 f0       	breq	.+28     	; 0x240 <LR_Tick+0x96>
			row = row << 1;
 224:	88 0f       	add	r24, r24
 226:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 22a:	0a c0       	rjmp	.+20     	; 0x240 <LR_Tick+0x96>
		}
		else if(temp > 700)
 22c:	8d 3b       	cpi	r24, 0xBD	; 189
 22e:	92 40       	sbci	r25, 0x02	; 2
 230:	38 f0       	brcs	.+14     	; 0x240 <LR_Tick+0x96>
		{
			if(row != 0x01)
 232:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	19 f0       	breq	.+6      	; 0x240 <LR_Tick+0x96>
			row = row >> 1;
 23a:	86 95       	lsr	r24
 23c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		}
		state = leftRight;
 240:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <state>
		break;
		default:
		break;
	}
	PORTD = pattern;	
 244:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pattern>
 248:	8b b9       	out	0x0b, r24	; 11
	transmit_data(~row);
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 24e:	80 95       	com	r24
 250:	8e cf       	rjmp	.-228    	; 0x16e <transmit_data>
 252:	08 95       	ret

00000254 <main>:
}
int main(void)
{
    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 254:	11 b8       	out	0x01, r1	; 1
 256:	8f ef       	ldi	r24, 0xFF	; 255
 258:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
 25a:	87 b9       	out	0x07, r24	; 7
 25c:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFF; PORTD = 0x00;
 25e:	8a b9       	out	0x0a, r24	; 10
 260:	1b b8       	out	0x0b, r1	; 11
	adc_init();
 262:	6e df       	rcall	.-292    	; 0x140 <adc_init>
    while (1) 
    {
		while(!TimerFlag);
 264:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <TimerFlag>
 268:	88 23       	and	r24, r24
 26a:	e1 f3       	breq	.-8      	; 0x264 <main+0x10>
		TimerFlag = 0;
 26c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <TimerFlag>
		LR_Tick();
 270:	9c df       	rcall	.-200    	; 0x1aa <LR_Tick>
    }
 272:	f8 cf       	rjmp	.-16     	; 0x264 <main+0x10>

00000274 <_exit>:
 274:	f8 94       	cli

00000276 <__stop_program>:
 276:	ff cf       	rjmp	.-2      	; 0x276 <__stop_program>
