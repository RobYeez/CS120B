
ryee002_sqian003_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000218  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089c  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000374  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000473  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	70 d0       	rcall	.+224    	; 0x18a <main>
  aa:	7a c0       	rjmp	.+244    	; 0x1a0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
enum State {init, stateI, stateD, stateNone} state;
unsigned char counterTotal = 0x00;
unsigned char tempA;

void tick() {
		tempA = (~PINA & 0x03);
  ae:	80 b1       	in	r24, 0x00	; 0
  b0:	80 95       	com	r24
  b2:	83 70       	andi	r24, 0x03	; 3
  b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempA>
	switch (state) {
  b8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <state>
  bc:	91 30       	cpi	r25, 0x01	; 1
  be:	b1 f0       	breq	.+44     	; 0xec <tick+0x3e>
  c0:	28 f0       	brcs	.+10     	; 0xcc <tick+0x1e>
  c2:	92 30       	cpi	r25, 0x02	; 2
  c4:	19 f1       	breq	.+70     	; 0x10c <tick+0x5e>
  c6:	93 30       	cpi	r25, 0x03	; 3
  c8:	89 f1       	breq	.+98     	; 0x12c <tick+0x7e>
  ca:	3f c0       	rjmp	.+126    	; 0x14a <tick+0x9c>
		case init: //initalize it to increment state
		if((tempA) == 0x01) { 
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	19 f4       	brne	.+6      	; 0xd6 <tick+0x28>
			state = stateI;
  d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  d4:	40 c0       	rjmp	.+128    	; 0x156 <tick+0xa8>
		}
		else if ((tempA) == 0x02) {
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	19 f4       	brne	.+6      	; 0xe0 <tick+0x32>
			state = stateD;
  da:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  de:	46 c0       	rjmp	.+140    	; 0x16c <tick+0xbe>
		}
		else if ((tempA) == 0x00) {
  e0:	81 11       	cpse	r24, r1
  e2:	52 c0       	rjmp	.+164    	; 0x188 <tick+0xda>
			state = stateNone;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  ea:	4b c0       	rjmp	.+150    	; 0x182 <tick+0xd4>
		}
		state =init;
		break;
		
		case stateI:
		if((tempA) == 0x01) { 
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	99 f1       	breq	.+102    	; 0x156 <tick+0xa8>
			state = stateI;
			break;
		}
		else if ((tempA) == 0x02) {
  f0:	82 30       	cpi	r24, 0x02	; 2
  f2:	19 f4       	brne	.+6      	; 0xfa <tick+0x4c>
			state = stateD;
  f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  f8:	39 c0       	rjmp	.+114    	; 0x16c <tick+0xbe>
		}
		else if ((tempA) == 0x00) {
  fa:	81 11       	cpse	r24, r1
  fc:	04 c0       	rjmp	.+8      	; 0x106 <tick+0x58>
			state = stateNone;
  fe:	83 e0       	ldi	r24, 0x03	; 3
 100:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 104:	3e c0       	rjmp	.+124    	; 0x182 <tick+0xd4>
		}
		state =init;
 106:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
 10a:	08 95       	ret
		
		case stateD:
		if((tempA) == 0x01) { 
 10c:	81 30       	cpi	r24, 0x01	; 1
 10e:	19 f4       	brne	.+6      	; 0x116 <tick+0x68>
			state = stateI;
 110:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 114:	20 c0       	rjmp	.+64     	; 0x156 <tick+0xa8>
		}
		else if ((tempA) == 0x02) {
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	49 f1       	breq	.+82     	; 0x16c <tick+0xbe>
			state = stateD;
			break;
		}
		else if ((tempA) == 0x00) {
 11a:	81 11       	cpse	r24, r1
 11c:	04 c0       	rjmp	.+8      	; 0x126 <tick+0x78>
			state = stateNone;
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 124:	2e c0       	rjmp	.+92     	; 0x182 <tick+0xd4>
		}
		state =init;
 126:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
 12a:	08 95       	ret
				
		case stateNone:
		if((tempA) == 0x01) { 
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	19 f4       	brne	.+6      	; 0x136 <tick+0x88>
			state = stateI;
 130:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 134:	10 c0       	rjmp	.+32     	; 0x156 <tick+0xa8>
		}
		else if ((tempA) == 0x02) {
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	19 f4       	brne	.+6      	; 0x140 <tick+0x92>
			state = stateD;
 13a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
 13e:	16 c0       	rjmp	.+44     	; 0x16c <tick+0xbe>
		}
		else if ((tempA) == 0x00) {
 140:	88 23       	and	r24, r24
 142:	f9 f0       	breq	.+62     	; 0x182 <tick+0xd4>
			state = stateNone;
			break;
		}
		state =init;
 144:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
		break;
 148:	08 95       	ret
		
		
		}
		switch (state) {
 14a:	92 30       	cpi	r25, 0x02	; 2
 14c:	79 f0       	breq	.+30     	; 0x16c <tick+0xbe>
 14e:	93 30       	cpi	r25, 0x03	; 3
 150:	c1 f0       	breq	.+48     	; 0x182 <tick+0xd4>
 152:	91 30       	cpi	r25, 0x01	; 1
 154:	c9 f4       	brne	.+50     	; 0x188 <tick+0xda>
		case init:
		break;
		
		case stateI:
		if(counterTotal != 0x09) {
 156:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15a:	89 30       	cpi	r24, 0x09	; 9
 15c:	19 f0       	breq	.+6      	; 0x164 <tick+0xb6>
			++counterTotal;
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		PORTC = counterTotal;
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 168:	88 b9       	out	0x08, r24	; 8
		break;
 16a:	08 95       	ret
		
		case stateD:
		if (counterTotal != 0x00) {
 16c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 170:	88 23       	and	r24, r24
 172:	19 f0       	breq	.+6      	; 0x17a <tick+0xcc>
			--counterTotal;
 174:	81 50       	subi	r24, 0x01	; 1
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		PORTC = counterTotal;
 17a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 17e:	88 b9       	out	0x08, r24	; 8
		break;
 180:	08 95       	ret
		
		case stateNone:
		counterTotal = 0x00;
 182:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		PORTC = counterTotal;
 186:	18 b8       	out	0x08, r1	; 8
 188:	08 95       	ret

0000018a <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF; // 8 bits but only need 2
 18a:	11 b8       	out	0x01, r1	; 1
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // 8 bits but only need 5(get 9)
 190:	87 b9       	out	0x07, r24	; 7
 192:	18 b8       	out	0x08, r1	; 8
	counterTotal = 0x07;
 194:	87 e0       	ldi	r24, 0x07	; 7
 196:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	PORTC = counterTotal;
 19a:	88 b9       	out	0x08, r24	; 8
    while (1) 
    {
		tick();
 19c:	88 df       	rcall	.-240    	; 0xae <tick>
 19e:	fe cf       	rjmp	.-4      	; 0x19c <main+0x12>

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
