
demo for lab 4 part 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000895  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000381  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044c  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	87 d0       	rcall	.+270    	; 0x1b8 <main>
  aa:	93 c0       	rjmp	.+294    	; 0x1d2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
enum States {start, pound1, pound2, y3, unlock, locked} state;
unsigned char lockCode = 0x00;


void tick() {
	switch (state) //transitions 
  ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	c9 f0       	breq	.+50     	; 0xe8 <tick+0x3a>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	59 f0       	breq	.+22     	; 0xd2 <tick+0x24>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	71 f0       	breq	.+28     	; 0xdc <tick+0x2e>
  c0:	59 c0       	rjmp	.+178    	; 0x174 <tick+0xc6>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	09 f4       	brne	.+2      	; 0xc8 <tick+0x1a>
  c6:	42 c0       	rjmp	.+132    	; 0x14c <tick+0x9e>
  c8:	38 f1       	brcs	.+78     	; 0x118 <tick+0x6a>
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	09 f4       	brne	.+2      	; 0xd0 <tick+0x22>
  ce:	4d c0       	rjmp	.+154    	; 0x16a <tick+0xbc>
  d0:	51 c0       	rjmp	.+162    	; 0x174 <tick+0xc6>
	{
		case start:
		state = pound1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		PORTB = 0x00;
  d8:	15 b8       	out	0x05, r1	; 5
		break;
  da:	50 c0       	rjmp	.+160    	; 0x17c <tick+0xce>
		
		case pound1:
		if ((PINA & 0x04) == 0x04) { //pound = 1
  dc:	02 9b       	sbis	0x00, 2	; 0
  de:	5d c0       	rjmp	.+186    	; 0x19a <tick+0xec>
			state = pound2;
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
  e6:	5c c0       	rjmp	.+184    	; 0x1a0 <tick+0xf2>
			state = pound1;
			break;
		}
		
		case pound2:
		if((PINA & 0x04) == 0x00 && lockCode == 0x01) { //pound = 0 + trying to lock with same code
  e8:	02 99       	sbic	0x00, 2	; 0
  ea:	08 c0       	rjmp	.+16     	; 0xfc <tick+0x4e>
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	21 f4       	brne	.+8      	; 0xfc <tick+0x4e>
			state = y3;
  f4:	83 e0       	ldi	r24, 0x03	; 3
  f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
  fa:	55 c0       	rjmp	.+170    	; 0x1a6 <tick+0xf8>
		}
		else if ((PINA & 0x04) == 0x00 && lockCode == 0x00) { //pound = 0
  fc:	02 99       	sbic	0x00, 2	; 0
  fe:	08 c0       	rjmp	.+16     	; 0x110 <tick+0x62>
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	81 11       	cpse	r24, r1
 106:	04 c0       	rjmp	.+8      	; 0x110 <tick+0x62>
			state = y3;
 108:	83 e0       	ldi	r24, 0x03	; 3
 10a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 10e:	4b c0       	rjmp	.+150    	; 0x1a6 <tick+0xf8>
		}
		else {
			state = pound1;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 116:	41 c0       	rjmp	.+130    	; 0x19a <tick+0xec>
		}
		
		case y3:
		if ((PINA & 0x02) == 0x02 && lockCode == 0x01) { //y = 1 + lock with same code
 118:	01 9b       	sbis	0x00, 1	; 0
 11a:	08 c0       	rjmp	.+16     	; 0x12c <tick+0x7e>
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	21 f4       	brne	.+8      	; 0x12c <tick+0x7e>
			state = locked;
 124:	85 e0       	ldi	r24, 0x05	; 5
 126:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 12a:	43 c0       	rjmp	.+134    	; 0x1b2 <tick+0x104>
		}
		else if ((PINA & 0x02) == 0x02 && lockCode == 0x00) { //y = 1
 12c:	01 9b       	sbis	0x00, 1	; 0
 12e:	0a c0       	rjmp	.+20     	; 0x144 <tick+0x96>
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	81 11       	cpse	r24, r1
 136:	06 c0       	rjmp	.+12     	; 0x144 <tick+0x96>
			state = unlock;
 138:	84 e0       	ldi	r24, 0x04	; 4
 13a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			PORTB = 0x01;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	85 b9       	out	0x05, r24	; 5
			break;
 142:	1c c0       	rjmp	.+56     	; 0x17c <tick+0xce>
		}
		else {
			state = pound1;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 14a:	27 c0       	rjmp	.+78     	; 0x19a <tick+0xec>
		}
		
		case unlock:
		if ((PINA & 0x80) == 0x80) {
 14c:	07 9b       	sbis	0x00, 7	; 0
 14e:	04 c0       	rjmp	.+8      	; 0x158 <tick+0xaa>
			state = locked;
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 156:	2d c0       	rjmp	.+90     	; 0x1b2 <tick+0x104>
		}
		else if ((PINA & 0x04) == 0x04) {
 158:	02 9b       	sbis	0x00, 2	; 0
 15a:	28 c0       	rjmp	.+80     	; 0x1ac <tick+0xfe>
			lockCode = 0x01;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			state = pound2;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;	
 168:	1b c0       	rjmp	.+54     	; 0x1a0 <tick+0xf2>
		else {
			break;
		}
		
		case locked:
		state = pound1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		PORTB = 0x00;
 170:	15 b8       	out	0x05, r1	; 5
		break;
 172:	04 c0       	rjmp	.+8      	; 0x17c <tick+0xce>
		
		default:
		state = pound1;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		PORTB = 0x00;
 17a:	15 b8       	out	0x05, r1	; 5
		break;
	}
	switch(state) { //state actions
 17c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 180:	83 30       	cpi	r24, 0x03	; 3
 182:	89 f0       	breq	.+34     	; 0x1a6 <tick+0xf8>
 184:	28 f4       	brcc	.+10     	; 0x190 <tick+0xe2>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <tick+0xec>
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	a1 f4       	brne	.+40     	; 0x1b6 <tick+0x108>
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <tick+0xf2>
 190:	84 30       	cpi	r24, 0x04	; 4
 192:	61 f0       	breq	.+24     	; 0x1ac <tick+0xfe>
 194:	85 30       	cpi	r24, 0x05	; 5
 196:	69 f0       	breq	.+26     	; 0x1b2 <tick+0x104>
 198:	08 95       	ret
		case start:
		break;
		
		case pound1:
		PORTC = 0x01;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	88 b9       	out	0x08, r24	; 8
		break;
 19e:	08 95       	ret
	
		case pound2:
		PORTC = 0x02;
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	88 b9       	out	0x08, r24	; 8
		break;
 1a4:	08 95       	ret
		
		case y3:
		PORTC = 0x03;
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	88 b9       	out	0x08, r24	; 8
		break;
 1aa:	08 95       	ret
		
		case unlock:
		PORTC = 0x04;
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	88 b9       	out	0x08, r24	; 8
		break;
 1b0:	08 95       	ret
		
		case locked:
		PORTC = 0x05;
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	88 b9       	out	0x08, r24	; 8
 1b6:	08 95       	ret

000001b8 <main>:
}

int main(void)
{
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 1b8:	11 b8       	out	0x01, r1	; 1
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x01;
 1be:	84 b9       	out	0x04, r24	; 4
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0xFF;
 1c4:	87 b9       	out	0x07, r24	; 7
 1c6:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x00;
 1c8:	15 b8       	out	0x05, r1	; 5
	state =	start;
 1ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	while (1)
	{
		tick();
 1ce:	6f df       	rcall	.-290    	; 0xae <tick>
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <main+0x16>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
