
ryee002_sqian003_lab4_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000236  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000895  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000040c  00000000  00000000  000013af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	b7 d0       	rcall	.+366    	; 0x218 <main>
  aa:	c3 c0       	rjmp	.+390    	; 0x232 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
enum States {start, pound1, pound2, y3, unlock, locked} state;
unsigned char lockCode = 0x00;


void tick() {
	switch (state) //transitions 
  ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	21 f1       	breq	.+72     	; 0xfe <tick+0x50>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	59 f0       	breq	.+22     	; 0xd2 <tick+0x24>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	71 f0       	breq	.+28     	; 0xdc <tick+0x2e>
  c0:	84 c0       	rjmp	.+264    	; 0x1ca <tick+0x11c>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	09 f4       	brne	.+2      	; 0xc8 <tick+0x1a>
  c6:	63 c0       	rjmp	.+198    	; 0x18e <tick+0xe0>
  c8:	e8 f1       	brcs	.+122    	; 0x144 <tick+0x96>
  ca:	85 30       	cpi	r24, 0x05	; 5
  cc:	09 f4       	brne	.+2      	; 0xd0 <tick+0x22>
  ce:	78 c0       	rjmp	.+240    	; 0x1c0 <tick+0x112>
  d0:	7c c0       	rjmp	.+248    	; 0x1ca <tick+0x11c>
	{
		case start:
		state = pound1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		PORTB = 0x00;
  d8:	15 b8       	out	0x05, r1	; 5
		break;
  da:	7b c0       	rjmp	.+246    	; 0x1d2 <tick+0x124>
		
		case pound1:
		if ((PINA & 0x04) == 0x04) { //pound = 1
  dc:	02 9b       	sbis	0x00, 2	; 0
  de:	04 c0       	rjmp	.+8      	; 0xe8 <tick+0x3a>
			state = pound2;
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
  e6:	87 c0       	rjmp	.+270    	; 0x1f6 <tick+0x148>
		}
		else if ((PINA & 0x04) != 0x04 && lockCode == 0x01) { //incorrect lock code
  e8:	02 99       	sbic	0x00, 2	; 0
  ea:	82 c0       	rjmp	.+260    	; 0x1f0 <tick+0x142>
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	81 30       	cpi	r24, 0x01	; 1
  f2:	09 f0       	breq	.+2      	; 0xf6 <tick+0x48>
  f4:	7d c0       	rjmp	.+250    	; 0x1f0 <tick+0x142>
			state = unlock;
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
  fc:	82 c0       	rjmp	.+260    	; 0x202 <tick+0x154>
			state = pound1;
			break;
		}
		
		case pound2:
		if((PINA & 0x04) == 0x00 && lockCode == 0x01) { //pound = 0 + trying to lock with same code
  fe:	02 99       	sbic	0x00, 2	; 0
 100:	09 c0       	rjmp	.+18     	; 0x114 <tick+0x66>
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	09 f0       	breq	.+2      	; 0x10c <tick+0x5e>
 10a:	81 c0       	rjmp	.+258    	; 0x20e <tick+0x160>
			state = y3;
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 112:	74 c0       	rjmp	.+232    	; 0x1fc <tick+0x14e>
		}
		else if ((PINA & 0x04) != 0x00 && lockCode == 0x01) { //incorrect lock code
 114:	02 9b       	sbis	0x00, 2	; 0
 116:	08 c0       	rjmp	.+16     	; 0x128 <tick+0x7a>
 118:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	21 f4       	brne	.+8      	; 0x128 <tick+0x7a>
			state = unlock;
 120:	84 e0       	ldi	r24, 0x04	; 4
 122:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 126:	6d c0       	rjmp	.+218    	; 0x202 <tick+0x154>
		}		
		else if ((PINA & 0x04) == 0x00 && lockCode == 0x00) { //pound = 0
 128:	02 99       	sbic	0x00, 2	; 0
 12a:	08 c0       	rjmp	.+16     	; 0x13c <tick+0x8e>
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 130:	81 11       	cpse	r24, r1
 132:	04 c0       	rjmp	.+8      	; 0x13c <tick+0x8e>
			state = y3;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 13a:	60 c0       	rjmp	.+192    	; 0x1fc <tick+0x14e>
		}
		else {
			state = pound1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 142:	56 c0       	rjmp	.+172    	; 0x1f0 <tick+0x142>
		}
		
		case y3:
		if ((PINA & 0x02) == 0x02 && lockCode == 0x01) { //y = 1 + lock with same code
 144:	01 9b       	sbis	0x00, 1	; 0
 146:	09 c0       	rjmp	.+18     	; 0x15a <tick+0xac>
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	09 f0       	breq	.+2      	; 0x152 <tick+0xa4>
 150:	60 c0       	rjmp	.+192    	; 0x212 <tick+0x164>
			state = locked;
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 158:	57 c0       	rjmp	.+174    	; 0x208 <tick+0x15a>
		}
		else if ((PINA & 0x02) != 0x02 && lockCode == 0x01) { //incorrect lock code
 15a:	01 99       	sbic	0x00, 1	; 0
 15c:	08 c0       	rjmp	.+16     	; 0x16e <tick+0xc0>
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	21 f4       	brne	.+8      	; 0x16e <tick+0xc0>
			state = unlock;
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 16c:	4a c0       	rjmp	.+148    	; 0x202 <tick+0x154>
		}		
		else if ((PINA & 0x02) == 0x02 && lockCode == 0x00) { //y = 1
 16e:	01 9b       	sbis	0x00, 1	; 0
 170:	0a c0       	rjmp	.+20     	; 0x186 <tick+0xd8>
 172:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 176:	81 11       	cpse	r24, r1
 178:	06 c0       	rjmp	.+12     	; 0x186 <tick+0xd8>
			state = unlock;
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			PORTB = 0x01;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	85 b9       	out	0x05, r24	; 5
			break;
 184:	26 c0       	rjmp	.+76     	; 0x1d2 <tick+0x124>
		}
		else {
			state = pound1;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 18c:	31 c0       	rjmp	.+98     	; 0x1f0 <tick+0x142>
		}
		
		case unlock:
		if ((PINA & 0x80) == 0x80) { //A7
 18e:	07 9b       	sbis	0x00, 7	; 0
 190:	04 c0       	rjmp	.+8      	; 0x19a <tick+0xec>
			state = locked;
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 198:	37 c0       	rjmp	.+110    	; 0x208 <tick+0x15a>
		}
		else if ((PINA & 0x80) == 0x80 && lockCode == 0x01) { //incorrect lock code
 19a:	07 9b       	sbis	0x00, 7	; 0
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <tick+0x100>
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	21 f4       	brne	.+8      	; 0x1ae <tick+0x100>
			state = locked;
 1a6:	85 e0       	ldi	r24, 0x05	; 5
 1a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;
 1ac:	2d c0       	rjmp	.+90     	; 0x208 <tick+0x15a>
		}		
		else if ((PINA & 0x04) == 0x04) { //start of same lock code
 1ae:	02 9b       	sbis	0x00, 2	; 0
 1b0:	28 c0       	rjmp	.+80     	; 0x202 <tick+0x154>
			lockCode = 0x01;
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			state = pound2;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
			break;	
 1be:	1b c0       	rjmp	.+54     	; 0x1f6 <tick+0x148>
		else {
			break;
		}
		
		case locked:
		state = pound1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		PORTB = 0x00;
 1c6:	15 b8       	out	0x05, r1	; 5
		break;
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <tick+0x124>
		
		default:
		state = pound1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <state>
		PORTB = 0x00;
 1d0:	15 b8       	out	0x05, r1	; 5
		break;
	}
	switch(state) { //state actions
 1d2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <state>
 1d6:	83 30       	cpi	r24, 0x03	; 3
 1d8:	89 f0       	breq	.+34     	; 0x1fc <tick+0x14e>
 1da:	28 f4       	brcc	.+10     	; 0x1e6 <tick+0x138>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	41 f0       	breq	.+16     	; 0x1f0 <tick+0x142>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	c9 f4       	brne	.+50     	; 0x216 <tick+0x168>
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <tick+0x148>
 1e6:	84 30       	cpi	r24, 0x04	; 4
 1e8:	61 f0       	breq	.+24     	; 0x202 <tick+0x154>
 1ea:	85 30       	cpi	r24, 0x05	; 5
 1ec:	69 f0       	breq	.+26     	; 0x208 <tick+0x15a>
 1ee:	08 95       	ret
		case start:
		break;
		
		case pound1:
		PORTC = 0x01;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	88 b9       	out	0x08, r24	; 8
		break;
 1f4:	08 95       	ret
	
		case pound2:
		PORTC = 0x02;
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	88 b9       	out	0x08, r24	; 8
		break;
 1fa:	08 95       	ret
		
		case y3:
		PORTC = 0x03;
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	88 b9       	out	0x08, r24	; 8
		break;
 200:	08 95       	ret
		
		case unlock:
		PORTC = 0x04;
 202:	84 e0       	ldi	r24, 0x04	; 4
 204:	88 b9       	out	0x08, r24	; 8
		break;
 206:	08 95       	ret
		
		case locked:
		PORTC = 0x05;
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	88 b9       	out	0x08, r24	; 8
		break;
		
		default:
		break;
	}
}
 20c:	08 95       	ret
		case pound2:
		if((PINA & 0x04) == 0x00 && lockCode == 0x01) { //pound = 0 + trying to lock with same code
			state = y3;
			break;
		}
		else if ((PINA & 0x04) != 0x00 && lockCode == 0x01) { //incorrect lock code
 20e:	80 b1       	in	r24, 0x00	; 0
 210:	8b cf       	rjmp	.-234    	; 0x128 <tick+0x7a>
		case y3:
		if ((PINA & 0x02) == 0x02 && lockCode == 0x01) { //y = 1 + lock with same code
			state = locked;
			break;
		}
		else if ((PINA & 0x02) != 0x02 && lockCode == 0x01) { //incorrect lock code
 212:	80 b1       	in	r24, 0x00	; 0
 214:	ac cf       	rjmp	.-168    	; 0x16e <tick+0xc0>
 216:	08 95       	ret

00000218 <main>:
}

int main(void)
{
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 218:	11 b8       	out	0x01, r1	; 1
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x01;
 21e:	84 b9       	out	0x04, r24	; 4
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0xFF;
 224:	87 b9       	out	0x07, r24	; 7
 226:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x00;
 228:	15 b8       	out	0x05, r1	; 5
	state =	start;
 22a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <state>
	while (1)
	{
		tick();
 22e:	3f df       	rcall	.-386    	; 0xae <tick>
 230:	fe cf       	rjmp	.-4      	; 0x22e <main+0x16>

00000232 <_exit>:
 232:	f8 94       	cli

00000234 <__stop_program>:
 234:	ff cf       	rjmp	.-2      	; 0x234 <__stop_program>
