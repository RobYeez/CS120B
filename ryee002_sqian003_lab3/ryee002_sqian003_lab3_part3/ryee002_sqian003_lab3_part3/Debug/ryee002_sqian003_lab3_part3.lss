
ryee002_sqian003_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000885  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a8  00000000  00000000  00000a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000456  00000000  00000000  000014dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	33 c0       	rjmp	.+102    	; 0x102 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	unsigned char GetBit(unsigned char x, unsigned char k) {
    	return ((x & (0x01 << k)) != 0);
	}

    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00;
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	18 b8       	out	0x08, r1	; 8
	
	unsigned char tempAback = 0x00;
	unsigned char tempA = 0x00;
	unsigned char tempC = 0x00;
  a8:	90 e0       	ldi	r25, 0x00	; 0
	
	while(1) {
		tempAback = 0x00;
		tempAback = PINA & 0x0F;
  aa:	80 b1       	in	r24, 0x00	; 0
  ac:	8f 70       	andi	r24, 0x0F	; 15
		PORTC = 0x00;
  ae:	18 b8       	out	0x08, r1	; 8
	/*	tempA = 0x00;
		tempC = 0x00; */
		if(tempAback == 0x01 || tempAback == 0x02) 
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	28 0f       	add	r18, r24
  b4:	22 30       	cpi	r18, 0x02	; 2
  b6:	a8 f0       	brcs	.+42     	; 0xe2 <main+0x44>
		{
			tempC = 0x60; //Includes port6 
		}
		else if (tempAback == 0x03 || tempAback == 0x04) 
  b8:	2d ef       	ldi	r18, 0xFD	; 253
  ba:	28 0f       	add	r18, r24
  bc:	22 30       	cpi	r18, 0x02	; 2
  be:	98 f0       	brcs	.+38     	; 0xe6 <main+0x48>
		{
			tempC = 0x70; //Includes port6
		}
		else if (tempAback == 0x05 || tempAback == 0x06)
  c0:	2b ef       	ldi	r18, 0xFB	; 251
  c2:	28 0f       	add	r18, r24
  c4:	22 30       	cpi	r18, 0x02	; 2
  c6:	88 f0       	brcs	.+34     	; 0xea <main+0x4c>
		{
			tempC = 0x38;
		}
		else if (tempAback == 0x07 || tempAback == 0x08 || tempAback == 0x09)
  c8:	29 ef       	ldi	r18, 0xF9	; 249
  ca:	28 0f       	add	r18, r24
  cc:	23 30       	cpi	r18, 0x03	; 3
  ce:	78 f0       	brcs	.+30     	; 0xee <main+0x50>
		{
			tempC = 0x3C;
		}
		else if (tempAback == 0x0A || tempAback == 0x0B || tempAback == 0x0C) //10,11,12
  d0:	26 ef       	ldi	r18, 0xF6	; 246
  d2:	28 0f       	add	r18, r24
  d4:	23 30       	cpi	r18, 0x03	; 3
  d6:	68 f0       	brcs	.+26     	; 0xf2 <main+0x54>
		{
			tempC = 0x3E;
		}
		else if (tempAback == 0x0D || tempAback == 0x0E || tempAback == 0x0F) //13,14,15
  d8:	8d 50       	subi	r24, 0x0D	; 13
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	58 f4       	brcc	.+22     	; 0xf4 <main+0x56>
		{
    		tempC = 0x3F;
  de:	9f e3       	ldi	r25, 0x3F	; 63
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <main+0x56>
		PORTC = 0x00;
	/*	tempA = 0x00;
		tempC = 0x00; */
		if(tempAback == 0x01 || tempAback == 0x02) 
		{
			tempC = 0x60; //Includes port6 
  e2:	90 e6       	ldi	r25, 0x60	; 96
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <main+0x56>
		}
		else if (tempAback == 0x03 || tempAback == 0x04) 
		{
			tempC = 0x70; //Includes port6
  e6:	90 e7       	ldi	r25, 0x70	; 112
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <main+0x56>
		}
		else if (tempAback == 0x05 || tempAback == 0x06)
		{
			tempC = 0x38;
  ea:	98 e3       	ldi	r25, 0x38	; 56
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <main+0x56>
		}
		else if (tempAback == 0x07 || tempAback == 0x08 || tempAback == 0x09)
		{
			tempC = 0x3C;
  ee:	9c e3       	ldi	r25, 0x3C	; 60
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <main+0x56>
		}
		else if (tempAback == 0x0A || tempAback == 0x0B || tempAback == 0x0C) //10,11,12
		{
			tempC = 0x3E;
  f2:	9e e3       	ldi	r25, 0x3E	; 62
		}
		else if (tempAback == 0x0D || tempAback == 0x0E || tempAback == 0x0F) //13,14,15
		{
    		tempC = 0x3F;
		}
		tempA = PINA;
  f4:	80 b1       	in	r24, 0x00	; 0
		if ((tempA & 0x70) == 0x30){
  f6:	80 77       	andi	r24, 0x70	; 112
  f8:	80 33       	cpi	r24, 0x30	; 48
  fa:	09 f4       	brne	.+2      	; 0xfe <main+0x60>
			tempC = (tempC | 0x80);
  fc:	90 68       	ori	r25, 0x80	; 128
		}
		PORTC = tempC;
  fe:	98 b9       	out	0x08, r25	; 8
	}
 100:	d4 cf       	rjmp	.-88     	; 0xaa <main+0xc>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
