
ryee002_sqian003_lab4_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001e8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000087d  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000afd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000308  00000000  00000000  000012d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000015dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a67  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a1 30       	cpi	r26, 0x01	; 1
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	56 d0       	rcall	.+172    	; 0x156 <main>
  aa:	62 c0       	rjmp	.+196    	; 0x170 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
enum States {start, pound1, pound2, y3, unlock} state;



void tick() {
	switch (state) //transitions 
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b2:	82 30       	cpi	r24, 0x02	; 2
  b4:	b1 f0       	breq	.+44     	; 0xe2 <tick+0x34>
  b6:	28 f4       	brcc	.+10     	; 0xc2 <tick+0x14>
  b8:	88 23       	and	r24, r24
  ba:	41 f0       	breq	.+16     	; 0xcc <tick+0x1e>
  bc:	81 30       	cpi	r24, 0x01	; 1
  be:	59 f0       	breq	.+22     	; 0xd6 <tick+0x28>
  c0:	2d c0       	rjmp	.+90     	; 0x11c <tick+0x6e>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	c1 f0       	breq	.+48     	; 0xf6 <tick+0x48>
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	11 f1       	breq	.+68     	; 0x10e <tick+0x60>
  ca:	28 c0       	rjmp	.+80     	; 0x11c <tick+0x6e>
	{
		case start:
		state = pound1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTB = 0x00;
  d2:	15 b8       	out	0x05, r1	; 5
		break;
  d4:	27 c0       	rjmp	.+78     	; 0x124 <tick+0x76>
		
		case pound1:
		if ((PINA & 0x04) == 0x04) { //pound = 1
  d6:	02 9b       	sbis	0x00, 2	; 0
  d8:	32 c0       	rjmp	.+100    	; 0x13e <tick+0x90>
			state = pound2;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e0:	31 c0       	rjmp	.+98     	; 0x144 <tick+0x96>
			state = pound1;
			break;
		}
		
		case pound2:
		if((PINA & 0x04) == 0x00) { //pound = 0
  e2:	02 99       	sbic	0x00, 2	; 0
  e4:	04 c0       	rjmp	.+8      	; 0xee <tick+0x40>
			state = y3;
  e6:	83 e0       	ldi	r24, 0x03	; 3
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ec:	2e c0       	rjmp	.+92     	; 0x14a <tick+0x9c>
			break;
		}
		else {
			state = pound1;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  f4:	24 c0       	rjmp	.+72     	; 0x13e <tick+0x90>
		}
		
		case y3:
		if ((PINA & 0x02) == 0x02) { //y = 1
  f6:	01 9b       	sbis	0x00, 1	; 0
  f8:	06 c0       	rjmp	.+12     	; 0x106 <tick+0x58>
			state = unlock;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTB = 0x01;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	85 b9       	out	0x05, r24	; 5
			break;
 104:	0f c0       	rjmp	.+30     	; 0x124 <tick+0x76>
		}
		else {
			state = pound1;
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 10c:	18 c0       	rjmp	.+48     	; 0x13e <tick+0x90>
		}
		
		case unlock:
		if ((PINA & 0x80) == 0x80) {
 10e:	07 9b       	sbis	0x00, 7	; 0
 110:	1f c0       	rjmp	.+62     	; 0x150 <tick+0xa2>
			state = pound1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTB = 0x00;
 118:	15 b8       	out	0x05, r1	; 5
			break;
 11a:	04 c0       	rjmp	.+8      	; 0x124 <tick+0x76>
		else {
			break;
		}
		
		default:
		state = pound1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		PORTB = 0x00;
 122:	15 b8       	out	0x05, r1	; 5
		break;
	}
	switch(state) { //state actions
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	61 f0       	breq	.+24     	; 0x144 <tick+0x96>
 12c:	18 f4       	brcc	.+6      	; 0x134 <tick+0x86>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	89 f4       	brne	.+34     	; 0x154 <tick+0xa6>
 132:	05 c0       	rjmp	.+10     	; 0x13e <tick+0x90>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	49 f0       	breq	.+18     	; 0x14a <tick+0x9c>
 138:	84 30       	cpi	r24, 0x04	; 4
 13a:	51 f0       	breq	.+20     	; 0x150 <tick+0xa2>
 13c:	08 95       	ret
		case start:
		break;
		
		case pound1:
		PORTC = 0x01;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	88 b9       	out	0x08, r24	; 8
		break;
 142:	08 95       	ret
	
		case pound2:
		PORTC = 0x02;
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	88 b9       	out	0x08, r24	; 8
		break;
 148:	08 95       	ret
		
		case y3:
		PORTC = 0x03;
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	88 b9       	out	0x08, r24	; 8
		break;
 14e:	08 95       	ret
		
		case unlock:
		PORTC = 0x04;
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	88 b9       	out	0x08, r24	; 8
 154:	08 95       	ret

00000156 <main>:
}

int main(void)
{
	/* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
 156:	11 b8       	out	0x01, r1	; 1
 158:	8f ef       	ldi	r24, 0xFF	; 255
 15a:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x01;
 15c:	84 b9       	out	0x04, r24	; 4
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	95 b9       	out	0x05, r25	; 5
	DDRC = 0xFF; PORTC = 0xFF;
 162:	87 b9       	out	0x07, r24	; 7
 164:	88 b9       	out	0x08, r24	; 8
	PORTB = 0x00;
 166:	15 b8       	out	0x05, r1	; 5
	state =	start;
 168:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	while (1)
	{
		tick();
 16c:	a0 df       	rcall	.-192    	; 0xae <tick>
 16e:	fe cf       	rjmp	.-4      	; 0x16c <main+0x16>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
