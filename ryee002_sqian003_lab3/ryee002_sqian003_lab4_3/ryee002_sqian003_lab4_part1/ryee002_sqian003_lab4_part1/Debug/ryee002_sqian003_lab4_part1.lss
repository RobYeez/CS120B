
ryee002_sqian003_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000246  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000861  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e2  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043c  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000076  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001af2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	75 d0       	rcall	.+234    	; 0x194 <main>
  aa:	91 c0       	rjmp	.+290    	; 0x1ce <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <Tick>:
*/

#include <avr/io.h>
enum States {start, s1, s2} state;

void Tick() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	switch (state) { //transitions
  b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	91 05       	cpc	r25, r1
  c2:	69 f0       	breq	.+26     	; 0xde <Tick+0x30>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	91 05       	cpc	r25, r1
  c8:	18 f0       	brcs	.+6      	; 0xd0 <Tick+0x22>
  ca:	02 97       	sbiw	r24, 0x02	; 2
  cc:	01 f1       	breq	.+64     	; 0x10e <Tick+0x60>
  ce:	37 c0       	rjmp	.+110    	; 0x13e <Tick+0x90>
		case start:
			state = s1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
  dc:	37 c0       	rjmp	.+110    	; 0x14c <Tick+0x9e>
		case s1:
			if((PINA & 0x01) == 0x01) {
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	80 81       	ld	r24, Z
  e6:	88 2f       	mov	r24, r24
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	81 70       	andi	r24, 0x01	; 1
  ec:	99 27       	eor	r25, r25
  ee:	89 2b       	or	r24, r25
  f0:	39 f0       	breq	.+14     	; 0x100 <Tick+0x52>
				state = s2;
  f2:	82 e0       	ldi	r24, 0x02	; 2
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else {
				state = s1;
			}
			break;
  fe:	26 c0       	rjmp	.+76     	; 0x14c <Tick+0x9e>
		case s1:
			if((PINA & 0x01) == 0x01) {
				state = s2;
			}
			else {
				state = s1;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 10c:	1f c0       	rjmp	.+62     	; 0x14c <Tick+0x9e>
		case s2:
			if((PINA & 0x01) == 0x01) {
 10e:	80 e2       	ldi	r24, 0x20	; 32
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fc 01       	movw	r30, r24
 114:	80 81       	ld	r24, Z
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	81 70       	andi	r24, 0x01	; 1
 11c:	99 27       	eor	r25, r25
 11e:	89 2b       	or	r24, r25
 120:	39 f0       	breq	.+14     	; 0x130 <Tick+0x82>
				state = s1;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 12a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			else {
				state = s2;
			}
			break;
 12e:	0e c0       	rjmp	.+28     	; 0x14c <Tick+0x9e>
		case s2:
			if((PINA & 0x01) == 0x01) {
				state = s1;
			}
			else {
				state = s2;
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}
			break;
 13c:	07 c0       	rjmp	.+14     	; 0x14c <Tick+0x9e>
		default:
			state = s1;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 146:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			break;
 14a:	00 00       	nop
	}
	switch (state) { //state actions
 14c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 150:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	91 05       	cpc	r25, r1
 158:	31 f0       	breq	.+12     	; 0x166 <Tick+0xb8>
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	91 05       	cpc	r25, r1
 15e:	a8 f0       	brcs	.+42     	; 0x18a <Tick+0xdc>
 160:	02 97       	sbiw	r24, 0x02	; 2
 162:	39 f0       	breq	.+14     	; 0x172 <Tick+0xc4>
 164:	0c c0       	rjmp	.+24     	; 0x17e <Tick+0xd0>
		case start:
			break;
		case s1:
			PORTB = 0x01;
 166:	85 e2       	ldi	r24, 0x25	; 37
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
			break;
 170:	0d c0       	rjmp	.+26     	; 0x18c <Tick+0xde>
		case s2:
			PORTB = 0x02;
 172:	85 e2       	ldi	r24, 0x25	; 37
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	22 e0       	ldi	r18, 0x02	; 2
 178:	fc 01       	movw	r30, r24
 17a:	20 83       	st	Z, r18
			break;
 17c:	07 c0       	rjmp	.+14     	; 0x18c <Tick+0xde>
		default:
			PORTB = 0x01;
 17e:	85 e2       	ldi	r24, 0x25	; 37
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	21 e0       	ldi	r18, 0x01	; 1
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
			break; 
 188:	01 c0       	rjmp	.+2      	; 0x18c <Tick+0xde>
			state = s1;
			break;
	}
	switch (state) { //state actions
		case start:
			break;
 18a:	00 00       	nop
			break;
		default:
			PORTB = 0x01;
			break; 
	}
}
 18c:	00 00       	nop
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <main>:

int main(void)
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0x01;	//1 bit inputs
 19c:	81 e2       	ldi	r24, 0x21	; 33
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	fc 01       	movw	r30, r24
 1a2:	10 82       	st	Z, r1
 1a4:	82 e2       	ldi	r24, 0x22	; 34
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
	DDRB = 0x02; PORTB = 0x02;  //2 bit outputs
 1ae:	84 e2       	ldi	r24, 0x24	; 36
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	22 e0       	ldi	r18, 0x02	; 2
 1b4:	fc 01       	movw	r30, r24
 1b6:	20 83       	st	Z, r18
 1b8:	85 e2       	ldi	r24, 0x25	; 37
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	22 e0       	ldi	r18, 0x02	; 2
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
	state = start;
 1c2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	while(1) {
		Tick();
 1ca:	71 df       	rcall	.-286    	; 0xae <Tick>
	}    
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <main+0x36>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
