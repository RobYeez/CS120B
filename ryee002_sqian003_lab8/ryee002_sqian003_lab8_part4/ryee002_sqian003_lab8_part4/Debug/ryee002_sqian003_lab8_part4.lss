
ryee002_sqian003_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000298  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000032e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000873  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c4  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033a  00000000  00000000  000013ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000449  00000000  00000000  00001770  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001bb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e9       	ldi	r30, 0x98	; 152
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 30       	cpi	r26, 0x04	; 4
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	08 d0       	rcall	.+16     	; 0xd4 <main>
  c4:	e7 c0       	rjmp	.+462    	; 0x294 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
unsigned short my_short = 0x0000;
unsigned char MAX = 0x7F;
//unsigned char one_eigth = MAX / 8;

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 6e       	ori	r24, 0xE0	; 224
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <main>:


int main(void)
{
    /* Replace with your application code */
	DDRA = 0x00; PORTA = 0xFF;
  d4:	11 b8       	out	0x01, r1	; 1
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
  da:	84 b9       	out	0x04, r24	; 4
  dc:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
  de:	8a b9       	out	0x0a, r24	; 10
  e0:	1b b8       	out	0x0b, r1	; 11
	
	ADC_init();
  e2:	f2 df       	rcall	.-28     	; 0xc8 <ADC_init>
    while (1) 
    {
		my_short = ADC;
  e4:	e8 e7       	ldi	r30, 0x78	; 120
  e6:	f0 e0       	ldi	r31, 0x00	; 0
		if (my_short/8 >= 7 * (MAX/8) && (my_short/8 < MAX)) {
			PORTB = 0x7F;
		}
		else if (my_short/8 >= 6 * (MAX/8) && (my_short/8 < 7 * (MAX/8))){
			PORTB = 0x3F;
  e8:	af e3       	ldi	r26, 0x3F	; 63
		}
		else if (my_short/8 >= 2 * (MAX/8) && (my_short/8 < 3 * (MAX/8))){
			PORTB = 0x03;
		}
		else if (my_short/8 >= 1 * (MAX/8) && (my_short/8 < 2 * (MAX/8))) {
			PORTB = 0x01;
  ea:	01 e0       	ldi	r16, 0x01	; 1
		}
		else if (my_short/8 >= 3 * (MAX/8) && (my_short/8 < 4 * (MAX/8))) {
			PORTB = 0x07;
		}
		else if (my_short/8 >= 2 * (MAX/8) && (my_short/8 < 3 * (MAX/8))){
			PORTB = 0x03;
  ec:	13 e0       	ldi	r17, 0x03	; 3
		}
		else if (my_short/8 >= 4 * (MAX/8) && (my_short/8 < 5 * (MAX/8))){
			PORTB = 0x0F;
		}
		else if (my_short/8 >= 3 * (MAX/8) && (my_short/8 < 4 * (MAX/8))) {
			PORTB = 0x07;
  ee:	d7 e0       	ldi	r29, 0x07	; 7
		}
		else if (my_short/8 >= 5 * (MAX/8) && (my_short/8 < 6 * (MAX/8))) {
			PORTB = 0x1F;
		}
		else if (my_short/8 >= 4 * (MAX/8) && (my_short/8 < 5 * (MAX/8))){
			PORTB = 0x0F;
  f0:	cf e0       	ldi	r28, 0x0F	; 15
		}
		else if (my_short/8 >= 6 * (MAX/8) && (my_short/8 < 7 * (MAX/8))){
			PORTB = 0x3F;
		}
		else if (my_short/8 >= 5 * (MAX/8) && (my_short/8 < 6 * (MAX/8))) {
			PORTB = 0x1F;
  f2:	bf e1       	ldi	r27, 0x1F	; 31
	ADC_init();
    while (1) 
    {
		my_short = ADC;
		if (my_short/8 >= 7 * (MAX/8) && (my_short/8 < MAX)) {
			PORTB = 0x7F;
  f4:	7f e7       	ldi	r23, 0x7F	; 127
	DDRD = 0xFF; PORTD = 0x00;
	
	ADC_init();
    while (1) 
    {
		my_short = ADC;
  f6:	80 81       	ld	r24, Z
  f8:	91 81       	ldd	r25, Z+1	; 0x01
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		if (my_short/8 >= 7 * (MAX/8) && (my_short/8 < MAX)) {
 102:	96 95       	lsr	r25
 104:	87 95       	ror	r24
 106:	96 95       	lsr	r25
 108:	87 95       	ror	r24
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
 10e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <MAX>
 112:	64 2f       	mov	r22, r20
 114:	66 95       	lsr	r22
 116:	66 95       	lsr	r22
 118:	66 95       	lsr	r22
 11a:	26 2f       	mov	r18, r22
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	57 e0       	ldi	r21, 0x07	; 7
 120:	65 9f       	mul	r22, r21
 122:	70 01       	movw	r14, r0
 124:	11 24       	eor	r1, r1
 126:	8e 15       	cp	r24, r14
 128:	9f 05       	cpc	r25, r15
 12a:	08 f4       	brcc	.+2      	; 0x12e <main+0x5a>
 12c:	4d c0       	rjmp	.+154    	; 0x1c8 <main+0xf4>
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	84 17       	cp	r24, r20
 132:	95 07       	cpc	r25, r21
 134:	10 f4       	brcc	.+4      	; 0x13a <main+0x66>
			PORTB = 0x7F;
 136:	75 b9       	out	0x05, r23	; 5
 138:	de cf       	rjmp	.-68     	; 0xf6 <main+0x22>
		}
		else if (my_short/8 >= 6 * (MAX/8) && (my_short/8 < 7 * (MAX/8))){
 13a:	a9 01       	movw	r20, r18
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	42 0f       	add	r20, r18
 142:	53 1f       	adc	r21, r19
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	84 17       	cp	r24, r20
 14a:	95 07       	cpc	r25, r21
 14c:	18 f4       	brcc	.+6      	; 0x154 <main+0x80>
 14e:	47 c0       	rjmp	.+142    	; 0x1de <main+0x10a>
			PORTB = 0x3F;
 150:	a5 b9       	out	0x05, r26	; 5
 152:	d1 cf       	rjmp	.-94     	; 0xf6 <main+0x22>
		}
		else if (my_short/8 >= 5 * (MAX/8) && (my_short/8 < 6 * (MAX/8))) {
 154:	79 01       	movw	r14, r18
 156:	ee 0c       	add	r14, r14
 158:	ff 1c       	adc	r15, r15
 15a:	ee 0c       	add	r14, r14
 15c:	ff 1c       	adc	r15, r15
 15e:	e2 0e       	add	r14, r18
 160:	f3 1e       	adc	r15, r19
 162:	8e 15       	cp	r24, r14
 164:	9f 05       	cpc	r25, r15
 166:	08 f4       	brcc	.+2      	; 0x16a <main+0x96>
 168:	46 c0       	rjmp	.+140    	; 0x1f6 <main+0x122>
 16a:	84 17       	cp	r24, r20
 16c:	95 07       	cpc	r25, r21
 16e:	10 f4       	brcc	.+4      	; 0x174 <main+0xa0>
			PORTB = 0x1F;
 170:	b5 b9       	out	0x05, r27	; 5
 172:	c1 cf       	rjmp	.-126    	; 0xf6 <main+0x22>
		}
		else if (my_short/8 >= 4 * (MAX/8) && (my_short/8 < 5 * (MAX/8))){
 174:	a9 01       	movw	r20, r18
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	84 17       	cp	r24, r20
 180:	95 07       	cpc	r25, r21
 182:	08 f4       	brcc	.+2      	; 0x186 <main+0xb2>
 184:	41 c0       	rjmp	.+130    	; 0x208 <main+0x134>
 186:	8e 15       	cp	r24, r14
 188:	9f 05       	cpc	r25, r15
 18a:	10 f4       	brcc	.+4      	; 0x190 <main+0xbc>
			PORTB = 0x0F;
 18c:	c5 b9       	out	0x05, r28	; 5
 18e:	b3 cf       	rjmp	.-154    	; 0xf6 <main+0x22>
		}
		else if (my_short/8 >= 3 * (MAX/8) && (my_short/8 < 4 * (MAX/8))) {
 190:	79 01       	movw	r14, r18
 192:	ee 0c       	add	r14, r14
 194:	ff 1c       	adc	r15, r15
 196:	e2 0e       	add	r14, r18
 198:	f3 1e       	adc	r15, r19
 19a:	8e 15       	cp	r24, r14
 19c:	9f 05       	cpc	r25, r15
 19e:	e8 f1       	brcs	.+122    	; 0x21a <main+0x146>
 1a0:	84 17       	cp	r24, r20
 1a2:	95 07       	cpc	r25, r21
 1a4:	10 f4       	brcc	.+4      	; 0x1aa <main+0xd6>
			PORTB = 0x07;
 1a6:	d5 b9       	out	0x05, r29	; 5
 1a8:	a6 cf       	rjmp	.-180    	; 0xf6 <main+0x22>
		}
		else if (my_short/8 >= 2 * (MAX/8) && (my_short/8 < 3 * (MAX/8))){
 1aa:	22 0f       	add	r18, r18
 1ac:	33 1f       	adc	r19, r19
 1ae:	82 17       	cp	r24, r18
 1b0:	93 07       	cpc	r25, r19
 1b2:	c8 f1       	brcs	.+114    	; 0x226 <main+0x152>
 1b4:	8e 15       	cp	r24, r14
 1b6:	9f 05       	cpc	r25, r15
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <main+0xe8>
 1ba:	5e c0       	rjmp	.+188    	; 0x278 <main+0x1a4>
			PORTB = 0x03;
 1bc:	15 b9       	out	0x05, r17	; 5
 1be:	9b cf       	rjmp	.-202    	; 0xf6 <main+0x22>
		}
		else if (my_short/8 >= 1 * (MAX/8) && (my_short/8 < 2 * (MAX/8))) {
			PORTB = 0x01;
 1c0:	05 b9       	out	0x05, r16	; 5
 1c2:	99 cf       	rjmp	.-206    	; 0xf6 <main+0x22>
		}
		else if (my_short/8 >= 0 * (MAX/8) && (my_short/8 < 1 * (MAX/8))) {
			PORTB = 0x00;
 1c4:	15 b8       	out	0x05, r1	; 5
 1c6:	97 cf       	rjmp	.-210    	; 0xf6 <main+0x22>
    {
		my_short = ADC;
		if (my_short/8 >= 7 * (MAX/8) && (my_short/8 < MAX)) {
			PORTB = 0x7F;
		}
		else if (my_short/8 >= 6 * (MAX/8) && (my_short/8 < 7 * (MAX/8))){
 1c8:	a9 01       	movw	r20, r18
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	42 0f       	add	r20, r18
 1d0:	53 1f       	adc	r21, r19
 1d2:	44 0f       	add	r20, r20
 1d4:	55 1f       	adc	r21, r21
 1d6:	84 17       	cp	r24, r20
 1d8:	95 07       	cpc	r25, r21
 1da:	58 f1       	brcs	.+86     	; 0x232 <main+0x15e>
 1dc:	b9 cf       	rjmp	.-142    	; 0x150 <main+0x7c>
			PORTB = 0x3F;
		}
		else if (my_short/8 >= 5 * (MAX/8) && (my_short/8 < 6 * (MAX/8))) {
 1de:	a9 01       	movw	r20, r18
 1e0:	44 0f       	add	r20, r20
 1e2:	55 1f       	adc	r21, r21
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	42 0f       	add	r20, r18
 1ea:	53 1f       	adc	r21, r19
 1ec:	84 17       	cp	r24, r20
 1ee:	95 07       	cpc	r25, r21
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <main+0x120>
 1f2:	be cf       	rjmp	.-132    	; 0x170 <main+0x9c>
 1f4:	29 c0       	rjmp	.+82     	; 0x248 <main+0x174>
			PORTB = 0x1F;
		}
		else if (my_short/8 >= 4 * (MAX/8) && (my_short/8 < 5 * (MAX/8))){
 1f6:	a9 01       	movw	r20, r18
 1f8:	44 0f       	add	r20, r20
 1fa:	55 1f       	adc	r21, r21
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	84 17       	cp	r24, r20
 202:	95 07       	cpc	r25, r21
 204:	50 f1       	brcs	.+84     	; 0x25a <main+0x186>
 206:	c2 cf       	rjmp	.-124    	; 0x18c <main+0xb8>
			PORTB = 0x0F;
		}
		else if (my_short/8 >= 3 * (MAX/8) && (my_short/8 < 4 * (MAX/8))) {
 208:	a9 01       	movw	r20, r18
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	42 0f       	add	r20, r18
 210:	53 1f       	adc	r21, r19
 212:	84 17       	cp	r24, r20
 214:	95 07       	cpc	r25, r21
 216:	38 f6       	brcc	.-114    	; 0x1a6 <main+0xd2>
 218:	29 c0       	rjmp	.+82     	; 0x26c <main+0x198>
			PORTB = 0x07;
		}
		else if (my_short/8 >= 2 * (MAX/8) && (my_short/8 < 3 * (MAX/8))){
 21a:	22 0f       	add	r18, r18
 21c:	33 1f       	adc	r19, r19
 21e:	82 17       	cp	r24, r18
 220:	93 07       	cpc	r25, r19
 222:	88 f1       	brcs	.+98     	; 0x286 <main+0x1b2>
 224:	cb cf       	rjmp	.-106    	; 0x1bc <main+0xe8>
			PORTB = 0x03;
		}
		else if (my_short/8 >= 1 * (MAX/8) && (my_short/8 < 2 * (MAX/8))) {
 226:	26 2f       	mov	r18, r22
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	82 17       	cp	r24, r18
 22c:	93 07       	cpc	r25, r19
 22e:	40 f6       	brcc	.-112    	; 0x1c0 <main+0xec>
 230:	c9 cf       	rjmp	.-110    	; 0x1c4 <main+0xf0>
			PORTB = 0x7F;
		}
		else if (my_short/8 >= 6 * (MAX/8) && (my_short/8 < 7 * (MAX/8))){
			PORTB = 0x3F;
		}
		else if (my_short/8 >= 5 * (MAX/8) && (my_short/8 < 6 * (MAX/8))) {
 232:	a9 01       	movw	r20, r18
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	42 0f       	add	r20, r18
 23e:	53 1f       	adc	r21, r19
 240:	84 17       	cp	r24, r20
 242:	95 07       	cpc	r25, r21
 244:	c0 f2       	brcs	.-80     	; 0x1f6 <main+0x122>
 246:	94 cf       	rjmp	.-216    	; 0x170 <main+0x9c>
			PORTB = 0x1F;
		}
		else if (my_short/8 >= 4 * (MAX/8) && (my_short/8 < 5 * (MAX/8))){
 248:	a9 01       	movw	r20, r18
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	44 0f       	add	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	84 17       	cp	r24, r20
 254:	95 07       	cpc	r25, r21
 256:	c0 f2       	brcs	.-80     	; 0x208 <main+0x134>
 258:	99 cf       	rjmp	.-206    	; 0x18c <main+0xb8>
			PORTB = 0x0F;
		}
		else if (my_short/8 >= 3 * (MAX/8) && (my_short/8 < 4 * (MAX/8))) {
 25a:	a9 01       	movw	r20, r18
 25c:	44 0f       	add	r20, r20
 25e:	55 1f       	adc	r21, r21
 260:	42 0f       	add	r20, r18
 262:	53 1f       	adc	r21, r19
 264:	84 17       	cp	r24, r20
 266:	95 07       	cpc	r25, r21
 268:	c0 f2       	brcs	.-80     	; 0x21a <main+0x146>
 26a:	9d cf       	rjmp	.-198    	; 0x1a6 <main+0xd2>
			PORTB = 0x07;
		}
		else if (my_short/8 >= 2 * (MAX/8) && (my_short/8 < 3 * (MAX/8))){
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	82 17       	cp	r24, r18
 272:	93 07       	cpc	r25, r19
 274:	c0 f2       	brcs	.-80     	; 0x226 <main+0x152>
 276:	a2 cf       	rjmp	.-188    	; 0x1bc <main+0xe8>
			PORTB = 0x03;
		}
		else if (my_short/8 >= 1 * (MAX/8) && (my_short/8 < 2 * (MAX/8))) {
 278:	26 2f       	mov	r18, r22
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	82 17       	cp	r24, r18
 27e:	93 07       	cpc	r25, r19
 280:	08 f0       	brcs	.+2      	; 0x284 <main+0x1b0>
 282:	39 cf       	rjmp	.-398    	; 0xf6 <main+0x22>
 284:	9f cf       	rjmp	.-194    	; 0x1c4 <main+0xf0>
 286:	26 2f       	mov	r18, r22
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	82 17       	cp	r24, r18
 28c:	93 07       	cpc	r25, r19
 28e:	08 f4       	brcc	.+2      	; 0x292 <main+0x1be>
 290:	99 cf       	rjmp	.-206    	; 0x1c4 <main+0xf0>
 292:	96 cf       	rjmp	.-212    	; 0x1c0 <main+0xec>

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
