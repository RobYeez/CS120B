
ryee002_sqian003_lab2_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085b  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000791  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000555  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001185a  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00012f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00012fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000152  00000000  00000000  00012ff2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	27 c0       	rjmp	.+78     	; 0xea <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
 */
#include <asf.h>

int main(void)
{
    DDRA = 0x00; PORTA = 0xFF; //8 input A
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	82 b9       	out	0x02, r24	; 2
    DDRB = 0x00; PORTB = 0xFF; //8 input B
  a4:	14 b8       	out	0x04, r1	; 4
  a6:	85 b9       	out	0x05, r24	; 5
	DDRC = 0x00; PORTC = 0xFF; //8 input C
  a8:	17 b8       	out	0x07, r1	; 7
  aa:	88 b9       	out	0x08, r24	; 8
    DDRD = 0xFF; PORTD = 0x00; //8 output D
  ac:	8a b9       	out	0x0a, r24	; 10
  ae:	1b b8       	out	0x0b, r1	; 11
	unsigned char weightB = 0x00; //weight of personB
	unsigned char weightC = 0x00; //weight of personC
	unsigned char total_weight = 0x00; //total weight

	while(1){
		PORTD = 0x00; //helps for testing
  b0:	1b b8       	out	0x0b, r1	; 11
		weightA = PINA; //test example 105 x69 1101001
  b2:	80 b1       	in	r24, 0x00	; 0
		weightB = PINB; //test example 45 x2D 101101
  b4:	93 b1       	in	r25, 0x03	; 3
		weightC = PINC; //test example 3 x03 0011
  b6:	36 b1       	in	r19, 0x06	; 6
		total_weight = weightA + weightB + weightC;
  b8:	98 0f       	add	r25, r24
  ba:	93 0f       	add	r25, r19
		PORTD = total_weight >> 2;
  bc:	29 2f       	mov	r18, r25
  be:	26 95       	lsr	r18
  c0:	26 95       	lsr	r18
  c2:	2b b9       	out	0x0b, r18	; 11
		PORTD = PORTD << 2;
  c4:	2b b1       	in	r18, 0x0b	; 11
  c6:	22 0f       	add	r18, r18
  c8:	22 0f       	add	r18, r18
  ca:	2b b9       	out	0x0b, r18	; 11
		//should have PD0 and PD1 as 0;
		if(total_weight > 140) {
  cc:	9d 38       	cpi	r25, 0x8D	; 141
  ce:	18 f0       	brcs	.+6      	; 0xd6 <main+0x38>
			PORTD = PORTD + 0x01;
  d0:	9b b1       	in	r25, 0x0b	; 11
  d2:	9f 5f       	subi	r25, 0xFF	; 255
  d4:	9b b9       	out	0x0b, r25	; 11
		}	
		if(weightA - weightC > 80) {
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	83 1b       	sub	r24, r19
  da:	91 09       	sbc	r25, r1
  dc:	81 35       	cpi	r24, 0x51	; 81
  de:	91 05       	cpc	r25, r1
  e0:	3c f3       	brlt	.-50     	; 0xb0 <main+0x12>
			PORTD = PORTD + 0x02;
  e2:	8b b1       	in	r24, 0x0b	; 11
  e4:	8e 5f       	subi	r24, 0xFE	; 254
  e6:	8b b9       	out	0x0b, r24	; 11
  e8:	e3 cf       	rjmp	.-58     	; 0xb0 <main+0x12>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
